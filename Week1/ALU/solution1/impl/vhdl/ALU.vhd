-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity ALU is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    inA_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inA_ce0 : OUT STD_LOGIC;
    inA_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    inB_address0 : OUT STD_LOGIC_VECTOR (9 downto 0);
    inB_ce0 : OUT STD_LOGIC;
    inB_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    op : IN STD_LOGIC_VECTOR (31 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of ALU is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "ALU,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=7.802000,HLS_SYN_LAT=1002,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=80,HLS_SYN_LUT=426,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv10_0 : STD_LOGIC_VECTOR (9 downto 0) := "0000000000";
    constant ap_const_lv10_3E8 : STD_LOGIC_VECTOR (9 downto 0) := "1111101000";
    constant ap_const_lv10_1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (2 downto 0) := "001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal result_reg_144 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_reg_156 : STD_LOGIC_VECTOR (9 downto 0);
    signal op_read_read_fu_48_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal exitcond_fu_188_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_269 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state2_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state3_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_1_fu_194_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state2 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_phi_mux_result_1_phi_fu_172_p12 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal result_6_fu_230_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter1_result_1_reg_167 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_5_fu_237_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_4_fu_244_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_3_fu_251_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal result_2_fu_258_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_phi_reg_pp0_iter0_result_1_reg_167 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_8_fu_200_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_206_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_4_fu_212_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_218_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_224_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_condition_130 : BOOLEAN;
    signal ap_condition_165 : BOOLEAN;
    signal ap_condition_66 : BOOLEAN;
    signal ap_condition_255 : BOOLEAN;


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state2) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state2);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_phi_reg_pp0_iter1_result_1_reg_167_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_1 = ap_condition_66)) then
                if ((ap_const_boolean_1 = ap_condition_165)) then 
                    ap_phi_reg_pp0_iter1_result_1_reg_167 <= ap_const_lv32_0;
                elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                    ap_phi_reg_pp0_iter1_result_1_reg_167 <= ap_phi_reg_pp0_iter0_result_1_reg_167;
                end if;
            end if; 
        end if;
    end process;

    i_reg_156_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_188_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_reg_156 <= i_1_fu_194_p2;
            elsif (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
                i_reg_156 <= ap_const_lv10_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond_reg_269 <= exitcond_fu_188_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_269 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1))) then
                result_reg_144 <= ap_phi_mux_result_1_phi_fu_172_p12;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_fu_188_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((exitcond_fu_188_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((exitcond_fu_188_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(1);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state4 <= ap_CS_fsm(2);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state2_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_130_assign_proc : process(exitcond_reg_269, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_block_pp0_stage0)
    begin
                ap_condition_130 <= ((exitcond_reg_269 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_165_assign_proc : process(op_read_read_fu_48_p2, exitcond_fu_188_p2)
    begin
                ap_condition_165 <= (not((op_read_read_fu_48_p2 = ap_const_lv32_1)) and not((op_read_read_fu_48_p2 = ap_const_lv32_2)) and not((op_read_read_fu_48_p2 = ap_const_lv32_3)) and not((op_read_read_fu_48_p2 = ap_const_lv32_4)) and not((op_read_read_fu_48_p2 = ap_const_lv32_0)) and (exitcond_fu_188_p2 = ap_const_lv1_0));
    end process;


    ap_condition_255_assign_proc : process(exitcond_fu_188_p2, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0)
    begin
                ap_condition_255 <= ((exitcond_fu_188_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0));
    end process;


    ap_condition_66_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
                ap_condition_66 <= ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0));
    end process;


    ap_condition_pp0_exit_iter0_state2_assign_proc : process(exitcond_fu_188_p2)
    begin
        if ((exitcond_fu_188_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_result_1_phi_fu_172_p12_assign_proc : process(op_read_read_fu_48_p2, result_6_fu_230_p2, ap_phi_reg_pp0_iter1_result_1_reg_167, result_5_fu_237_p2, result_4_fu_244_p2, result_3_fu_251_p2, result_2_fu_258_p2, ap_condition_130)
    begin
        if ((ap_const_boolean_1 = ap_condition_130)) then
            if ((op_read_read_fu_48_p2 = ap_const_lv32_0)) then 
                ap_phi_mux_result_1_phi_fu_172_p12 <= result_2_fu_258_p2;
            elsif ((op_read_read_fu_48_p2 = ap_const_lv32_1)) then 
                ap_phi_mux_result_1_phi_fu_172_p12 <= result_3_fu_251_p2;
            elsif ((op_read_read_fu_48_p2 = ap_const_lv32_2)) then 
                ap_phi_mux_result_1_phi_fu_172_p12 <= result_4_fu_244_p2;
            elsif ((op_read_read_fu_48_p2 = ap_const_lv32_3)) then 
                ap_phi_mux_result_1_phi_fu_172_p12 <= result_5_fu_237_p2;
            elsif ((op_read_read_fu_48_p2 = ap_const_lv32_4)) then 
                ap_phi_mux_result_1_phi_fu_172_p12 <= result_6_fu_230_p2;
            else 
                ap_phi_mux_result_1_phi_fu_172_p12 <= ap_phi_reg_pp0_iter1_result_1_reg_167;
            end if;
        else 
            ap_phi_mux_result_1_phi_fu_172_p12 <= ap_phi_reg_pp0_iter1_result_1_reg_167;
        end if; 
    end process;

    ap_phi_reg_pp0_iter0_result_1_reg_167 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";

    ap_ready_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    ap_return <= result_reg_144;
    exitcond_fu_188_p2 <= "1" when (i_reg_156 = ap_const_lv10_3E8) else "0";
    i_1_fu_194_p2 <= std_logic_vector(unsigned(i_reg_156) + unsigned(ap_const_lv10_1));

    inA_address0_assign_proc : process(op_read_read_fu_48_p2, tmp_8_fu_200_p1, tmp_6_fu_206_p1, tmp_4_fu_212_p1, tmp_2_fu_218_p1, tmp_fu_224_p1, ap_condition_255)
    begin
        if ((ap_const_boolean_1 = ap_condition_255)) then
            if ((op_read_read_fu_48_p2 = ap_const_lv32_0)) then 
                inA_address0 <= tmp_fu_224_p1(10 - 1 downto 0);
            elsif ((op_read_read_fu_48_p2 = ap_const_lv32_1)) then 
                inA_address0 <= tmp_2_fu_218_p1(10 - 1 downto 0);
            elsif ((op_read_read_fu_48_p2 = ap_const_lv32_2)) then 
                inA_address0 <= tmp_4_fu_212_p1(10 - 1 downto 0);
            elsif ((op_read_read_fu_48_p2 = ap_const_lv32_3)) then 
                inA_address0 <= tmp_6_fu_206_p1(10 - 1 downto 0);
            elsif ((op_read_read_fu_48_p2 = ap_const_lv32_4)) then 
                inA_address0 <= tmp_8_fu_200_p1(10 - 1 downto 0);
            else 
                inA_address0 <= "XXXXXXXXXX";
            end if;
        else 
            inA_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    inA_ce0_assign_proc : process(op_read_read_fu_48_p2, exitcond_fu_188_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_188_p2 = ap_const_lv1_0) and (op_read_read_fu_48_p2 = ap_const_lv32_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_188_p2 = ap_const_lv1_0) and (op_read_read_fu_48_p2 = ap_const_lv32_2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_188_p2 = ap_const_lv1_0) and (op_read_read_fu_48_p2 = ap_const_lv32_3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_188_p2 = ap_const_lv1_0) and (op_read_read_fu_48_p2 = ap_const_lv32_4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_188_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (op_read_read_fu_48_p2 = ap_const_lv32_0)))) then 
            inA_ce0 <= ap_const_logic_1;
        else 
            inA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    inB_address0_assign_proc : process(op_read_read_fu_48_p2, tmp_8_fu_200_p1, tmp_6_fu_206_p1, tmp_4_fu_212_p1, tmp_2_fu_218_p1, tmp_fu_224_p1, ap_condition_255)
    begin
        if ((ap_const_boolean_1 = ap_condition_255)) then
            if ((op_read_read_fu_48_p2 = ap_const_lv32_0)) then 
                inB_address0 <= tmp_fu_224_p1(10 - 1 downto 0);
            elsif ((op_read_read_fu_48_p2 = ap_const_lv32_1)) then 
                inB_address0 <= tmp_2_fu_218_p1(10 - 1 downto 0);
            elsif ((op_read_read_fu_48_p2 = ap_const_lv32_2)) then 
                inB_address0 <= tmp_4_fu_212_p1(10 - 1 downto 0);
            elsif ((op_read_read_fu_48_p2 = ap_const_lv32_3)) then 
                inB_address0 <= tmp_6_fu_206_p1(10 - 1 downto 0);
            elsif ((op_read_read_fu_48_p2 = ap_const_lv32_4)) then 
                inB_address0 <= tmp_8_fu_200_p1(10 - 1 downto 0);
            else 
                inB_address0 <= "XXXXXXXXXX";
            end if;
        else 
            inB_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    inB_ce0_assign_proc : process(op_read_read_fu_48_p2, exitcond_fu_188_p2, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_188_p2 = ap_const_lv1_0) and (op_read_read_fu_48_p2 = ap_const_lv32_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_188_p2 = ap_const_lv1_0) and (op_read_read_fu_48_p2 = ap_const_lv32_2) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_188_p2 = ap_const_lv1_0) and (op_read_read_fu_48_p2 = ap_const_lv32_3) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_188_p2 = ap_const_lv1_0) and (op_read_read_fu_48_p2 = ap_const_lv32_4) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_188_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (op_read_read_fu_48_p2 = ap_const_lv32_0)))) then 
            inB_ce0 <= ap_const_logic_1;
        else 
            inB_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    op_read_read_fu_48_p2 <= op;
    result_2_fu_258_p2 <= std_logic_vector(unsigned(inA_q0) + unsigned(inB_q0));
    result_3_fu_251_p2 <= std_logic_vector(unsigned(inA_q0) - unsigned(inB_q0));
    result_4_fu_244_p2 <= (inB_q0 and inA_q0);
    result_5_fu_237_p2 <= (inB_q0 or inA_q0);
    result_6_fu_230_p2 <= (inB_q0 xor inA_q0);
    tmp_2_fu_218_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_156),64));
    tmp_4_fu_212_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_156),64));
    tmp_6_fu_206_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_156),64));
    tmp_8_fu_200_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_156),64));
    tmp_fu_224_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_156),64));
end behav;
