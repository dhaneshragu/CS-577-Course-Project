// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="ALU,hls_ip_2018_2,{HLS_INPUT_TYPE=cxx,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xa7a12tcsg325-1q,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=6.548000,HLS_SYN_LAT=0,HLS_SYN_TPT=none,HLS_SYN_MEM=0,HLS_SYN_DSP=0,HLS_SYN_FF=0,HLS_SYN_LUT=469,HLS_VERSION=2018_2}" *)

module ALU (
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        inA,
        inB,
        op,
        ap_return
);


input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [31:0] inA;
input  [31:0] inB;
input  [31:0] op;
output  [31:0] ap_return;

wire   [0:0] sel_tmp8_fu_96_p2;
wire   [31:0] result_fu_42_p2;
wire   [31:0] result_1_fu_48_p2;
wire   [0:0] sel_tmp6_fu_90_p2;
wire   [0:0] sel_tmp4_fu_84_p2;
wire   [31:0] result_2_fu_54_p2;
wire   [31:0] result_3_fu_60_p2;
wire   [0:0] sel_tmp2_fu_78_p2;
wire   [0:0] sel_tmp_fu_72_p2;
wire   [31:0] result_4_fu_66_p2;
wire   [0:0] or_cond_fu_110_p2;
wire   [31:0] newSel_fu_102_p3;
wire   [31:0] newSel1_fu_116_p3;
wire   [0:0] or_cond1_fu_124_p2;
wire   [0:0] or_cond2_fu_146_p2;
wire   [31:0] newSel3_fu_138_p3;
wire   [31:0] newSel2_fu_130_p3;

assign ap_done = ap_start;

assign ap_idle = 1'b1;

assign ap_ready = ap_start;

assign ap_return = ((or_cond2_fu_146_p2[0:0] === 1'b1) ? newSel3_fu_138_p3 : newSel2_fu_130_p3);

assign newSel1_fu_116_p3 = ((sel_tmp4_fu_84_p2[0:0] === 1'b1) ? result_2_fu_54_p2 : result_3_fu_60_p2);

assign newSel2_fu_130_p3 = ((sel_tmp_fu_72_p2[0:0] === 1'b1) ? result_4_fu_66_p2 : 32'd0);

assign newSel3_fu_138_p3 = ((or_cond_fu_110_p2[0:0] === 1'b1) ? newSel_fu_102_p3 : newSel1_fu_116_p3);

assign newSel_fu_102_p3 = ((sel_tmp8_fu_96_p2[0:0] === 1'b1) ? result_fu_42_p2 : result_1_fu_48_p2);

assign or_cond1_fu_124_p2 = (sel_tmp4_fu_84_p2 | sel_tmp2_fu_78_p2);

assign or_cond2_fu_146_p2 = (or_cond_fu_110_p2 | or_cond1_fu_124_p2);

assign or_cond_fu_110_p2 = (sel_tmp8_fu_96_p2 | sel_tmp6_fu_90_p2);

assign result_1_fu_48_p2 = (inA - inB);

assign result_2_fu_54_p2 = (inB & inA);

assign result_3_fu_60_p2 = (inB | inA);

assign result_4_fu_66_p2 = (inB ^ inA);

assign result_fu_42_p2 = (inB + inA);

assign sel_tmp2_fu_78_p2 = ((op == 32'd3) ? 1'b1 : 1'b0);

assign sel_tmp4_fu_84_p2 = ((op == 32'd2) ? 1'b1 : 1'b0);

assign sel_tmp6_fu_90_p2 = ((op == 32'd1) ? 1'b1 : 1'b0);

assign sel_tmp8_fu_96_p2 = ((op == 32'd0) ? 1'b1 : 1'b0);

assign sel_tmp_fu_72_p2 = ((op == 32'd4) ? 1'b1 : 1'b0);

endmodule //ALU
