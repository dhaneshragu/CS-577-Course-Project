// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _ALU_HH_
#define _ALU_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct ALU : public sc_module {
    // Port declarations 8
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_in< sc_lv<32> > inA;
    sc_in< sc_lv<32> > inB;
    sc_in< sc_lv<32> > op;
    sc_out< sc_lv<32> > ap_return;
    // Port declarations for the virtual clock. 
    sc_in_clk ap_virtual_clock;


    // Module declarations
    ALU(sc_module_name name);
    SC_HAS_PROCESS(ALU);

    ~ALU();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<1> > sel_tmp8_fu_96_p2;
    sc_signal< sc_lv<32> > result_fu_42_p2;
    sc_signal< sc_lv<32> > result_1_fu_48_p2;
    sc_signal< sc_lv<1> > sel_tmp6_fu_90_p2;
    sc_signal< sc_lv<1> > sel_tmp4_fu_84_p2;
    sc_signal< sc_lv<32> > result_2_fu_54_p2;
    sc_signal< sc_lv<32> > result_3_fu_60_p2;
    sc_signal< sc_lv<1> > sel_tmp2_fu_78_p2;
    sc_signal< sc_lv<1> > sel_tmp_fu_72_p2;
    sc_signal< sc_lv<32> > result_4_fu_66_p2;
    sc_signal< sc_lv<1> > or_cond_fu_110_p2;
    sc_signal< sc_lv<32> > newSel_fu_102_p3;
    sc_signal< sc_lv<32> > newSel1_fu_116_p3;
    sc_signal< sc_lv<1> > or_cond1_fu_124_p2;
    sc_signal< sc_lv<1> > or_cond2_fu_146_p2;
    sc_signal< sc_lv<32> > newSel3_fu_138_p3;
    sc_signal< sc_lv<32> > newSel2_fu_130_p3;
    static const sc_logic ap_const_logic_1;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<32> ap_const_lv32_1;
    static const sc_lv<32> ap_const_lv32_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_logic ap_const_logic_0;
    static const bool ap_const_boolean_1;
    // Thread declarations
    void thread_ap_done();
    void thread_ap_idle();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_newSel1_fu_116_p3();
    void thread_newSel2_fu_130_p3();
    void thread_newSel3_fu_138_p3();
    void thread_newSel_fu_102_p3();
    void thread_or_cond1_fu_124_p2();
    void thread_or_cond2_fu_146_p2();
    void thread_or_cond_fu_110_p2();
    void thread_result_1_fu_48_p2();
    void thread_result_2_fu_54_p2();
    void thread_result_3_fu_60_p2();
    void thread_result_4_fu_66_p2();
    void thread_result_fu_42_p2();
    void thread_sel_tmp2_fu_78_p2();
    void thread_sel_tmp4_fu_84_p2();
    void thread_sel_tmp6_fu_90_p2();
    void thread_sel_tmp8_fu_96_p2();
    void thread_sel_tmp_fu_72_p2();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
