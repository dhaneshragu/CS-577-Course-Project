// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#ifndef _ALU_HH_
#define _ALU_HH_

#include "systemc.h"
#include "AESL_pkg.h"


namespace ap_rtl {

struct ALU : public sc_module {
    // Port declarations 14
    sc_in_clk ap_clk;
    sc_in< sc_logic > ap_rst;
    sc_in< sc_logic > ap_start;
    sc_out< sc_logic > ap_done;
    sc_out< sc_logic > ap_idle;
    sc_out< sc_logic > ap_ready;
    sc_out< sc_lv<10> > inA_address0;
    sc_out< sc_logic > inA_ce0;
    sc_in< sc_lv<32> > inA_q0;
    sc_out< sc_lv<10> > inB_address0;
    sc_out< sc_logic > inB_ce0;
    sc_in< sc_lv<32> > inB_q0;
    sc_in< sc_lv<32> > op;
    sc_out< sc_lv<32> > ap_return;


    // Module declarations
    ALU(sc_module_name name);
    SC_HAS_PROCESS(ALU);

    ~ALU();

    sc_trace_file* mVcdFile;

    ofstream mHdltvinHandle;
    ofstream mHdltvoutHandle;
    sc_signal< sc_lv<3> > ap_CS_fsm;
    sc_signal< sc_logic > ap_CS_fsm_state1;
    sc_signal< sc_lv<32> > result_reg_144;
    sc_signal< sc_lv<10> > i_reg_156;
    sc_signal< sc_lv<32> > op_read_read_fu_48_p2;
    sc_signal< sc_lv<1> > exitcond_fu_188_p2;
    sc_signal< sc_lv<1> > exitcond_reg_269;
    sc_signal< sc_logic > ap_CS_fsm_pp0_stage0;
    sc_signal< bool > ap_block_state2_pp0_stage0_iter0;
    sc_signal< bool > ap_block_state3_pp0_stage0_iter1;
    sc_signal< bool > ap_block_pp0_stage0_11001;
    sc_signal< sc_lv<10> > i_1_fu_194_p2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter0;
    sc_signal< bool > ap_block_pp0_stage0_subdone;
    sc_signal< sc_logic > ap_condition_pp0_exit_iter0_state2;
    sc_signal< sc_logic > ap_enable_reg_pp0_iter1;
    sc_signal< sc_lv<32> > ap_phi_mux_result_1_phi_fu_172_p12;
    sc_signal< bool > ap_block_pp0_stage0;
    sc_signal< sc_lv<32> > result_6_fu_230_p2;
    sc_signal< sc_lv<32> > ap_phi_reg_pp0_iter1_result_1_reg_167;
    sc_signal< sc_lv<32> > result_5_fu_237_p2;
    sc_signal< sc_lv<32> > result_4_fu_244_p2;
    sc_signal< sc_lv<32> > result_3_fu_251_p2;
    sc_signal< sc_lv<32> > result_2_fu_258_p2;
    sc_signal< sc_lv<32> > ap_phi_reg_pp0_iter0_result_1_reg_167;
    sc_signal< sc_lv<64> > tmp_8_fu_200_p1;
    sc_signal< sc_lv<64> > tmp_6_fu_206_p1;
    sc_signal< sc_lv<64> > tmp_4_fu_212_p1;
    sc_signal< sc_lv<64> > tmp_2_fu_218_p1;
    sc_signal< sc_lv<64> > tmp_fu_224_p1;
    sc_signal< sc_logic > ap_CS_fsm_state4;
    sc_signal< sc_lv<3> > ap_NS_fsm;
    sc_signal< sc_logic > ap_idle_pp0;
    sc_signal< sc_logic > ap_enable_pp0;
    sc_signal< bool > ap_condition_130;
    sc_signal< bool > ap_condition_165;
    sc_signal< bool > ap_condition_66;
    sc_signal< bool > ap_condition_255;
    static const sc_logic ap_const_logic_1;
    static const sc_logic ap_const_logic_0;
    static const sc_lv<3> ap_ST_fsm_state1;
    static const sc_lv<3> ap_ST_fsm_pp0_stage0;
    static const sc_lv<3> ap_ST_fsm_state4;
    static const sc_lv<32> ap_const_lv32_0;
    static const bool ap_const_boolean_1;
    static const sc_lv<32> ap_const_lv32_1;
    static const bool ap_const_boolean_0;
    static const sc_lv<1> ap_const_lv1_0;
    static const sc_lv<32> ap_const_lv32_4;
    static const sc_lv<32> ap_const_lv32_3;
    static const sc_lv<32> ap_const_lv32_2;
    static const sc_lv<1> ap_const_lv1_1;
    static const sc_lv<10> ap_const_lv10_0;
    static const sc_lv<10> ap_const_lv10_3E8;
    static const sc_lv<10> ap_const_lv10_1;
    // Thread declarations
    void thread_ap_clk_no_reset_();
    void thread_ap_CS_fsm_pp0_stage0();
    void thread_ap_CS_fsm_state1();
    void thread_ap_CS_fsm_state4();
    void thread_ap_block_pp0_stage0();
    void thread_ap_block_pp0_stage0_11001();
    void thread_ap_block_pp0_stage0_subdone();
    void thread_ap_block_state2_pp0_stage0_iter0();
    void thread_ap_block_state3_pp0_stage0_iter1();
    void thread_ap_condition_130();
    void thread_ap_condition_165();
    void thread_ap_condition_255();
    void thread_ap_condition_66();
    void thread_ap_condition_pp0_exit_iter0_state2();
    void thread_ap_done();
    void thread_ap_enable_pp0();
    void thread_ap_idle();
    void thread_ap_idle_pp0();
    void thread_ap_phi_mux_result_1_phi_fu_172_p12();
    void thread_ap_phi_reg_pp0_iter0_result_1_reg_167();
    void thread_ap_ready();
    void thread_ap_return();
    void thread_exitcond_fu_188_p2();
    void thread_i_1_fu_194_p2();
    void thread_inA_address0();
    void thread_inA_ce0();
    void thread_inB_address0();
    void thread_inB_ce0();
    void thread_op_read_read_fu_48_p2();
    void thread_result_2_fu_258_p2();
    void thread_result_3_fu_251_p2();
    void thread_result_4_fu_244_p2();
    void thread_result_5_fu_237_p2();
    void thread_result_6_fu_230_p2();
    void thread_tmp_2_fu_218_p1();
    void thread_tmp_4_fu_212_p1();
    void thread_tmp_6_fu_206_p1();
    void thread_tmp_8_fu_200_p1();
    void thread_tmp_fu_224_p1();
    void thread_ap_NS_fsm();
    void thread_hdltv_gen();
};

}

using namespace ap_rtl;

#endif
