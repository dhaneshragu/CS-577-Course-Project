// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

#include "ALU.h"
#include "AESL_pkg.h"

using namespace std;

namespace ap_rtl {

const sc_logic ALU::ap_const_logic_1 = sc_dt::Log_1;
const sc_lv<32> ALU::ap_const_lv32_4 = "100";
const sc_lv<32> ALU::ap_const_lv32_3 = "11";
const sc_lv<32> ALU::ap_const_lv32_2 = "10";
const sc_lv<32> ALU::ap_const_lv32_1 = "1";
const sc_lv<32> ALU::ap_const_lv32_0 = "00000000000000000000000000000000";
const sc_lv<1> ALU::ap_const_lv1_0 = "0";
const sc_logic ALU::ap_const_logic_0 = sc_dt::Log_0;
const bool ALU::ap_const_boolean_1 = true;

ALU::ALU(sc_module_name name) : sc_module(name), mVcdFile(0) {

    SC_METHOD(thread_ap_done);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_idle);

    SC_METHOD(thread_ap_ready);
    sensitive << ( ap_start );

    SC_METHOD(thread_ap_return);
    sensitive << ( ap_start );
    sensitive << ( or_cond2_fu_146_p2 );
    sensitive << ( newSel3_fu_138_p3 );
    sensitive << ( newSel2_fu_130_p3 );

    SC_METHOD(thread_newSel1_fu_116_p3);
    sensitive << ( sel_tmp4_fu_84_p2 );
    sensitive << ( result_2_fu_54_p2 );
    sensitive << ( result_3_fu_60_p2 );

    SC_METHOD(thread_newSel2_fu_130_p3);
    sensitive << ( sel_tmp_fu_72_p2 );
    sensitive << ( result_4_fu_66_p2 );

    SC_METHOD(thread_newSel3_fu_138_p3);
    sensitive << ( or_cond_fu_110_p2 );
    sensitive << ( newSel_fu_102_p3 );
    sensitive << ( newSel1_fu_116_p3 );

    SC_METHOD(thread_newSel_fu_102_p3);
    sensitive << ( sel_tmp8_fu_96_p2 );
    sensitive << ( result_fu_42_p2 );
    sensitive << ( result_1_fu_48_p2 );

    SC_METHOD(thread_or_cond1_fu_124_p2);
    sensitive << ( sel_tmp4_fu_84_p2 );
    sensitive << ( sel_tmp2_fu_78_p2 );

    SC_METHOD(thread_or_cond2_fu_146_p2);
    sensitive << ( or_cond_fu_110_p2 );
    sensitive << ( or_cond1_fu_124_p2 );

    SC_METHOD(thread_or_cond_fu_110_p2);
    sensitive << ( sel_tmp8_fu_96_p2 );
    sensitive << ( sel_tmp6_fu_90_p2 );

    SC_METHOD(thread_result_1_fu_48_p2);
    sensitive << ( inA );
    sensitive << ( inB );

    SC_METHOD(thread_result_2_fu_54_p2);
    sensitive << ( inA );
    sensitive << ( inB );

    SC_METHOD(thread_result_3_fu_60_p2);
    sensitive << ( inA );
    sensitive << ( inB );

    SC_METHOD(thread_result_4_fu_66_p2);
    sensitive << ( inA );
    sensitive << ( inB );

    SC_METHOD(thread_result_fu_42_p2);
    sensitive << ( inA );
    sensitive << ( inB );

    SC_METHOD(thread_sel_tmp2_fu_78_p2);
    sensitive << ( ap_start );
    sensitive << ( op );

    SC_METHOD(thread_sel_tmp4_fu_84_p2);
    sensitive << ( ap_start );
    sensitive << ( op );

    SC_METHOD(thread_sel_tmp6_fu_90_p2);
    sensitive << ( ap_start );
    sensitive << ( op );

    SC_METHOD(thread_sel_tmp8_fu_96_p2);
    sensitive << ( ap_start );
    sensitive << ( op );

    SC_METHOD(thread_sel_tmp_fu_72_p2);
    sensitive << ( ap_start );
    sensitive << ( op );
    sensitive << ( or_cond2_fu_146_p2 );

    SC_THREAD(thread_hdltv_gen);
    sensitive << ( ap_virtual_clock.pos() );

    static int apTFileNum = 0;
    stringstream apTFilenSS;
    apTFilenSS << "ALU_sc_trace_" << apTFileNum ++;
    string apTFn = apTFilenSS.str();
    mVcdFile = sc_create_vcd_trace_file(apTFn.c_str());
    mVcdFile->set_time_unit(1, SC_PS);
    if (1) {
#ifdef __HLS_TRACE_LEVEL_PORT__
    sc_trace(mVcdFile, ap_start, "(port)ap_start");
    sc_trace(mVcdFile, ap_done, "(port)ap_done");
    sc_trace(mVcdFile, ap_idle, "(port)ap_idle");
    sc_trace(mVcdFile, ap_ready, "(port)ap_ready");
    sc_trace(mVcdFile, inA, "(port)inA");
    sc_trace(mVcdFile, inB, "(port)inB");
    sc_trace(mVcdFile, op, "(port)op");
    sc_trace(mVcdFile, ap_return, "(port)ap_return");
#endif
#ifdef __HLS_TRACE_LEVEL_INT__
    sc_trace(mVcdFile, sel_tmp8_fu_96_p2, "sel_tmp8_fu_96_p2");
    sc_trace(mVcdFile, result_fu_42_p2, "result_fu_42_p2");
    sc_trace(mVcdFile, result_1_fu_48_p2, "result_1_fu_48_p2");
    sc_trace(mVcdFile, sel_tmp6_fu_90_p2, "sel_tmp6_fu_90_p2");
    sc_trace(mVcdFile, sel_tmp4_fu_84_p2, "sel_tmp4_fu_84_p2");
    sc_trace(mVcdFile, result_2_fu_54_p2, "result_2_fu_54_p2");
    sc_trace(mVcdFile, result_3_fu_60_p2, "result_3_fu_60_p2");
    sc_trace(mVcdFile, sel_tmp2_fu_78_p2, "sel_tmp2_fu_78_p2");
    sc_trace(mVcdFile, sel_tmp_fu_72_p2, "sel_tmp_fu_72_p2");
    sc_trace(mVcdFile, result_4_fu_66_p2, "result_4_fu_66_p2");
    sc_trace(mVcdFile, or_cond_fu_110_p2, "or_cond_fu_110_p2");
    sc_trace(mVcdFile, newSel_fu_102_p3, "newSel_fu_102_p3");
    sc_trace(mVcdFile, newSel1_fu_116_p3, "newSel1_fu_116_p3");
    sc_trace(mVcdFile, or_cond1_fu_124_p2, "or_cond1_fu_124_p2");
    sc_trace(mVcdFile, or_cond2_fu_146_p2, "or_cond2_fu_146_p2");
    sc_trace(mVcdFile, newSel3_fu_138_p3, "newSel3_fu_138_p3");
    sc_trace(mVcdFile, newSel2_fu_130_p3, "newSel2_fu_130_p3");
#endif

    }
    mHdltvinHandle.open("ALU.hdltvin.dat");
    mHdltvoutHandle.open("ALU.hdltvout.dat");
}

ALU::~ALU() {
    if (mVcdFile) 
        sc_close_vcd_trace_file(mVcdFile);

    mHdltvinHandle << "] " << endl;
    mHdltvoutHandle << "] " << endl;
    mHdltvinHandle.close();
    mHdltvoutHandle.close();
}

void ALU::thread_ap_done() {
    ap_done = ap_start.read();
}

void ALU::thread_ap_idle() {
    ap_idle = ap_const_logic_1;
}

void ALU::thread_ap_ready() {
    ap_ready = ap_start.read();
}

void ALU::thread_ap_return() {
    ap_return = (!or_cond2_fu_146_p2.read()[0].is_01())? sc_lv<32>(): ((or_cond2_fu_146_p2.read()[0].to_bool())? newSel3_fu_138_p3.read(): newSel2_fu_130_p3.read());
}

void ALU::thread_newSel1_fu_116_p3() {
    newSel1_fu_116_p3 = (!sel_tmp4_fu_84_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp4_fu_84_p2.read()[0].to_bool())? result_2_fu_54_p2.read(): result_3_fu_60_p2.read());
}

void ALU::thread_newSel2_fu_130_p3() {
    newSel2_fu_130_p3 = (!sel_tmp_fu_72_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp_fu_72_p2.read()[0].to_bool())? result_4_fu_66_p2.read(): ap_const_lv32_0);
}

void ALU::thread_newSel3_fu_138_p3() {
    newSel3_fu_138_p3 = (!or_cond_fu_110_p2.read()[0].is_01())? sc_lv<32>(): ((or_cond_fu_110_p2.read()[0].to_bool())? newSel_fu_102_p3.read(): newSel1_fu_116_p3.read());
}

void ALU::thread_newSel_fu_102_p3() {
    newSel_fu_102_p3 = (!sel_tmp8_fu_96_p2.read()[0].is_01())? sc_lv<32>(): ((sel_tmp8_fu_96_p2.read()[0].to_bool())? result_fu_42_p2.read(): result_1_fu_48_p2.read());
}

void ALU::thread_or_cond1_fu_124_p2() {
    or_cond1_fu_124_p2 = (sel_tmp4_fu_84_p2.read() | sel_tmp2_fu_78_p2.read());
}

void ALU::thread_or_cond2_fu_146_p2() {
    or_cond2_fu_146_p2 = (or_cond_fu_110_p2.read() | or_cond1_fu_124_p2.read());
}

void ALU::thread_or_cond_fu_110_p2() {
    or_cond_fu_110_p2 = (sel_tmp8_fu_96_p2.read() | sel_tmp6_fu_90_p2.read());
}

void ALU::thread_result_1_fu_48_p2() {
    result_1_fu_48_p2 = (!inA.read().is_01() || !inB.read().is_01())? sc_lv<32>(): (sc_biguint<32>(inA.read()) - sc_biguint<32>(inB.read()));
}

void ALU::thread_result_2_fu_54_p2() {
    result_2_fu_54_p2 = (inB.read() & inA.read());
}

void ALU::thread_result_3_fu_60_p2() {
    result_3_fu_60_p2 = (inB.read() | inA.read());
}

void ALU::thread_result_4_fu_66_p2() {
    result_4_fu_66_p2 = (inB.read() ^ inA.read());
}

void ALU::thread_result_fu_42_p2() {
    result_fu_42_p2 = (!inB.read().is_01() || !inA.read().is_01())? sc_lv<32>(): (sc_biguint<32>(inB.read()) + sc_biguint<32>(inA.read()));
}

void ALU::thread_sel_tmp2_fu_78_p2() {
    sel_tmp2_fu_78_p2 = (!op.read().is_01() || !ap_const_lv32_3.is_01())? sc_lv<1>(): sc_lv<1>(op.read() == ap_const_lv32_3);
}

void ALU::thread_sel_tmp4_fu_84_p2() {
    sel_tmp4_fu_84_p2 = (!op.read().is_01() || !ap_const_lv32_2.is_01())? sc_lv<1>(): sc_lv<1>(op.read() == ap_const_lv32_2);
}

void ALU::thread_sel_tmp6_fu_90_p2() {
    sel_tmp6_fu_90_p2 = (!op.read().is_01() || !ap_const_lv32_1.is_01())? sc_lv<1>(): sc_lv<1>(op.read() == ap_const_lv32_1);
}

void ALU::thread_sel_tmp8_fu_96_p2() {
    sel_tmp8_fu_96_p2 = (!op.read().is_01() || !ap_const_lv32_0.is_01())? sc_lv<1>(): sc_lv<1>(op.read() == ap_const_lv32_0);
}

void ALU::thread_sel_tmp_fu_72_p2() {
    sel_tmp_fu_72_p2 = (!op.read().is_01() || !ap_const_lv32_4.is_01())? sc_lv<1>(): sc_lv<1>(op.read() == ap_const_lv32_4);
}

void ALU::thread_hdltv_gen() {
    const char* dump_tv = std::getenv("AP_WRITE_TV");
    if (!(dump_tv && string(dump_tv) == "on")) return;

    wait();

    mHdltvinHandle << "[ " << endl;
    mHdltvoutHandle << "[ " << endl;
    int ap_cycleNo = 0;
    while (1) {
        wait();
        const char* mComma = ap_cycleNo == 0 ? " " : ", " ;
        mHdltvinHandle << mComma << "{"  <<  " \"ap_start\" :  \"" << ap_start.read() << "\" ";
        mHdltvoutHandle << mComma << "{"  <<  " \"ap_done\" :  \"" << ap_done.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_idle\" :  \"" << ap_idle.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_ready\" :  \"" << ap_ready.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inA\" :  \"" << inA.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"inB\" :  \"" << inB.read() << "\" ";
        mHdltvinHandle << " , " <<  " \"op\" :  \"" << op.read() << "\" ";
        mHdltvoutHandle << " , " <<  " \"ap_return\" :  \"" << ap_return.read() << "\" ";
        mHdltvinHandle << "}" << std::endl;
        mHdltvoutHandle << "}" << std::endl;
        ap_cycleNo++;
    }
}

}

