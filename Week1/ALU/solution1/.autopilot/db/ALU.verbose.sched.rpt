

================================================================
== Vivado HLS Report for 'ALU'
================================================================
* Date:           Tue Mar 19 19:49:24 2024

* Version:        2018.2 (Build 2258646 on Thu Jun 14 20:25:20 MDT 2018)
* Project:        ALU
* Solution:       solution1
* Product family: aartix7
* Target device:  xa7a12tcsg325-1q


================================================================
== Performance Estimates
================================================================
+ Timing (ns): 
    * Summary: 
    +--------+-------+----------+------------+
    |  Clock | Target| Estimated| Uncertainty|
    +--------+-------+----------+------------+
    |ap_clk  |  10.00|     7.802|        1.25|
    +--------+-------+----------+------------+

+ Latency (clock cycles): 
    * Summary: 
    +------+------+------+------+---------+
    |   Latency   |   Interval  | Pipeline|
    |  min |  max |  min |  max |   Type  |
    +------+------+------+------+---------+
    |  1002|  1002|  1002|  1002|   none  |
    +------+------+------+------+---------+

    + Detail: 
        * Instance: 
        N/A

        * Loop: 
        +----------+------+------+----------+-----------+-----------+------+----------+
        |          |   Latency   | Iteration|  Initiation Interval  | Trip |          |
        | Loop Name|  min |  max |  Latency |  achieved |   target  | Count| Pipelined|
        +----------+------+------+----------+-----------+-----------+------+----------+
        |- Loop 1  |  1000|  1000|         2|          1|          1|  1000|    yes   |
        +----------+------+------+----------+-----------+-----------+------+----------+

============================================================
+ Verbose Summary: Synthesis Manager
============================================================
InlineROM: 1
ExposeGlobal: 0
============================================================
+ Verbose Summary: CDFG Model
============================================================
IsTopModel: 1
ResetActiveHigh: 1
IsCombinational: 0
IsDatapathOnly: 0
HasWiredReturn: 1
HasMFsm: 0
HasVarLatency: 1
IsPipeline: 0
IsRtlPipelined: 0
IsInstanceOverlapped: 0
IsDontTouch: 0
HasImplIP: 0
IsGatedGlobalClock: 0

+ Individual pipeline summary: 
  * Pipeline-0: initiation interval (II) = 1, depth = 2


============================================================
+ Verbose Summary: Schedule
============================================================
* Number of FSM states : 4
* Pipeline : 1
  Pipeline-0 : II = 1, D = 2, States = { 2 3 }
* Dataflow Pipeline: 0

* FSM state transitions: 
1 --> 
	2  / true
2 --> 
	4  / (exitcond)
	3  / (!exitcond)
3 --> 
	2  / true
4 --> 

* FSM state operations: 

State 1 <SV = 0> <Delay = 1.66>
ST_1 : Operation 5 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([1000 x i32]* %inA) nounwind, !map !14"   --->   Operation 5 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 6 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap([1000 x i32]* %inB) nounwind, !map !20"   --->   Operation 6 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 7 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32 %op) nounwind, !map !24"   --->   Operation 7 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 8 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecBitsMap(i32 0) nounwind, !map !30"   --->   Operation 8 'specbitsmap' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 9 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecTopModule([4 x i8]* @ALU_str) nounwind"   --->   Operation 9 'spectopmodule' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 10 [1/1] (0.00ns)   --->   "%op_read = call i32 @_ssdm_op_Read.ap_auto.i32(i32 %op) nounwind"   --->   Operation 10 'read' 'op_read' <Predicate = true> <Delay = 0.00>
ST_1 : Operation 11 [1/1] (1.66ns)   --->   "br label %1" [ALU/alu.cpp:39]   --->   Operation 11 'br' <Predicate = true> <Delay = 1.66>

State 2 <SV = 1> <Delay = 3.25>
ST_2 : Operation 12 [1/1] (0.00ns)   --->   "%result = phi i32 [ undef, %0 ], [ %result_1, %8 ]" [ALU/alu.cpp:56]   --->   Operation 12 'phi' 'result' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 13 [1/1] (0.00ns)   --->   "%i = phi i10 [ 0, %0 ], [ %i_1, %8 ]"   --->   Operation 13 'phi' 'i' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 14 [1/1] (1.70ns)   --->   "%exitcond = icmp eq i10 %i, -24" [ALU/alu.cpp:39]   --->   Operation 14 'icmp' 'exitcond' <Predicate = true> <Delay = 1.70> <Core = "Cmp">   --->   Core 25 'Cmp' <Latency = 0> <II = 1> <Delay = 1.70> <FuncUnit> <Opcode : 'icmp'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 15 [1/1] (0.00ns)   --->   "%empty = call i32 (...)* @_ssdm_op_SpecLoopTripCount(i64 1000, i64 1000, i64 1000) nounwind"   --->   Operation 15 'speclooptripcount' 'empty' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 16 [1/1] (2.12ns)   --->   "%i_1 = add i10 %i, 1" [ALU/alu.cpp:39]   --->   Operation 16 'add' 'i_1' <Predicate = true> <Delay = 2.12> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.70> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_2 : Operation 17 [1/1] (0.00ns)   --->   "br i1 %exitcond, label %9, label %2" [ALU/alu.cpp:39]   --->   Operation 17 'br' <Predicate = true> <Delay = 0.00>
ST_2 : Operation 18 [1/1] (1.84ns)   --->   "switch i32 %op_read, label %8 [
    i32 0, label %3
    i32 1, label %4
    i32 2, label %5
    i32 3, label %6
    i32 4, label %7
  ]" [ALU/alu.cpp:42]   --->   Operation 18 'switch' <Predicate = (!exitcond)> <Delay = 1.84>
ST_2 : Operation 19 [1/1] (0.00ns)   --->   "%tmp_8 = zext i10 %i to i64" [ALU/alu.cpp:56]   --->   Operation 19 'zext' 'tmp_8' <Predicate = (!exitcond & op_read == 4)> <Delay = 0.00>
ST_2 : Operation 20 [1/1] (0.00ns)   --->   "%inA_addr_4 = getelementptr [1000 x i32]* %inA, i64 0, i64 %tmp_8" [ALU/alu.cpp:56]   --->   Operation 20 'getelementptr' 'inA_addr_4' <Predicate = (!exitcond & op_read == 4)> <Delay = 0.00>
ST_2 : Operation 21 [2/2] (3.25ns)   --->   "%inA_load_4 = load i32* %inA_addr_4, align 4" [ALU/alu.cpp:56]   --->   Operation 21 'load' 'inA_load_4' <Predicate = (!exitcond & op_read == 4)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1000> <RAM>
ST_2 : Operation 22 [1/1] (0.00ns)   --->   "%inB_addr_4 = getelementptr [1000 x i32]* %inB, i64 0, i64 %tmp_8" [ALU/alu.cpp:56]   --->   Operation 22 'getelementptr' 'inB_addr_4' <Predicate = (!exitcond & op_read == 4)> <Delay = 0.00>
ST_2 : Operation 23 [2/2] (3.25ns)   --->   "%inB_load_4 = load i32* %inB_addr_4, align 4" [ALU/alu.cpp:56]   --->   Operation 23 'load' 'inB_load_4' <Predicate = (!exitcond & op_read == 4)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1000> <RAM>
ST_2 : Operation 24 [1/1] (0.00ns)   --->   "%tmp_6 = zext i10 %i to i64" [ALU/alu.cpp:53]   --->   Operation 24 'zext' 'tmp_6' <Predicate = (!exitcond & op_read == 3)> <Delay = 0.00>
ST_2 : Operation 25 [1/1] (0.00ns)   --->   "%inA_addr_3 = getelementptr [1000 x i32]* %inA, i64 0, i64 %tmp_6" [ALU/alu.cpp:53]   --->   Operation 25 'getelementptr' 'inA_addr_3' <Predicate = (!exitcond & op_read == 3)> <Delay = 0.00>
ST_2 : Operation 26 [2/2] (3.25ns)   --->   "%inA_load_3 = load i32* %inA_addr_3, align 4" [ALU/alu.cpp:53]   --->   Operation 26 'load' 'inA_load_3' <Predicate = (!exitcond & op_read == 3)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1000> <RAM>
ST_2 : Operation 27 [1/1] (0.00ns)   --->   "%inB_addr_3 = getelementptr [1000 x i32]* %inB, i64 0, i64 %tmp_6" [ALU/alu.cpp:53]   --->   Operation 27 'getelementptr' 'inB_addr_3' <Predicate = (!exitcond & op_read == 3)> <Delay = 0.00>
ST_2 : Operation 28 [2/2] (3.25ns)   --->   "%inB_load_3 = load i32* %inB_addr_3, align 4" [ALU/alu.cpp:53]   --->   Operation 28 'load' 'inB_load_3' <Predicate = (!exitcond & op_read == 3)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1000> <RAM>
ST_2 : Operation 29 [1/1] (0.00ns)   --->   "%tmp_4 = zext i10 %i to i64" [ALU/alu.cpp:50]   --->   Operation 29 'zext' 'tmp_4' <Predicate = (!exitcond & op_read == 2)> <Delay = 0.00>
ST_2 : Operation 30 [1/1] (0.00ns)   --->   "%inA_addr_2 = getelementptr [1000 x i32]* %inA, i64 0, i64 %tmp_4" [ALU/alu.cpp:50]   --->   Operation 30 'getelementptr' 'inA_addr_2' <Predicate = (!exitcond & op_read == 2)> <Delay = 0.00>
ST_2 : Operation 31 [2/2] (3.25ns)   --->   "%inA_load_2 = load i32* %inA_addr_2, align 4" [ALU/alu.cpp:50]   --->   Operation 31 'load' 'inA_load_2' <Predicate = (!exitcond & op_read == 2)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1000> <RAM>
ST_2 : Operation 32 [1/1] (0.00ns)   --->   "%inB_addr_2 = getelementptr [1000 x i32]* %inB, i64 0, i64 %tmp_4" [ALU/alu.cpp:50]   --->   Operation 32 'getelementptr' 'inB_addr_2' <Predicate = (!exitcond & op_read == 2)> <Delay = 0.00>
ST_2 : Operation 33 [2/2] (3.25ns)   --->   "%inB_load_2 = load i32* %inB_addr_2, align 4" [ALU/alu.cpp:50]   --->   Operation 33 'load' 'inB_load_2' <Predicate = (!exitcond & op_read == 2)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1000> <RAM>
ST_2 : Operation 34 [1/1] (0.00ns)   --->   "%tmp_2 = zext i10 %i to i64" [ALU/alu.cpp:47]   --->   Operation 34 'zext' 'tmp_2' <Predicate = (!exitcond & op_read == 1)> <Delay = 0.00>
ST_2 : Operation 35 [1/1] (0.00ns)   --->   "%inA_addr_1 = getelementptr [1000 x i32]* %inA, i64 0, i64 %tmp_2" [ALU/alu.cpp:47]   --->   Operation 35 'getelementptr' 'inA_addr_1' <Predicate = (!exitcond & op_read == 1)> <Delay = 0.00>
ST_2 : Operation 36 [2/2] (3.25ns)   --->   "%inA_load_1 = load i32* %inA_addr_1, align 4" [ALU/alu.cpp:47]   --->   Operation 36 'load' 'inA_load_1' <Predicate = (!exitcond & op_read == 1)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1000> <RAM>
ST_2 : Operation 37 [1/1] (0.00ns)   --->   "%inB_addr_1 = getelementptr [1000 x i32]* %inB, i64 0, i64 %tmp_2" [ALU/alu.cpp:47]   --->   Operation 37 'getelementptr' 'inB_addr_1' <Predicate = (!exitcond & op_read == 1)> <Delay = 0.00>
ST_2 : Operation 38 [2/2] (3.25ns)   --->   "%inB_load_1 = load i32* %inB_addr_1, align 4" [ALU/alu.cpp:47]   --->   Operation 38 'load' 'inB_load_1' <Predicate = (!exitcond & op_read == 1)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1000> <RAM>
ST_2 : Operation 39 [1/1] (0.00ns)   --->   "%tmp = zext i10 %i to i64" [ALU/alu.cpp:44]   --->   Operation 39 'zext' 'tmp' <Predicate = (!exitcond & op_read == 0)> <Delay = 0.00>
ST_2 : Operation 40 [1/1] (0.00ns)   --->   "%inA_addr = getelementptr [1000 x i32]* %inA, i64 0, i64 %tmp" [ALU/alu.cpp:44]   --->   Operation 40 'getelementptr' 'inA_addr' <Predicate = (!exitcond & op_read == 0)> <Delay = 0.00>
ST_2 : Operation 41 [2/2] (3.25ns)   --->   "%inA_load = load i32* %inA_addr, align 4" [ALU/alu.cpp:44]   --->   Operation 41 'load' 'inA_load' <Predicate = (!exitcond & op_read == 0)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1000> <RAM>
ST_2 : Operation 42 [1/1] (0.00ns)   --->   "%inB_addr = getelementptr [1000 x i32]* %inB, i64 0, i64 %tmp" [ALU/alu.cpp:44]   --->   Operation 42 'getelementptr' 'inB_addr' <Predicate = (!exitcond & op_read == 0)> <Delay = 0.00>
ST_2 : Operation 43 [2/2] (3.25ns)   --->   "%inB_load = load i32* %inB_addr, align 4" [ALU/alu.cpp:44]   --->   Operation 43 'load' 'inB_load' <Predicate = (!exitcond & op_read == 0)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1000> <RAM>

State 3 <SV = 2> <Delay = 7.80>
ST_3 : Operation 44 [1/1] (0.00ns)   --->   "%tmp_1 = call i32 (...)* @_ssdm_op_SpecRegionBegin([12 x i8]* @p_str) nounwind" [ALU/alu.cpp:40]   --->   Operation 44 'specregionbegin' 'tmp_1' <Predicate = (!exitcond)> <Delay = 0.00>
ST_3 : Operation 45 [1/1] (0.00ns)   --->   "call void (...)* @_ssdm_op_SpecPipeline(i32 1, i32 1, i32 1, i32 0, [1 x i8]* @p_str1) nounwind" [ALU/alu.cpp:41]   --->   Operation 45 'specpipeline' <Predicate = (!exitcond)> <Delay = 0.00>
ST_3 : Operation 46 [1/2] (3.25ns)   --->   "%inA_load_4 = load i32* %inA_addr_4, align 4" [ALU/alu.cpp:56]   --->   Operation 46 'load' 'inA_load_4' <Predicate = (!exitcond & op_read == 4)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1000> <RAM>
ST_3 : Operation 47 [1/2] (3.25ns)   --->   "%inB_load_4 = load i32* %inB_addr_4, align 4" [ALU/alu.cpp:56]   --->   Operation 47 'load' 'inB_load_4' <Predicate = (!exitcond & op_read == 4)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1000> <RAM>
ST_3 : Operation 48 [1/1] (1.26ns)   --->   "%result_6 = xor i32 %inB_load_4, %inA_load_4" [ALU/alu.cpp:56]   --->   Operation 48 'xor' 'result_6' <Predicate = (!exitcond & op_read == 4)> <Delay = 1.26> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.26> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 49 [1/1] (1.84ns)   --->   "br label %8" [ALU/alu.cpp:57]   --->   Operation 49 'br' <Predicate = (!exitcond & op_read == 4)> <Delay = 1.84>
ST_3 : Operation 50 [1/2] (3.25ns)   --->   "%inA_load_3 = load i32* %inA_addr_3, align 4" [ALU/alu.cpp:53]   --->   Operation 50 'load' 'inA_load_3' <Predicate = (!exitcond & op_read == 3)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1000> <RAM>
ST_3 : Operation 51 [1/2] (3.25ns)   --->   "%inB_load_3 = load i32* %inB_addr_3, align 4" [ALU/alu.cpp:53]   --->   Operation 51 'load' 'inB_load_3' <Predicate = (!exitcond & op_read == 3)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1000> <RAM>
ST_3 : Operation 52 [1/1] (1.26ns)   --->   "%result_5 = or i32 %inB_load_3, %inA_load_3" [ALU/alu.cpp:53]   --->   Operation 52 'or' 'result_5' <Predicate = (!exitcond & op_read == 3)> <Delay = 1.26> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.26> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 53 [1/1] (1.84ns)   --->   "br label %8" [ALU/alu.cpp:54]   --->   Operation 53 'br' <Predicate = (!exitcond & op_read == 3)> <Delay = 1.84>
ST_3 : Operation 54 [1/2] (3.25ns)   --->   "%inA_load_2 = load i32* %inA_addr_2, align 4" [ALU/alu.cpp:50]   --->   Operation 54 'load' 'inA_load_2' <Predicate = (!exitcond & op_read == 2)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1000> <RAM>
ST_3 : Operation 55 [1/2] (3.25ns)   --->   "%inB_load_2 = load i32* %inB_addr_2, align 4" [ALU/alu.cpp:50]   --->   Operation 55 'load' 'inB_load_2' <Predicate = (!exitcond & op_read == 2)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1000> <RAM>
ST_3 : Operation 56 [1/1] (1.26ns)   --->   "%result_4 = and i32 %inB_load_2, %inA_load_2" [ALU/alu.cpp:50]   --->   Operation 56 'and' 'result_4' <Predicate = (!exitcond & op_read == 2)> <Delay = 1.26> <Core = "LogicGate">   --->   Core 27 'LogicGate' <Latency = 0> <II = 1> <Delay = 1.26> <FuncUnit> <Opcode : 'and' 'or' 'xor'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 57 [1/1] (1.84ns)   --->   "br label %8" [ALU/alu.cpp:51]   --->   Operation 57 'br' <Predicate = (!exitcond & op_read == 2)> <Delay = 1.84>
ST_3 : Operation 58 [1/2] (3.25ns)   --->   "%inA_load_1 = load i32* %inA_addr_1, align 4" [ALU/alu.cpp:47]   --->   Operation 58 'load' 'inA_load_1' <Predicate = (!exitcond & op_read == 1)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1000> <RAM>
ST_3 : Operation 59 [1/2] (3.25ns)   --->   "%inB_load_1 = load i32* %inB_addr_1, align 4" [ALU/alu.cpp:47]   --->   Operation 59 'load' 'inB_load_1' <Predicate = (!exitcond & op_read == 1)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1000> <RAM>
ST_3 : Operation 60 [1/1] (2.70ns)   --->   "%result_3 = sub nsw i32 %inA_load_1, %inB_load_1" [ALU/alu.cpp:47]   --->   Operation 60 'sub' 'result_3' <Predicate = (!exitcond & op_read == 1)> <Delay = 2.70> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.70> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 61 [1/1] (1.84ns)   --->   "br label %8" [ALU/alu.cpp:48]   --->   Operation 61 'br' <Predicate = (!exitcond & op_read == 1)> <Delay = 1.84>
ST_3 : Operation 62 [1/2] (3.25ns)   --->   "%inA_load = load i32* %inA_addr, align 4" [ALU/alu.cpp:44]   --->   Operation 62 'load' 'inA_load' <Predicate = (!exitcond & op_read == 0)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1000> <RAM>
ST_3 : Operation 63 [1/2] (3.25ns)   --->   "%inB_load = load i32* %inB_addr, align 4" [ALU/alu.cpp:44]   --->   Operation 63 'load' 'inB_load' <Predicate = (!exitcond & op_read == 0)> <Delay = 3.25> <Core = "RAM">   --->   Core 37 'RAM' <Latency = 1> <II = 1> <Delay = 3.25> <Storage> <Opcode : 'load' 'store'> <Ports = 2> <Width = 32> <Depth = 1000> <RAM>
ST_3 : Operation 64 [1/1] (2.70ns)   --->   "%result_2 = add nsw i32 %inA_load, %inB_load" [ALU/alu.cpp:44]   --->   Operation 64 'add' 'result_2' <Predicate = (!exitcond & op_read == 0)> <Delay = 2.70> <Core = "AddSub">   --->   Core 14 'AddSub' <Latency = 0> <II = 1> <Delay = 2.70> <FuncUnit> <Opcode : 'add' 'sub'> <InPorts = 2> <OutPorts = 1>
ST_3 : Operation 65 [1/1] (1.84ns)   --->   "br label %8" [ALU/alu.cpp:45]   --->   Operation 65 'br' <Predicate = (!exitcond & op_read == 0)> <Delay = 1.84>
ST_3 : Operation 66 [1/1] (0.00ns)   --->   "%result_1 = phi i32 [ %result_6, %7 ], [ %result_5, %6 ], [ %result_4, %5 ], [ %result_3, %4 ], [ %result_2, %3 ], [ 0, %2 ]"   --->   Operation 66 'phi' 'result_1' <Predicate = (!exitcond)> <Delay = 0.00>
ST_3 : Operation 67 [1/1] (0.00ns)   --->   "%empty_2 = call i32 (...)* @_ssdm_op_SpecRegionEnd([12 x i8]* @p_str, i32 %tmp_1) nounwind" [ALU/alu.cpp:63]   --->   Operation 67 'specregionend' 'empty_2' <Predicate = (!exitcond)> <Delay = 0.00>
ST_3 : Operation 68 [1/1] (0.00ns)   --->   "br label %1" [ALU/alu.cpp:39]   --->   Operation 68 'br' <Predicate = (!exitcond)> <Delay = 0.00>

State 4 <SV = 2> <Delay = 0.00>
ST_4 : Operation 69 [1/1] (0.00ns)   --->   "ret i32 %result" [ALU/alu.cpp:65]   --->   Operation 69 'ret' <Predicate = true> <Delay = 0.00>


============================================================
+ Verbose Summary: Timing violations
============================================================
Target clock period: 10ns, clock uncertainty: 1.25ns.

 <State 1>: 1.66ns
The critical path consists of the following:
	multiplexor before 'phi' operation ('result', ALU/alu.cpp:56) with incoming values : ('result', ALU/alu.cpp:56) ('result', ALU/alu.cpp:53) ('result', ALU/alu.cpp:50) ('result', ALU/alu.cpp:47) ('result', ALU/alu.cpp:44) [12]  (1.66 ns)

 <State 2>: 3.26ns
The critical path consists of the following:
	'phi' operation ('i') with incoming values : ('i', ALU/alu.cpp:39) [13]  (0 ns)
	'getelementptr' operation ('inA_addr_3', ALU/alu.cpp:53) [32]  (0 ns)
	'load' operation ('inA_load_3', ALU/alu.cpp:53) on array 'inA' [33]  (3.26 ns)

 <State 3>: 7.8ns
The critical path consists of the following:
	'load' operation ('inA_load_1', ALU/alu.cpp:47) on array 'inA' [49]  (3.26 ns)
	'sub' operation ('result', ALU/alu.cpp:47) [52]  (2.7 ns)
	multiplexor before 'phi' operation ('result') with incoming values : ('result', ALU/alu.cpp:56) ('result', ALU/alu.cpp:53) ('result', ALU/alu.cpp:50) ('result', ALU/alu.cpp:47) ('result', ALU/alu.cpp:44) [63]  (1.84 ns)
	'phi' operation ('result') with incoming values : ('result', ALU/alu.cpp:56) ('result', ALU/alu.cpp:53) ('result', ALU/alu.cpp:50) ('result', ALU/alu.cpp:47) ('result', ALU/alu.cpp:44) [63]  (0 ns)
	'phi' operation ('result', ALU/alu.cpp:56) with incoming values : ('result', ALU/alu.cpp:56) ('result', ALU/alu.cpp:53) ('result', ALU/alu.cpp:50) ('result', ALU/alu.cpp:47) ('result', ALU/alu.cpp:44) [12]  (0 ns)

 <State 4>: 0ns
The critical path consists of the following:


============================================================
+ Verbose Summary: Binding
============================================================
N/A
* FSMD analyzer results:
  - Output states:
 - Input state : 
  - Chain level:
	State 1
	State 2
	State 3
	State 4


============================================================
+ Verbose Summary: Datapath Resource usage 
============================================================
N/A
