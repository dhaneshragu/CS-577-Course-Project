# This script segment is generated automatically by AutoPilot

set id 157
set name face_classifier_cbll
set corename simcore_fexp
set op fexp
set stage_num 1
set max_latency -1
set registered_input 1
set impl_style full_dsp
set Futype4reduceCEFanout 1
set in0_width 32
set in0_signed 0
set in1_width 32
set in1_signed 0
set out_width 32
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_fexp] == "ap_gen_simcore_fexp"} {
eval "ap_gen_simcore_fexp { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    style ${impl_style} \
    Futype4reduceCEFanout ${Futype4reduceCEFanout} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    out_width ${out_width} \
}"
} else {
puts "@W \[IMPL-100\] Cannot find ap_gen_simcore_fexp, check your AutoPilot builtin lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
	::AP::rtl_comp_handler ${name}
}


set op fexp
set corename FExp
if {${::AESL::PGuard_autocg_gen} && (${::AESL::PGuard_autocg_fpip} || ${::AESL::PGuard_autocg_fpv6en} || ${::AESL::PGuard_autocg_hpen})} {
if {[info proc ::AESL_LIB_XILINX_FPV6::fpv6_gen] == "::AESL_LIB_XILINX_FPV6::fpv6_gen"} {
eval "::AESL_LIB_XILINX_FPV6::fpv6_gen { \
    id ${id} \
    name ${name} \
    corename ${corename} \
    op ${op} \
    reset_level 1 \
    sync_rst true \
    stage_num ${stage_num} \
    max_latency ${max_latency} \
    registered_input ${registered_input} \
    style ${impl_style} \
    Futype4reduceCEFanout ${Futype4reduceCEFanout} \
    in0_width ${in0_width} \
    in0_signed ${in0_signed} \
    in1_width ${in1_width} \
    in1_signed ${in1_signed} \
    out_width ${out_width} \
}"
} else {
puts "@W \[IMPL-101\] Cannot find ::AESL_LIB_XILINX_FPV6::fpv6_gen, check your platform lib"
}
}


# Memory (RAM/ROM)  definition:
set ID 159
set hasByteEnable 0
set MemName face_classifier_cwdI
set CoreName ap_simcore_mem
set PortList { 2 3 }
set DataWd 32
set AddrRange 300000
set AddrWd 19
set impl_style block
set TrueReset 0
set IsROM 0
set ROMData { }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.257
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 160
set hasByteEnable 0
set MemName face_classifier_cyd2
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 32
set AddrRange 100
set AddrWd 7
set TrueReset 0
set IsROM 1
set ROMData { "00110101101101011011111011010101" "10110111010100011010111001110001" "00110111011100100001110101011111" "10110110000001001011110000001010" "00110101110111111001001010111110" "10110110010001110000011100010011" "10110101010110011111110101011111" "10110111111011100000100111001011" "10110101101100011000000100010011" "00110111000000100001000011011011" "00110110111100111110010101101010" "10110111000110010100011011001011" "10110111001001110110110001001100" "10110110110000100001011101110010" "00110111101001110110100110010001" "10111000000001011011101010100110" "00110101110011001101001100110000" "00110101100100010110110000011011" "00110111001110100100100111001000" "00110111001011010001100010111100" "00110111010100101111010000010111" "10110111001100110101000001000100" "10110111000110011000111011111111" "00110111101100110010000011000100" "00110101010110101110011110000111" "10110111001000100110110010100100" "10110111100011001000101000110010" "00110110001111010001011111010001" "10110111100010100000101010011010" "10110110000111101110000100101101" "00110101011001101010000100010011" "10110110111011011010011011010001" "10110111011011010010100000100110" "10110111001001001000110000110010" "10110111100011000001101110111110" "00110111100000100010011010011011" "00110111010010000011000001110000" "00110101101001010110000101010010" "00111000100001111011111101001110" "10110111000111000000101010100110" "10110111010100001101111011010011" "10110111101011000011100110100101" "10110111000110111100010000100001" "10110100100110000101010110000110" "00110111100011110011101000001010" "00110110111110101111100010111011" "10111000001100100100111100110100" "10110101100001111010101000111000" "10110111101110010001100111101110" "10110111000101001110111000110110" "10110111100011100010010111111010" "10110101100000110000110110010001" "00110111111001111101011001110110" "10111000000111111101010011001010" "10110111011000011001011100101010" "00110111100110110111000001100011" "00110111000011111001001001101010" "00110111100100001101000111111111" "10110101011010110100001101111010" "10110111101010011000010100101110" "00110110010001010111101111001110" "10110111110110100010110010010010" "10110111010000001001010001100100" "10111000011000111010000110000100" "10110111000000110100101000101000" "00110100010011010100011011111011" "00110111011000000001010000010100" "00110101001001110001100100100100" "10110110110000101000000000001101" "00110110101101001110111101001001" "10110111011010001111000001010101" "00110110101101000010001001101000" "10110110000010010101100110001010" "10110110000111110100000011011000" "10110110101010010110011001011100" "10110111010100110100000000111001" "00110110111010010011110110110010" "00110110010110101110111111011010" "00110111101110010100111101010111" "00110111111001110010001010111000" "00110111011000101100101001101100" "10110111000000101111101101000011" "10110111110011100000001000111011" "10110111110010000111001010100100" "10110110111101111100111110010000" "00110111010100011110100010111001" "00110111010111001010100100101110" "10110111100100000011011010001100" "10110111000010011101100010110101" "10110110111010110011010100110011" "10110111001000101110001101100001" "10110111110100110100100011111000" "00110111000101110000110110011110" "00110110010110000111010111000101" "00111000011011110100000100001000" "00111000001110000010000110001101" "00110100001000010010101101010010" "10111000011001100010111000111100" "10110110100111110001110010011111" "00110111101100001011010000011110" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.257
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 161
set hasByteEnable 0
set MemName face_classifier_cAem
set CoreName ap_simcore_mem
set PortList { 2 2 }
set DataWd 32
set AddrRange 300000
set AddrWd 19
set impl_style block
set TrueReset 0
set IsROM 0
set ROMData { }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.257
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 162
set hasByteEnable 0
set MemName face_classifier_cBew
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 32
set AddrRange 100
set AddrWd 7
set TrueReset 0
set IsROM 1
set ROMData { "01000000001011011001111100001011" "10111111110101010110101110000101" "10111111110110111100000101011011" "10111111000100111101110011111011" "11000000011010010000010010001000" "10111100101101000000100111001010" "01000000010100100101110010011001" "00111111010010101000100000010001" "00111111101011010101001100101010" "00111111101000000110110010110110" "11000000000001101101011010010100" "01000000100000100110001110010101" "01000000000000110011001010001000" "01000000011100010001000100111101" "00111111100110011110100111111001" "00111110110011000101010111010111" "10111100100101001010101110001110" "11000000001000111101110111110000" "01000000010011010000110001010110" "11000000000100001101000101110011" "11000000100011100100100010010001" "00111110100010000100000010001111" "00111110110101001111011000010101" "01000000111111000000100100001111" "00111111110010101101001100100110" "01000000001000101011010000101000" "11000000001000101111000001111110" "00111111111011000101000100001110" "10111111100000001100101110101010" "00111111010101001110011111001110" "11000000011000011000010100001011" "00111111100000010000101111100110" "01000000001111101011101111001000" "10111111100111110101111000101000" "00111111101001000010000011001000" "11000000001011000111010111110001" "10111111101000110110111001101010" "10111111111100111000011111101010" "11000000110010111100111110111011" "11000000101101101101010110110101" "11000000011011010101011100000011" "01000000001001010011011000111100" "10111111011110110010111101110111" "00111110101010011001110011100011" "01000000000000010101101000011111" "00111111000000100111101000101010" "01000000000101111010111110011011" "00111011111110110111111100001111" "01000000001111110011111001111010" "01000000000010001101011101110111" "01000000010001001111010011110111" "10111111010111110000101100111010" "10111110000011110001101111001001" "10111110100100010100101000101110" "01000000000110010011011110010111" "10111110101011001101010110011010" "00111111100101111111000100011010" "00111111100110101100110001111110" "01000000000001110001011001011100" "10111110100001101010011110011010" "01000000010100110000100010000010" "00111111100010000010101101001100" "01000000010010101100011010000101" "10111111001110111001001111001011" "11000000000000011110011101010110" "11000000000001011001010000111100" "11000000010001111110010101101111" "10111111100000011111110110101101" "00111111101001100101000001000100" "01000000001010000111101011110101" "00111111001011011110001000110111" "10111111111010011011000110010001" "11000000010000100101111110010110" "01000000010100001101100101001110" "11000000000001001101000100000111" "10111111111011101101111011110101" "01000000010010010001001110011100" "10111111111101010001010010001011" "00111111100010001110010110111101" "10111101110000010001010100010011" "10111110011111101101110011001100" "01000000000110010111101101100110" "10111110111000110101111110101111" "01000000001011100111111111011010" "10111100101111101101111101000001" "10111111110110000110111001111000" "10111111100101010010011001000011" "00111101111111110101010010000011" "00111111001001011000101011011100" "10111111100011111111111010110111" "00111110010101001011000000010101" "00111111100100010110101010111011" "00111111010111111100111010010000" "10111111101001100000111111100001" "10111101011001100110101111000011" "11000000000011011010110001000010" "10111110000010010100111010110111" "10111111010010011010110000010001" "11000000000010000101100010011001" "00111111001000110110010111110010" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.257
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 163
set hasByteEnable 0
set MemName face_classifier_cDeQ
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 32
set AddrRange 100
set AddrWd 7
set TrueReset 0
set IsROM 1
set ROMData { "01000000011111111001001101011001" "01000000100000100110001101000000" "01000000100100010001111110100010" "01000000101011101110010110101110" "01000000110000001000010001100000" "01000000100000101100010111101110" "01000000011101010000000000110011" "01000000101000000110010101100111" "01000000100010001001000010000000" "01000000101101101011011001111111" "01000000100001100110110101100010" "01000000100111000110011010101100" "01000000100011000101111100001010" "01000000100101001010111011000110" "01000000100001000001100010010111" "01000000100000010110000011101000" "01000000100010011001001100000101" "01000000100001100011011011000010" "01000000100011001011100101010000" "01000000100110001100011110101011" "01000000100101011010001111101110" "01000000100110001000101110010100" "01000000101011110111110100100110" "01000000101101011110000110010011" "01000000100010000001101101010001" "01000000100100100010100010110110" "01000000100011001111110101101000" "01000000100011101110001000110100" "01000000100010001000111010011110" "01000000100100011110001011110101" "01000000011000101011010101100010" "01000000100001011000011000010000" "01000000100111101100100100110000" "01000000011010101111011010110111" "01000000101000100010110110010101" "01000000110101111110111100010111" "01000000100000110110011011010100" "01000000011110001101000101100001" "01000000100100111010011101011000" "01000000110010010111101110000100" "01000000100011001100000001110100" "01000000100101001101100101011110" "01000000100111011001011101000001" "01000000100011000100110100011110" "01000000101000111011111010111111" "01000000011101111111101001001010" "01000000011101000111111111010101" "01000000100010000110111011100000" "01000000100101111101001001010010" "01000000100110100001001001100000" "01000000011001100101100010011001" "01000000111000110110111101000101" "01000000101011000110101011110101" "01000000100000100101001101110110" "01000000011101111011111101110011" "01000000100101101010010000011100" "01000000100110000110011000011100" "01000000100101101010001001111000" "01000000100111000000110000100110" "01000000100100110110110011110100" "01000000101001101100110010111010" "01000000100100110110101101011100" "01000000100101010111010001111100" "01000000100010010000011111011010" "01000000100001111000011011110100" "01000000101101101000001110111100" "01000000110010101110010001011111" "01000000101010011000000011000000" "01000000100000101110001000010011" "01000000100001000101011011001011" "01000000011111001110110011100001" "01000000100100101100001011001110" "01000000100111001001010011011010" "01000000011110000111000010101010" "01000000011111001100011000110011" "01000000100001000001011101110010" "01000000100011111100001010110111" "01000000100000111011101100000001" "01000000011011000001000100001100" "01000000100100110000100110011111" "01000000100001110110001010101000" "01000000011101100111101110010100" "01000000011101110101001111011110" "01000000100000011111000000001011" "01000000100110100000101010010001" "01000000100000110100001100000011" "01000000010101110011101110111000" "01000000100011001010010011011000" "01000000100110010100100001001000" "01000000100101000111100110010010" "01000000100101100000111001100101" "01000000010101100010101111000000" "01000000100000000101010111101110" "01000000100010001011110101001010" "01000000100000010000001001010101" "01000000011010100000011001101010" "01000000100101011011110111110100" "01000000100000011001101110001111" "01000000100001100000110010010001" "01000000011010110010110110010110" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.257
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 164
set hasByteEnable 0
set MemName face_classifier_cFfa
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 32
set AddrRange 100
set AddrWd 7
set TrueReset 0
set IsROM 1
set ROMData { "00111111100000000000110111001111" "00111111011110111011000010000010" "00111111100000011000110101000100" "00111111100000001000011110111101" "00111111011111110011001101110001" "00111111100000010000110100100110" "00111111011111101011010111011011" "00111111100000000011001000010000" "00111111100001000110110001100001" "00111111011111101001110000110111" "00111111100000010111100110111101" "00111111100000101010100000111011" "00111111011111100000000110110010" "00111111011111111000001001110101" "00111111100000010110101110001010" "00111111100000010111101101010011" "00111111100001010011011011001101" "00111111011111111100000110110111" "00111111011111011111001011000000" "00111111100000000100010110101000" "00111111011111111100111100110001" "00111111100000000011010000100101" "00111111100000000100001010110101" "00111111100000010011100010100110" "00111111100000010111100110100011" "00111111100000100111000001110110" "00111111011110100000011010101111" "00111111100000000110011110100011" "00111111100000011100001111100111" "00111111011111100111110101101011" "00111111100000110110000110101101" "00111111100000001101110010111100" "00111111100000000001100001100010" "00111111100000000100001111011010" "00111111100000001001101100001010" "00111111011110100100101011000100" "00111111011110010011010011111000" "00111111011101110101010010001000" "00111111100000000111111011010101" "00111111011111100101000111110001" "00111111100000001100111111001011" "00111111100000010110010111000110" "00111111100000010100110111011110" "00111111011111111110100111110011" "00111111100000100111101010110111" "00111111100000111110111110001010" "00111111100000000100100001111011" "00111111100000011110001100111100" "00111111011110110111000101010111" "00111111100000001010011001011011" "00111111100000010110111101000010" "00111111100000000001000011011000" "00111111011110001100101110000001" "00111111011111100110011001010001" "00111111011111111101111111001100" "00111111100000101101111000001101" "00111111100000010110011110010010" "00111111011111110000000000100110" "00111111100000011101000110010011" "00111111011111010100000011100010" "00111111011111011011010001000101" "00111111100000010100011001010000" "00111111011111100110111001101101" "00111111011111110001010110000101" "00111111100000101101010110101011" "00111111011111110011000001000100" "00111111100000000011011101011111" "00111111100000001000100110111110" "00111111011111101100110000010011" "00111111011111101100011101101010" "00111111100000000110001101111010" "00111111100000010100110101101010" "00111111100000001001010100100111" "00111111100000100010100101010000" "00111111100000000001001010010101" "00111111100000010010100100011111" "00111111011111001011100101000111" "00111111100000000111011010110011" "00111111100000010110001100101010" "00111111100000010000000100100001" "00111111100000011010100001010101" "00111111100000000100110110111011" "00111111100000000011110011100100" "00111111011111111010110000011111" "00111111100000111100110010000010" "00111111100000110100010110111011" "00111111011110100000010001110011" "00111111011111111100100110011100" "00111111011111111001001111100100" "00111111100000011010111001111101" "00111111100000000101101101100101" "00111111011111111110100000100111" "00111111100001001011000001011110" "00111111011110100110011110001100" "00111111011110100101010110101010" "00111111100000101111010101111100" "00111111011111001101010001000100" "00111111100000000000101011001100" "00111111100000001100100101011011" "00111111011111100111010000010101" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.257
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 165
set hasByteEnable 0
set MemName face_classifier_cHfu
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 32
set AddrRange 100
set AddrWd 7
set TrueReset 0
set IsROM 1
set ROMData { "00111001000100011110001001111010" "10111010010100101001011001011110" "10111011101010001011100100100101" "00111011111010000101110111000101" "10111011100011010101101000110101" "00111011100000101011100110110100" "10111011111011011010001000001000" "00111100011101101011010101010111" "10111001110000110101101000101101" "10111011011101111111010001111000" "00111011101111100110000000101110" "10111011011000000111011101111100" "10111011011000000110010000110110" "10111011110110001001000110101101" "10111001110001111010000100001001" "00111100100011011110110011010011" "00111011100100001001011101001011" "10111100000000011100011100000100" "10111010000001010000111111010011" "10111011110101001000000001101110" "00111011101000010010101111100000" "10111011101101111100111110110111" "10111100100000100000111010001101" "00111011111101000110000100101100" "00111100010011101001100000100111" "10111011000011000111111000101011" "10111011111011111101010111000100" "00111011110101000011000000011110" "00111100001011110100111010011000" "10111100011101110110001001110111" "10111001101011101111000110101010" "00111011010101111110111011100110" "00111011000010000001101010011000" "00111100011001011011001011001001" "10111011110111101110001110001111" "00111100000100101001000110100010" "10111011100111001000101111010100" "00111010100100010000001001011100" "10111100100000010011101011000110" "10111100100010010110001011111000" "10111010101000110010100101000000" "10111100011011101011011100111110" "10111011100000110011110110011100" "10111011100000111111001001100110" "10111011010011000111101011000011" "10111100101111100001010110001100" "00111000010110010010111010111000" "00111001001110000101100101100100" "10111010100101100110010001011011" "00111010101011000001100101000010" "10111011000000001110010010101100" "00111000011111001110101101011100" "10111011110110110110100111011001" "00111011000111110010011011000101" "00111011010100001101111010101111" "10111011110000001110100000100010" "10111100011010000111010000001110" "10111011010111011001010101111100" "00111100000111001100010100101110" "00111100001000000010000101101111" "00111100100100100000110010100100" "10111010110010011011000001100001" "10111100110000110100110100010111" "10111100001000011011100100010001" "00111010000100110011100000101000" "00111011100000110111111010111100" "00111010101111110101000010111010" "00111011111010000101101111101010" "10111010011110110100011000111100" "00111011010011110010010011010111" "00111010101101011011111100110010" "00111011100001010011001100110110" "00111100100000111101100111101000" "10111000110110000100100100111000" "10111011000100111110011100011110" "10111011110001011011011000110001" "10111011011110011000100110111000" "10111100000000100111011000100011" "10111011101101100000111111101000" "10111011010010101110001011010100" "10111011100101000011111000000101" "00111100000010010001101000001100" "00111011001011111011011010111101" "10111010001000111101110000010111" "10111100100010000111000010000011" "00111011100101010001001000010011" "10111001011100011010000110000111" "10111011110101111001101111010001" "00111011101100101001010100001000" "10111011011000101111110000010111" "10111011111101111100110100010010" "10111011101000001001101000110001" "10111011011111000100111110100000" "10111010001101001110111010010101" "00111011011000111101111001001011" "10111100000110010010010010001010" "10111100000001001101101010000000" "00111100010010000111011101110100" "10111011011100101010101100101111" "00111011000111010010001100001100" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.257
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 166
set hasByteEnable 0
set MemName face_classifier_cKfY
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 32
set AddrRange 1000
set AddrWd 10
set TrueReset 0
set IsROM 1
set ROMData { "10111110000100001010000100001010" "00111101101000011011111011101111" "00111101111000100111000011101100" "10111110011000001100111001111111" "00111101111101000010101000110101" "10111110011101100110010001111010" "00111101010100110001111000100101" "10111100110111011000101011110110" "10111110011000000001000010000101" "00111100101101100111101000001101" "10111110001101100001010001000000" "10111110001111000100000011001110" "00111110000101110100101010101100" "10111110001011000001101101011111" "10111101111101111110101000111001" "10111110000100000110100100011000" "10111101110000011111111000001011" "00111101100110111111000101101011" "10111101001011011010011100100000" "00111100100001110101001101100110" "10111110000001010101001001110111" "10111110000100100110100110011100" "00111101110101011010110011001000" "10111101110011101101100111000111" "00111100001110000011000001110110" "00111101111100100100011001100101" "00111101011010011101010001000011" "10111110000000111111110110011010" "10111110011100101010111000010010" "10111110001001111011101100100000" "00111110000010000111101011011101" "10111101011010100110111100110100" "00111101000101110101010010111111" "10111101100000101010000111101111" "10111110001011111110010010111001" "00111110001001000010101011010010" "00111101000011011001101000110101" "10111110010011111001010000110011" "10111101101110011110111011110010" "00111101011001001010010001010001" "10111101010010011010110001110110" "00111100010111100100001000000011" "00111100000111010110110111010011" "10111101010011101110011101101101" "00111110010000001010101100101110" "00111110001101011101011101010110" "00111101001001100000011101110111" "10111110010110101000011111010000" "10111110011000010001111111101000" "10111110001010101000111000111101" "10111101000011110100010111101001" "10111101101110000100011111100100" "10111110000000011100101001101111" "00111110011100010101101111010011" "10111011001001111011100000101111" "00111100000010110011001011110001" "10111110001011111101110011100000" "10111110001101111000111000001111" "10111101111101111111101000100010" "10111110011100001010010101100001" "00111110001110010011101001000001" "00111110010100111110101000100101" "10111110001110110011110010001000" "00111101111011101100100000101100" "10111110010010000101111101101011" "10111101110111100000000010000010" "10111101110001110000111110001101" "00111110010011011001100101000000" "10111110000011110011011011010101" "00111100110001000010111110110001" "10111101110111001001101011011100" "00111110010110111111110100111110" "10111100111010000011011010001000" "10111110000111001011010011001000" "00111110010011100110111011101010" "00111110010011101011100110000101" "10111110001000101001101111110111" "00111110000101010101010101000011" "00111100001010010110000101100100" "00111101100101000001010111001110" "10111110001000000010001111011000" "00111110001011010000111100000111" "00111101010000110011010100010101" "10111100110111001000101101001100" "00111100110011101100001111100111" "10111110001110000010110101101100" "00111101101011111011100010100011" "10111101111001011000001010010011" "00111101100111111011000000100011" "10111101111001101001000100100100" "00111110001111011100100011100001" "10111101010011110110001001010100" "10111101110101110101011001100111" "10111110000110111101010111110111" "10111110010100011111110100110100" "00111110001011011101101111000110" "10111110011010101011010010111000" "10111110000110000100110100000100" "10111101110110110111011101100011" "00111110010000101110011001000110" "00111110011000110101001110000000" "00111101011000001001010011110000" "10111101110010011100010111010101" "00111101011000010110011110001111" "00111110001110000100001111110010" "00111110000001110110010100001100" "10111101001010100101001010100100" "00111101100100001111100101011111" "10111101101001101110100111110001" "00111110000011110001111101111110" "10111110001001110001010101111010" "10111110001110010111000101010111" "10111100111010110000001000011101" "10111101000100001100011001111101" "10111101100001000011010001111110" "00111101011101100101010000100000" "00111110000011000100001110010001" "00111100110110110110101100101000" "00111101100010101111101000111001" "00111110000010111001010111110011" "10111101110010001101100000110110" "10111101001011010000100111011111" "10111100111111100001100110101111" "10111110001010000100011101000010" "00111110000111110110100000000110" "10111101111010010100101010010000" "00111110000011010100101000110010" "10111110011011000010111000000010" "00111010001000010110101011010111" "00111110010010001000100101000010" "00111101111001111001001111110110" "00111100000100001010010111011010" "10111110011011010001010000110111" "00111110011000001010101110111110" "00111110010101001011101110000100" "10111101111000100000010111010110" "10111110011100010111110001100011" "10111101111110001000001100111101" "00111101001101101011111010111110" "00111101111011000100001000000011" "00111110010110001111100100110010" "00111101101011110000010101011111" "00111101110000110000010110110111" "10111101100111011101000100110101" "10111101100101011000000111001010" "10111110001000111110010001011101" "00111101000010111111000111110001" "10111110010010011010011100001011" "00111110001001011101100100010111" "00111100001110111100110001100111" "00111110001111000110011110010111" "10111110010000010001110011111000" "00111101011101110100110010000001" "10111101101010101000110110001110" "10111110010100110101100010101000" "10111110001001000111010001010110" "10111011110011100111011000001101" "00111110010111000001101101011110" "10111110001010001100100010010111" "00111101111111011011011011010101" "10111101110010110100010010011001" "00111110010101101111010010011101" "10111110010010101100100000110000" "10111110010101001000001000110011" "00111101011011100110100100000000" "10111110011011001100011110111101" "10111011010110000000101001010100" "00111011100111000001010011110110" "10111101011001101011010101100111" "00111100100000101100101001010010" "00111110011001100100111000111010" "10111101110011011000011000100010" "10111110000111010011010011110100" "00111101000100100000011110001111" "00111101111111101000011000110011" "10111110010001111111111100101000" "00111110010011000011111000011101" "10111110000010001101111111111010" "00111101100010000010000011100100" "10111101101101000011100101010100" "00111110010101010111100110110010" "00111110010001110110101101011001" "00111101000010101000010111010010" "10111100100111101110010101110110" "10111110001110000101000110110101" "10111110010111010111001111111011" "00111110010110000000101100011010" "00111101101000001110100001001010" "00111110011010011110001111110101" "00111101101111110001111001010101" "00111101110000011000011010100111" "10111101110100010001101011011101" "10111110001010100010001101010011" "10111011011101110010001001101011" "10111110010001111001110010010000" "10111110001010110000111101010100" "10111010110010110011101100010100" "10111101110111000000011111001001" "10111101100000001001110111101100" "10111110010010101100001010011111" "00111101110001010111101110100011" "00111110010000011011101111000110" "10111101001011100000100100011010" "00111110010100100101001100000110" "00111110011001011011001000110111" "10111110010100100011110110110111" "00111110000000101101011000110011" "10111110001101000011011110101000" "10111110000110110011001010000101" "10111100110010101111101001100000" "00111101101101110010110111001010" "10111101011110111110100010010101" "10111110001111110100110001101101" "10111110001110001000110110000101" "00111100100001100001001001111100" "10111110011101110011011001000110" "00111110001101000010100100000000" "10111100001100001000100011110010" "00111101100111110010101110110110" "10111110000100010111111101100010" "10111100100010100000000101001110" "10111110010011011010101010101010" "00111101010111100110101100111100" "00111110010111111011000101000101" "10111110010001010011000000010000" "10111110010110111110111011111101" "00111110000110101100111111000000" "10111100001000111111100110110000" "10111101000010011010100010101010" "10111110000010011101100100001001" "10111011110100110101001000101101" "10111101101000000011010001001110" "10111100001010111100001010101111" "10111110011000011100010001011101" "10111101000000111011101011100001" "10111110000001010000010010011000" "10111101110110101111001000010100" "00111110010001010110011100011011" "00111110010111100101101010101010" "00111110010001011011001001100101" "10111110010110100011111001010110" "00111101001101011110000101111001" "10111101101111001000100010000011" "10111101111111011001111100010111" "10111110010100010001000111011001" "00111110010000000000111101110010" "00111100001111111100100000101110" "10111110010010001110010100000001" "10111101000011101110111101001101" "00111011100100010011111001101100" "10111110000011100111000100000100" "10111100011000100111001010100000" "10111110001001111111111100010011" "00111101000011010011110000001010" "10111101010011100101111001111010" "00111110000010000110110111110001" "00111110100001010010100110011011" "10111101111000000001011110110110" "10111110000000111110111110101110" "00111100010000000110100011100010" "10111101111110000100011100011110" "10111100100101011100010000010101" "00111101010100001100001001000000" "10111110010101111011011100100100" "00111110001010011001001010110010" "10111101110101000101011010011010" "00111110001000110001010010110010" "00111101111111111110010110011001" "10111110001101110100101110111110" "10111110010111100100011101111111" "10111110000001100011101010101110" "10111110001001010011001011111000" "00111101101111000000100001000011" "00111110001000111101110000110111" "10111110000001100010011010101111" "10111101101010100100010000011111" "10111101001101011011011000010000" "10111101101011101111101001110011" "00111101101001010110110110011100" "10111011111010011000101001111101" "00111110011111000110101100100101" "10111110000100001101101111000111" "10111101010111101000011100100000" "10111110000000111000101111110110" "10111100001001000001110100100001" "10111101101000101111110011001111" "10111101011101001111101100010011" "10111101101100100001111000000111" "00111100000111101011100011111110" "10111110011011000010000100111111" "00111101000000011010000111110011" "10111110010000010100011100101001" "10111110011100010100000100010010" "10111110010001110100001000111101" "00111101001100011111011001101001" "10111100110010101001101100101001" "00111101100101100000010011111110" "10111101010011011011001111110011" "10111101101110000110111011110110" "00111101110111100111111010010011" "10111110000001100011000011011111" "00111100001100101000110100011011" "00111110010110100111001111001100" "00111110000101011101101101001111" "10111101001010011101110111011111" "10111101110111000101100100101100" "00111110010010111000110000011011" "10111101101011111110000011010110" "00111100111011011111111010101101" "10111101111000011001000000111101" "10111110010100000011001101101011" "10111101010001100011010111000001" "10111101101100010101111100001000" "10111101001100111101110010001110" "10111110000110110011011101010111" "00111110010010010001111100110101" "10111110000111100011100011010110" "10111100110010110010000110100000" "10111101100110001111110001110010" "00111110100001001111100111001111" "00111101100011111110000001011100" "00111101001101110011001101110111" "10111101110111101100110101001010" "00111110000110111001101000010110" "00111110011000110011101001011101" "00111110001011000110111110010001" "10111101111110100101011010011111" "10111110010000010111001100110100" "00111101100110011001000110110101" "00111110001001100101111101001111" "00111101100001110000100111000110" "10111110000000100010001001111000" "10111101111010111010010010100010" "10111110010111010010011100010110" "00111101101101110001100001010010" "10111101110101010110000000000001" "00111110010000111101111111111110" "10111110001000101101110101011010" "00111101011111100100110101111110" "00111110010110110001100000111001" "00111110010110101011011001100111" "00111110010110000100100011000100" "10111110001000110001011110111101" "00111101000011111001101101000010" "10111101100000010010000111010101" "10111110010001111101000110111011" "00111101100111101011100111001000" "00111101001111100000110110011100" "10111100101001100111011111110110" "10111101100111100010101101000111" "00111110010000010100110111111001" "10111101000010011101001110000001" "00111110011001100111101110011000" "00111110010110011111001011101101" "00111011000011010000011001110001" "00111101000111101001010101111001" "10111110001001100101110111011110" "10111110001010000100010010000101" "00111110010111101111011110101000" "00111110011001100011000110001101" "00111110001001010000010011111000" "00111101100100010100010000101010" "10111101001001110010101111111101" "00111110010101100000001100000100" "00111110010100001000001011111001" "00111110000011100001110011100011" "00111101011101010110001101011111" "00111110010101001110110100101110" "10111110000110101100101011110000" "00111110010011111010000000011101" "10111110001111000011010111010111" "10111101111010011110110110000100" "00111110010001011110010100001011" "10111101100011101111000011101000" "10111101000101001100111011000111" "10111100111000011010110110110100" "10111101110101001100000011010010" "00111110000110101100100110000011" "10111110011000010110111110001110" "00111101110100001100111111001100" "00111110000101110011111100100110" "10111110010110110011001101111101" "00111101010100011011101110100010" "10111110001110110111010101111010" "00111110000100010000001110100100" "00111100110111111100110100111111" "00111110000010110100100110011110" "10111110000011001101011100011110" "10111110000101111010110101001110" "10111101111111110101110110000110" "10111110010111101000100101000010" "00111100100000111110110011101111" "00111110000110100001111101100011" "10111101010101110101101111100110" "00111101011011011111110110000001" "00111110001010011001010010101010" "10111110000100001100011101001110" "00111101000101111111011010000100" "10111101110011011001000111000100" "10111110001011001111101001110011" "00111100001111111010110000101001" "10111101111100111000110100111011" "00111110010011000000010010010110" "10111101010000001101000011001011" "00111110001111011110100111000111" "10111110010011010011011000100010" "10111110010111101101010011010001" "00111110001010010100100010110010" "00111100110101010111110101001101" "10111110011011001010000100010110" "10111110001011101001001000111011" "00111110000010111000001110100100" "10111100011101111110110011110011" "00111100101101101110000111100000" "10111110001000100110001100001011" "10111110010110001111101110000110" "00111110011011110011100101101001" "10111110001100111010111100101110" "10111011101110110110101011110101" "00111110010001000001101111001000" "10111011101101011010001010110111" "00111110010100100000000001111011" "00111110000111010110001000010001" "10111110011101111001100110000111" "00111101111101110101110110010110" "00111110011001110010100100001100" "00111101110111101010011111011101" "00111110010000010000011110011111" "00111011010001101000001100111101" "00111110011111011011101010110001" "00111110000000110010000111110001" "00111110001001111100001000111100" "10111101110000010100100101000111" "00111101001100001011111100100111" "00111101011011110010111101110100" "00111110010010100000101000111001" "00111100100100111010110111111011" "10111110010001110100100101110101" "00111110011110110100001110010010" "10111110000000001001001101001001" "10111101101100110001101100011001" "00111110000110101011111011001000" "10111110000010110010010001101010" "00111101101001000001011100111111" "00111101011101011100101011001100" "00111101101100000011011111111000" "00111101111001011111110010011000" "10111110010001000111100111000010" "00111101011011100110110101001100" "00111110001110001110111101000111" "00111110010010000101011011110011" "00111101011111101101001010111101" "10111101100011011100111001011010" "10111101010111001000100010011010" "00111110000001000001100001011111" "00111110011001010010101100110011" "00111100001100010010111110110100" "00111101111001110101011000100011" "10111110000101000000010111100010" "00111100000010001111000001000010" "10111110000001011111101101010001" "10111110000001100100011100001110" "10111101000011001100100001011001" "10111110001101100001110010100111" "10111110001101110010001111110011" "10111110011111000100000111010111" "00111110010100011011010101011100" "10111110011001111001100111100011" "00111110000101010000000000100111" "10111110000101001000111000001000" "00111100001001111000110100111111" "10111101100110010101101001100001" "10111100010100110100100111010010" "00111110000101011101111000101100" "00111101111000101110101011001010" "00111110000010111010101000010011" "10111101111100111011110100011011" "00111101101100101111111101101010" "10111011110000001101000011001110" "00111110001011011000110111001100" "00111011101001110010000010110010" "00111110001011001110011110101000" "00111101101010111010000011010100" "10111110011000010001110001000011" "00111101001100001100110000010001" "10111110000010000101101101001000" "00111110000001010101101100111011" "00111110000111100110011001011001" "00111110010011010010010110110111" "10111110001100100010101100101111" "10111101000001011001110111100110" "00111101100011000111101010100111" "10111100101010111100001101000111" "00111110000000011000111001101010" "10111110010100110100011001000000" "00111100100010011011100011110000" "10111110010010110011011111111010" "00111110011010011001000001010101" "00111110000000111000011001101100" "00111110001110010110111100001000" "10111101110100100010011011010111" "10111101001111110001110101001101" "10111101001001001111110000100011" "00111100101010110100011110001000" "00111101100011101101001000011001" "00111101110000010100011101100100" "00111110000011100011000100110111" "10111110000011000110000001111110" "00111101100100110100010101111101" "00111110010100000011011101110000" "00111110001111101000011110111010" "00111011101110111101010011000110" "10111101100110101110101111110010" "00111101110010000111010000110111" "10111110010100101111101001011010" "00111101101011100101100101110100" "00111101100101011001011100000001" "00111101111011101110111010001100" "00111110011100010110011110101111" "10111110000001001010111000110110" "00111101011110010000110000101010" "10111101100000000110111011110001" "10111110011010010010001011001100" "00111110000011111111111010101001" "10111101111011000101001011111110" "10111011001100011101010000011001" "10111101100111011001001110011010" "10111110001110110001100110011111" "10111101010110100010111011010000" "00111100001111000110010110111110" "10111101101100101100000110011110" "10111101001000111000001011110101" "10111110010010011010011000000111" "00111110010011010101000100011011" "00111011101001010100110110100010" "00111110001110011101001110001101" "00111101111100100011111010010110" "00111110001111001011000111000110" "10111110001110110101110010001110" "10111101010010110100100100100100" "10111101111100001110111110001001" "00111101111111111010100011001011" "10111100101001101110010110110111" "10111101011010111010100010011110" "10111110000000001001001100000011" "00111101001010000000110010000000" "00111110001011010110101110001101" "10111110001111000100001111010001" "00111110000101000011111100101001" "00111110001100010011000100001000" "00111110001111111010100011100100" "00111110001011001111000100100001" "10111101111111100100110100001100" "00111101110110110011001010011101" "00111101111111010011011110111011" "10111110001110000011110111011000" "00111100001001010011000111000110" "10111101111100101011001001100100" "10111101101011011010011111000010" "00111110000000110001001010010001" "10111101000000000011011110010000" "10111110010001000000011011000011" "10111110100000100010101011101110" "10111100111001100010101101100001" "10111110000110011101100000101110" "10111100111100001110100110100100" "10111110001011011011100110111010" "00111101101111101001010100000101" "10111101110101011100100101011100" "00111110000111011000100001000000" "00111101100110011100001101000001" "10111110001110010010011010100111" "00111110000101111010000011000100" "10111101110110100010011000100000" "10111110010111011000110001100110" "10111110011000011011011001010110" "10111110000110000101010000001111" "00111110001011110100010001101000" "00111100101011110100010110100010" "10111110000110001111010110111100" "00111101011001001001000001101010" "10111101100001111100010000100000" "00111101010010100111010001000000" "10111110011010101110000001111001" "10111110001110001110000101100000" "00111110001010101001100011001100" "00111101101110001101101010111010" "10111101000011110010111000010010" "00111101001101011101101111101111" "10111100001000100101111100110110" "00111101111000111101010000000101" "00111110000101010111000101000001" "00111110010000000110111110001111" "10111110010100111111000100111110" "00111110001111100000101010110011" "00111110001110011011000010010101" "00111110000000101010010101100001" "00111101111111110110101001000111" "10111110001101010111100010000101" "10111101100010110100111001110000" "00111110000011101100101100011101" "10111101110111100010000101000010" "10111101010000000101100000010100" "10111110001001110000101111110110" "10111011011110100011010100101011" "10111100110000011100001001110011" "00111101110011111110000110100100" "10111110010000011010110000000101" "00111110000101011011010110001011" "00111110000111111001100010110100" "00111110010000000011110111000110" "10111100110111011100010011010000" "00111110000010100111101001111000" "00111101100000110011110100011110" "00111101101000110001011111111111" "00111110000110000111101100100011" "00111110001101110010000101101010" "10111110011001001001111011001110" "10111101101010001100000110110011" "10111110001000100011010000011111" "00111110000110010100101101001100" "00111101101000010001011011110111" "10111110010110111010111100110110" "10111110010101110110000100110010" "10111110010101001001011000100000" "10111101000000010111011110011001" "00111110010010011110011011010011" "00111110010110100110110000011001" "10111101101000101101000000101100" "00111101111010001001110010100110" "10111110000110001001011011001011" "00111110000100111100001110111000" "00111110000010011100110111110100" "10111101110000010111111101011111" "10111110000011010010111111011110" "10111110000100100110101110111010" "00111110010011101110010111010110" "00111110010110100111011111110111" "10111101111100110010010001101111" "10111101111100100010010110000010" "00111110010100100100010010010110" "10111110001000100101101111001010" "00111110000100100001101101010011" "10111101001010010000101100111011" "10111101000001101010101011101111" "00111101110011011011100000010001" "10111101110010011001101101001011" "00111101111011100110000110011110" "10111101111110110100000101000010" "10111101111000000010100100101100" "00111110011011100000010011011110" "00111101011010001011000100000101" "10111101110111011111101110100000" "00111110000101110000100001110010" "10111110000111110000010111101011" "00111101101101011000101111001000" "00111110000100010000100101001111" "10111110010011011110101100111010" "10111110011100000110111000111110" "10111100001101101101111100001011" "00111110010101011110010010010001" "10111101101010100001101001011011" "00111100011110111011000111100010" "10111101110111011011111001100000" "10111101100011110011011000010100" "10111110000010110111010001101110" "00111101000100100011100011100111" "00111101100100100100111101000010" "00111110001111011000011110111111" "10111110001111110111011011111000" "00111100100011110101000110000010" "10111101110100111000101011100100" "00111110010101000001101010011100" "10111101110000011100010011111111" "00111110000101110011110100001101" "00111101100110101001110100100100" "10111100011100100101000010100111" "10111101111011010001110111000010" "10111110011001110011111101000100" "00111100110111111100111001110001" "00111100100101001100100100011000" "10111101111000111101011000001111" "10111101101111111000110111001001" "10111101110101100111000100111101" "00111100100111110110110101111000" "10111110011000010100010101110011" "00111110000111101010110001010001" "00111100011001000111010000001010" "10111110000101111110110010010101" "00111101000001010001011011101011" "00111101110110111101011111011010" "10111001100110110011001110101000" "00111101110100110011001101111101" "10111110010000011011110001000100" "00111101100001100110100100010110" "00111101101001100010011111001010" "00111101100100111111110000010010" "10111110011011101100011000000110" "10111101000101000001101111111110" "10111101101101110000011101100111" "10111110001111111001000100000000" "00111101011011000001000000101101" "10111101001100101111000101100011" "10111110011000101000111001100110" "00111101001000110110101001111101" "10111110000010010100111010110000" "10111110000011100100100010100101" "10111110001101000011111111100001" "00111110011010111101010110011110" "00111110010111001001000000111010" "10111101110101011101010101000001" "10111110010001101101111111001010" "10111100101000000011100010000000" "00111110010100111100011111100010" "00111110010010101101101011000000" "10111101001011010010001111110110" "10111101110100110010100011011011" "00111101100110010100110001001010" "10111101001100110010001100110100" "10111110000100010010100000011101" "00111110010100111010110101111101" "00111110010010111010111010110111" "00111101011011010000011010011101" "00111101000000001100111101100001" "00111101011111001100111110001101" "10111101100011010101100001111011" "10111110000011101010011110001001" "10111101101000000001010011110011" "10111110001010110100101011110011" "00111101000111001110000111010100" "00111101000010101011001001000011" "00111100000101000010000111010101" "10111110001010010011010011011101" "00111101111001110100001000111011" "00111101011010011101100110100111" "00111101101001100001101011100110" "10111101101011110010001000100001" "10111110000100001101110001010001" "00111110000100011111001100110010" "10111010110110011100010101011011" "00111110010111110001000001000010" "10111101100010111101100100110010" "10111101000110010110110100001111" "00111110010110111111011011110011" "00111110011000010101010001010000" "10111110001000100010110001101000" "00111101100000100111101111001001" "00111101011101000110111011001101" "10111100110101101101111101001110" "00111110000100111110101111111010" "10111101001101101011110011111000" "00111101001011111001110010111000" "10111110001100001110110100100001" "00111011010011001100001001000001" "00111110011000000010101011001011" "00111101001101000101010100011101" "10111101110010010001110101000000" "00111101010000110010110000100111" "10111110000110110001001000000010" "10111101111111010110001001000011" "10111110010000101010010001101011" "00111101101111010100110100011011" "10111110001111011110111101010101" "00111101101010011100010011001100" "10111110010001011100001110111101" "00111100100110011100111101010011" "10111110001001000001100101000011" "10111110010010010000100010010111" "00111101010110100101111001011110" "10111110001000000001011000100011" "10111110001100000011110110110111" "10111110010000011101011101000110" "10111010101100000101101100101100" "00111110010000110001110101001001" "00111101111101011110011100000010" "00111110011011000110110100010100" "10111101101110011011100011111001" "00111101100110110101110001010100" "00111101110111000000000101011110" "10111101010100001100011100001110" "10111101001100000001000010110111" "10111110001101110101001100111101" "10111100010010101111010000101101" "00111110011100010100101100001001" "00111101010000101110111011100000" "00111110011001100001001011011101" "10111110010001011000010111110010" "00111110000000101101001010011000" "10111110001101001100100100100001" "10111110010011111110100100001000" "00111110000000101100101001110100" "00111101100110010011111001010010" "10111110010101011100100111011011" "00111101000011111100011001011101" "00111100100110010011111000000011" "10111110011100110100110100010010" "00111110010111001101011111100101" "10111101000100001000110001101000" "00111100111110111001000011000110" "10111110011001101010001100010101" "00111110001110111110111100110010" "00111101110111011011101101101101" "10111101001100111100011111100100" "10111101111100111000111101010000" "00111110000111010000110110001100" "10111110001011101111000000000111" "00111110001101110000101000111011" "10111110010011101000101111010100" "10111101101111110101000010110101" "10111110000110110010011110111110" "10111110011011111111011111011110" "10111110001011001111011111000000" "10111101001100111001011100001110" "10111100010001100010110000001111" "00111101111101111010000001000111" "00111110001000011001110111110110" "10111101111100010111011011000001" "10111110010011011101100001000010" "00111110000010111100001010111110" "10111101011110001000011100111101" "10111101010111101001101011111001" "10111110001001111110001000111111" "00111110000110010101000100000000" "00111100101101001101111010000000" "00111101001011001110101111100001" "00111110011110100110101000100000" "10111110000000110101100011000001" "00111100100111101111111010011010" "00111101100010110111010110000011" "00111110011000111010101011001010" "10111101100110110101101010010111" "00111110001101101011101111100101" "10111110001111100000001000011101" "00111101101100111100100101001110" "00111101111111000010100011100100" "00111110000001101011101010101000" "00111100011011001010100001100010" "10111110000011000011000111111111" "00111110001011110001111011010111" "10111101110001000001100101001001" "00111101101111011001011101001111" "10111101001001100111110110001110" "10111110010101010010001101000011" "10111101010010011110001001100111" "10111100100001001100001111100000" "00111110001111010001001111000011" "00111101111010001111100111100110" "00111101111101011100000100100101" "00111101010110100001010010101000" "00111100000000101100001101010100" "10111110011000100000001101001010" "10111110000110010011100010111010" "00111101110010001111000011101001" "00111110001100101010100001001010" "00111110001000100111100100011001" "10111110010101011011011100011001" "00111110011100011110111100111000" "10111110011101000101110111000000" "10111101000010000000010001110010" "10111110000000001010000110100110" "00111110000111101010001000111001" "10111011111011001000001000101100" "00111110010110001010110100001111" "00111110010101100111110000000001" "00111110010111111001001001010101" "00111110011001001001110111101110" "00111110001010101001000011010100" "00111110010010010011001110001011" "10111110010001010010001001011001" "00111110000111001100110100100111" "10111101001100100010101110111111" "10111110010111000001110110100100" "10111101011000000101010011101000" "00111101101011110101111010110110" "10111101010001010111001011011011" "10111101110010101111110100111111" "10111100010000000010100011010001" "00111110000011110101001101101001" "00111110001110011110001000011100" "00111101111110100010000011111101" "10111101110010001001010011111001" "00111101001110000000010111011110" "10111110001111010011011110110000" "00111110001100000010001111010010" "00111101100101001000100001001100" "00111101111100011111111101111001" "10111110000010001011100100010000" "00111110000101111111100101100110" "10111110000000110011001111001101" "10111110010110111010101100001100" "00111110010110110101000010010001" "10111101110101001111110101001011" "00111101000110010001001111011110" "00111110011110001010000111101001" "00111101101111111110101000101011" "00111101001111110001101001011000" "00111110001101001001001100100110" "10111101001101011111010001010010" "00111101101111111001111110100110" "10111110001111001101111011100011" "10111101100111011001010111101010" "10111100100001111010001101000010" "00111110010001001000001011000010" "00111100000111001010010111110101" "00111100101101100010001110100110" "00111110010100000011100000100011" "10111110000000000000111001001111" "00111110011010001000110010001010" "10111110010011111000001001111100" "10111110011100011101010011110011" "00111110000110101010010100001001" "00111100000101001101011100010100" "10111100101100010111101011101111" "00111101110010101100010000000101" "00111110011001101010010100000101" "10111110010001111011001101111111" "00111101101011110101010111010001" "00111110000011010001010001111000" "00111110010101011001100110001110" "10111110011010011011001111011111" "10111101001011001110001000101011" "00111101110111110001101100011000" "00111110001111100110111110010001" "00111110000111001101111010001100" "10111101100101110100101010110011" "10111101111010110000001101100100" "00111110010111111100010000110011" "10111110011010000100001000110001" "00111100101000010011110000001011" "00111110001001101110001111100101" "00111110011000100100011101111100" "00111110010011100001101000001000" "10111101100001011001110001001100" "00111110000000101101100010110101" "10111100100111100111011000111001" "00111110000001011000010000101101" "00111101101011101101100010011100" "10111110001000110001010011111001" "00111110001100100010010110010001" "10111110000100010001010011001100" "10111110010110101110000111010111" "00111101101001100111111011111000" "10111100000011101010100100000101" "10111101010001110111110011001010" "10111101100001000101101010110111" "00111110000111000000010110000001" "10111101100101110000100110111110" "10111101011100001100101101111000" "00111110000010110000001111101100" "10111110000111101101110111001101" "00111110011001111000001110100001" "00111110001011010000001000111001" "00111101110010100011011000110011" "10111110001000101011100100010111" "10111110011100110001101101010010" "10111110000100110100101111101011" "00111101100111110001110111001110" "00111101100110001010011000101011" "10111101111100101010011100111011" "00111110000100111110001111111010" "10111101111001111000100100101000" "00111110000111010111110110001111" "10111110000100010010001000001111" "10111101000011100000100101101000" "00111110000101000111000001111110" "10111100000110000110111110110100" "00111101010110011111011110001111" "00111101110011000111101000011001" "10111110000111111000100011011010" "10111110010101100001101010100000" "10111100100010101000111011100110" "10111101110111111010111000011001" "00111110010000110010101101110110" "00111110000010101101010100101000" "00111110000100100111110000001101" "00111101001111010110100110001001" "00111100110010001001000101111101" "10111110011000010110100100100011" "00111101100111001000111101001101" "00111110001110101010010000110010" "00111110000101001101101010011100" "00111100111000010111010001100101" "10111101011010100110101101010011" "10111101001000101100010010011111" "00111110010010101001001001110110" "00111101110010110010100101110010" "00111011111011011010100110011000" "10111101001000111000100001100001" "00111101101101011110101010001111" "10111110010110110100010101100111" "10111101000010001111011001111111" "00111101100111101111111111100110" "00111101111101000011001111101001" "00111101110001110010111001111100" "00111101000110010100111111001000" "00111110010111000001001000111100" "00111110000001010011110010101111" "10111110010000111011101101101001" "00111110000111010111001011000010" "00111101101010100101111101101110" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.257
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 167
set hasByteEnable 0
set MemName face_classifier_cMgi
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 32
set AddrRange 10
set AddrWd 4
set TrueReset 0
set IsROM 1
set ROMData { "10111000010010100011010010101110" "00111000001100101100101101111101" "00111000111101000011010011010010" "00111001100010101001001100110000" "10111000111011100011100010101001" "10111001000110101110110001010101" "10110100110101011100100001100000" "00111000010000011101101011001001" "10111000101110000010001101100011" "00111000110110100111101101111010" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.257
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 168
set hasByteEnable 0
set MemName face_classifier_cPgM
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 32
set AddrRange 10
set AddrWd 4
set TrueReset 0
set IsROM 1
set ROMData { "10111100001111010101001011010100" "00111100100010100101001010001010" "00111101000110011011111010100001" "10111010001111011010101110001100" "00111101101000101000000011010000" "00111100111000011100110110010111" "10111011110010101110000110011000" "10111101100100100000101111010000" "10111100111000111000110111100011" "10111101001110001001011001011101" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.257
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 169
set hasByteEnable 0
set MemName face_classifier_cRg6
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 32
set AddrRange 10
set AddrWd 4
set TrueReset 0
set IsROM 1
set ROMData { "01000000000110011100100100001101" "01000000000010110101010101011101" "01000000000111111011110100111000" "01000000001001110111011110100011" "01000000000111110110011100101111" "01000000001010100111101001111000" "01000000000100011111101100000100" "01000000001011010000111100100010" "01000000000110110001010001000111" "01000000001010011000000111101100" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.257
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 170
set hasByteEnable 0
set MemName face_classifier_cThq
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 32
set AddrRange 10
set AddrWd 4
set TrueReset 0
set IsROM 1
set ROMData { "00111111100100011011110010010010" "00111111100101000001001101110110" "00111111100100111100001010110000" "00111111100011101110110100111010" "00111111100100010110001100000011" "00111111100100100011111001010001" "00111111100100111010010010011000" "00111111100100100100011000011100" "00111111100100010110000000110011" "00111111100100110001001000000001" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.257
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 171
set hasByteEnable 0
set MemName face_classifier_cVhK
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 32
set AddrRange 10
set AddrWd 4
set TrueReset 0
set IsROM 1
set ROMData { "10111100101101010111111011111111" "10111100100101111011010001011101" "00111100101001011000110111010000" "00111100111000111001110100011111" "10111101100011001101100001110111" "10111101100101000100000000011011" "00111100110011000111111000011111" "00111011001111010110111100101000" "10111100101001101011000110101010" "10111101011011100001101010001000" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.257
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 172
set hasByteEnable 0
set MemName face_classifier_cYie
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 32
set AddrRange 60
set AddrWd 6
set TrueReset 0
set IsROM 1
set ROMData { "10111100111100000100111000101011" "00111111010110000101111011101101" "10111111010100011110111010000111" "10111110000010101000001011000001" "10111110000110110001100100111101" "10111111010100101110101001000001" "10111111001100010001011100010110" "00111101101110110100010000011111" "10111111001100100001110110100000" "10111101100100000001100110001110" "10111111000110011110011111011111" "00111110110010110111111110011000" "00111111001100101100001100111011" "10111110010010110001100010000100" "10111111000101100101000011111010" "10111110001110100100101111100011" "00111111001111101000110010001110" "00111111010111100101001101101010" "10111110001110110101110001010111" "10111111010011010010110000100111" "00111110111110111010110001111110" "00111111001000011110110110000000" "00111111010110011011001110000011" "10111110000100011111001100010100" "10111111011001111100011101010101" "10111111010000101001000001010000" "10111111001011100100100110001010" "00111111010100101000100001110111" "00111101111110011010010010111101" "10111110100110010101100100011001" "10111111010110000011101100001011" "10111111000110001000101110011110" "00111110111000010011101011000001" "10111111011010000010000111101100" "10111101001001000010011110111101" "10111111000100001110010110111000" "00111110111000001000110000010000" "00111101011110110000000000001100" "10111110101111000101000111110100" "00111101000111100011110111010011" "10111110101000000111100000001111" "00111110101010000101101010011011" "00111110001011000001111110100001" "00111111010111010010000100100110" "00111110100111001100000000010001" "10111110110100101001010110100011" "00111111010101110011010001010010" "10111111001000010011111001111101" "10111111001110101110100010010101" "10111110010011000111100000011111" "00111111000011110111010000110000" "00111111010010001000101110000111" "10111111010000000101001111010011" "00111110000001000110111100111000" "10111111000001001010111001100111" "00111101110011010111001101110100" "00111110100011001011101011101010" "10111110111000101010010001001011" "10111110110101110111010100110001" "00111111010110100100000101100101" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.257
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 173
set hasByteEnable 0
set MemName face_classifier_c0iy
set CoreName ap_simcore_mem
set PortList { 1 }
set DataWd 32
set AddrRange 6
set AddrWd 3
set TrueReset 0
set IsROM 1
set ROMData { "00111101011001111111010011011111" "10111100010111010001110101111111" "10111101000000010111000010001110" "10111011010000100100001101011111" "00111100110110011100101110111001" "10111100111110100101011101110111" }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.257
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName ROM_nP
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_ROM] == "::AESL_LIB_VIRTEX::xil_gen_ROM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_ROM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 1 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_ROM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 174
set hasByteEnable 0
set MemName face_classifier_c2iS
set CoreName ap_simcore_mem
set PortList { 2 2 }
set DataWd 64
set AddrRange 5
set AddrWd 3
set impl_style block
set TrueReset 0
set IsROM 0
set ROMData { }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 2.152
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 175
set hasByteEnable 0
set MemName face_classifier_c3i2
set CoreName ap_simcore_mem
set PortList { 2 0 }
set DataWd 64
set AddrRange 5
set AddrWd 3
set impl_style block
set TrueReset 0
set IsROM 0
set ROMData { }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 2.152
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 176
set hasByteEnable 0
set MemName face_classifier_c4jc
set CoreName ap_simcore_mem
set PortList { 0 2 }
set DataWd 9
set AddrRange 5
set AddrWd 3
set impl_style block
set TrueReset 0
set IsROM 0
set ROMData { }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 2.152
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 177
set hasByteEnable 0
set MemName face_classifier_c5jm
set CoreName ap_simcore_mem
set PortList { 2 3 }
set DataWd 9
set AddrRange 5
set AddrWd 3
set impl_style block
set TrueReset 0
set IsROM 0
set ROMData { }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 2.152
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 178
set hasByteEnable 0
set MemName face_classifier_c7jG
set CoreName ap_simcore_mem
set PortList { 2 3 }
set DataWd 64
set AddrRange 5
set AddrWd 3
set impl_style block
set TrueReset 0
set IsROM 0
set ROMData { }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 2.152
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 179
set hasByteEnable 0
set MemName face_classifier_cbbk
set CoreName ap_simcore_mem
set PortList { 0 2 }
set DataWd 6
set AddrRange 5
set AddrWd 3
set impl_style block
set TrueReset 0
set IsROM 0
set ROMData { }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 2.152
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 180
set hasByteEnable 0
set MemName face_classifier_cbck
set CoreName ap_simcore_mem
set PortList { 2 3 }
set DataWd 6
set AddrRange 5
set AddrWd 3
set impl_style block
set TrueReset 0
set IsROM 0
set ROMData { }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 2.152
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 181
set hasByteEnable 0
set MemName face_classifier_cbhl
set CoreName ap_simcore_mem
set PortList { 0 2 }
set DataWd 5
set AddrRange 5
set AddrWd 3
set impl_style block
set TrueReset 0
set IsROM 0
set ROMData { }
set HasInitializer 1
set Initializer $ROMData
set NumOfStage 2
set MaxLatency -1
set DelayBudget 2.152
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 182
set hasByteEnable 0
set MemName face_classifier_cbil
set CoreName ap_simcore_mem
set PortList { 2 1 }
set DataWd 32
set AddrRange 264822
set AddrWd 19
set impl_style block
set TrueReset 0
set HasInitializer 0
set IsROM 0
set ROMData {}
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.257
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 183
set hasByteEnable 0
set MemName face_classifier_cbjl
set CoreName ap_simcore_mem
set PortList { 2 1 }
set DataWd 32
set AddrRange 1100
set AddrWd 11
set impl_style block
set TrueReset 0
set HasInitializer 0
set IsROM 0
set ROMData {}
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.257
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# Memory (RAM/ROM)  definition:
set ID 184
set hasByteEnable 0
set MemName face_classifier_cbkl
set CoreName ap_simcore_mem
set PortList { 2 1 }
set DataWd 32
set AddrRange 70
set AddrWd 7
set impl_style block
set TrueReset 0
set HasInitializer 0
set IsROM 0
set ROMData {}
set NumOfStage 2
set MaxLatency -1
set DelayBudget 3.257
set ClkPeriod 100
set RegisteredInput 0
if {${::AESL::PGuard_simmodel_gen}} {
if {[info proc ap_gen_simcore_mem] == "ap_gen_simcore_mem"} {
    eval "ap_gen_simcore_mem { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
} else {
    puts "@W \[IMPL-102\] Cannot find ap_gen_simcore_mem, check your platform lib"
}
}


if {${::AESL::PGuard_rtl_comp_handler}} {
  ::AP::rtl_comp_handler $MemName
}


set CoreName RAM
if {${::AESL::PGuard_autocg_gen} && ${::AESL::PGuard_autocg_ipmgen}} {
if {[info proc ::AESL_LIB_VIRTEX::xil_gen_RAM] == "::AESL_LIB_VIRTEX::xil_gen_RAM"} {
    eval "::AESL_LIB_VIRTEX::xil_gen_RAM { \
    id ${ID} \
    name ${MemName} \
    corename ${CoreName}  \
    op mem \
    hasByteEnable ${hasByteEnable} \
    reset_level 1 \
    sync_rst true \
    stage_num ${NumOfStage}  \
    registered_input ${RegisteredInput} \
    port_num 2 \
    port_list \{${PortList}\} \
    data_wd ${DataWd} \
    addr_wd ${AddrWd} \
    addr_range ${AddrRange} \
    style ${impl_style} \
    true_reset ${TrueReset} \
    delay_budget ${DelayBudget} \
    clk_period ${ClkPeriod} \
    HasInitializer ${HasInitializer} \
    rom_data \{${ROMData}\} \
 } "
  } else {
    puts "@W \[IMPL-104\] Cannot find ::AESL_LIB_VIRTEX::xil_gen_RAM, check your platform lib"
  }
}


# clear list
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_begin
    cg_default_interface_gen_bundle_begin
    AESL_LIB_XILADAPTER::native_axis_begin
}

# XIL_BRAM:
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc ::AESL_LIB_XILADAPTER::xil_bram_gen] == "::AESL_LIB_XILADAPTER::xil_bram_gen"} {
eval "::AESL_LIB_XILADAPTER::xil_bram_gen { \
    id 185 \
    name dense_input_input_array \
    reset_level 1 \
    sync_rst true \
    dir I \
    corename dense_input_input_array \
    op interface \
    ports { dense_input_input_array_address0 { O 19 vector } dense_input_input_array_ce0 { O 1 bit } dense_input_input_array_q0 { I 32 vector } } \
} "
} else {
puts "@W \[IMPL-110\] Cannot find bus interface model in the library. Ignored generation of bus interface for 'dense_input_input_array'"
}
}


# XIL_BRAM:
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc ::AESL_LIB_XILADAPTER::xil_bram_gen] == "::AESL_LIB_XILADAPTER::xil_bram_gen"} {
eval "::AESL_LIB_XILADAPTER::xil_bram_gen { \
    id 188 \
    name dense_input_input_shape \
    reset_level 1 \
    sync_rst true \
    dir I \
    corename dense_input_input_shape \
    op interface \
    ports { dense_input_input_shape_address0 { O 3 vector } dense_input_input_shape_ce0 { O 1 bit } dense_input_input_shape_q0 { I 64 vector } } \
} "
} else {
puts "@W \[IMPL-110\] Cannot find bus interface model in the library. Ignored generation of bus interface for 'dense_input_input_shape'"
}
}


# XIL_BRAM:
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc ::AESL_LIB_XILADAPTER::xil_bram_gen] == "::AESL_LIB_XILADAPTER::xil_bram_gen"} {
eval "::AESL_LIB_XILADAPTER::xil_bram_gen { \
    id 189 \
    name activation_3_output_array \
    reset_level 1 \
    sync_rst true \
    dir O \
    corename activation_3_output_array \
    op interface \
    ports { activation_3_output_array_address0 { O 19 vector } activation_3_output_array_ce0 { O 1 bit } activation_3_output_array_we0 { O 1 bit } activation_3_output_array_d0 { O 32 vector } } \
} "
} else {
puts "@W \[IMPL-110\] Cannot find bus interface model in the library. Ignored generation of bus interface for 'activation_3_output_array'"
}
}


# XIL_BRAM:
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc ::AESL_LIB_XILADAPTER::xil_bram_gen] == "::AESL_LIB_XILADAPTER::xil_bram_gen"} {
eval "::AESL_LIB_XILADAPTER::xil_bram_gen { \
    id 192 \
    name activation_3_output_shape \
    reset_level 1 \
    sync_rst true \
    dir O \
    corename activation_3_output_shape \
    op interface \
    ports { activation_3_output_shape_address0 { O 3 vector } activation_3_output_shape_ce0 { O 1 bit } activation_3_output_shape_we0 { O 1 bit } activation_3_output_shape_d0 { O 64 vector } } \
} "
} else {
puts "@W \[IMPL-110\] Cannot find bus interface model in the library. Ignored generation of bus interface for 'activation_3_output_shape'"
}
}


# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 186 \
    name dense_input_input_ndim \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_dense_input_input_ndim \
    op interface \
    ports { dense_input_input_ndim { I 64 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 187 \
    name dense_input_input_numel \
    type other \
    dir I \
    reset_level 1 \
    sync_rst true \
    corename dc_dense_input_input_numel \
    op interface \
    ports { dense_input_input_numel { I 64 vector } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 190 \
    name activation_3_output_ndim \
    type other \
    dir O \
    reset_level 1 \
    sync_rst true \
    corename dc_activation_3_output_ndim \
    op interface \
    ports { activation_3_output_ndim { O 64 vector } activation_3_output_ndim_ap_vld { O 1 bit } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id 191 \
    name activation_3_output_numel \
    type other \
    dir O \
    reset_level 1 \
    sync_rst true \
    corename dc_activation_3_output_numel \
    op interface \
    ports { activation_3_output_numel { O 64 vector } activation_3_output_numel_ap_vld { O 1 bit } } \
} "
}

# Direct connection:
if {${::AESL::PGuard_autoexp_gen}} {
eval "cg_default_interface_gen_dc { \
    id -1 \
    name ap_ctrl \
    type ap_ctrl \
    reset_level 1 \
    sync_rst true \
    corename ap_ctrl \
    op interface \
    ports { ap_start { I 1 bit } ap_ready { O 1 bit } ap_done { O 1 bit } ap_idle { O 1 bit } } \
} "
}


# Adapter definition:
set PortName ap_clk
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_clock] == "cg_default_interface_gen_clock"} {
eval "cg_default_interface_gen_clock { \
    id -2 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_clk \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-113\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}


# Adapter definition:
set PortName ap_rst
set DataWd 1 
if {${::AESL::PGuard_autoexp_gen}} {
if {[info proc cg_default_interface_gen_reset] == "cg_default_interface_gen_reset"} {
eval "cg_default_interface_gen_reset { \
    id -3 \
    name ${PortName} \
    reset_level 1 \
    sync_rst true \
    corename apif_ap_rst \
    data_wd ${DataWd} \
    op interface \
}"
} else {
puts "@W \[IMPL-114\] Cannot find bus interface model in the library. Ignored generation of bus interface for '${PortName}'"
}
}



# merge
if {${::AESL::PGuard_autoexp_gen}} {
    cg_default_interface_gen_dc_end
    cg_default_interface_gen_bundle_end
    AESL_LIB_XILADAPTER::native_axis_end
}


