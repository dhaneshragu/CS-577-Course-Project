// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

(* CORE_GENERATION_INFO="face_classifier_c,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu190-flgb2104-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.033400,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1584,HLS_SYN_DSP=182,HLS_SYN_FF=78583,HLS_SYN_LUT=73076,HLS_VERSION=2018_2}" *)

module face_classifier_c (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        dense_input_input_array_address0,
        dense_input_input_array_ce0,
        dense_input_input_array_q0,
        dense_input_input_ndim,
        dense_input_input_numel,
        dense_input_input_shape_address0,
        dense_input_input_shape_ce0,
        dense_input_input_shape_q0,
        activation_3_output_array_address0,
        activation_3_output_array_ce0,
        activation_3_output_array_we0,
        activation_3_output_array_d0,
        activation_3_output_ndim,
        activation_3_output_ndim_ap_vld,
        activation_3_output_numel,
        activation_3_output_numel_ap_vld,
        activation_3_output_shape_address0,
        activation_3_output_shape_ce0,
        activation_3_output_shape_we0,
        activation_3_output_shape_d0,
        activation_3_output_shape_address1,
        activation_3_output_shape_ce1,
        activation_3_output_shape_we1,
        activation_3_output_shape_d1
);

parameter    ap_ST_fsm_state1 = 186'd1;
parameter    ap_ST_fsm_state2 = 186'd2;
parameter    ap_ST_fsm_state3 = 186'd4;
parameter    ap_ST_fsm_state4 = 186'd8;
parameter    ap_ST_fsm_state5 = 186'd16;
parameter    ap_ST_fsm_state6 = 186'd32;
parameter    ap_ST_fsm_state7 = 186'd64;
parameter    ap_ST_fsm_state8 = 186'd128;
parameter    ap_ST_fsm_state9 = 186'd256;
parameter    ap_ST_fsm_state10 = 186'd512;
parameter    ap_ST_fsm_state11 = 186'd1024;
parameter    ap_ST_fsm_state12 = 186'd2048;
parameter    ap_ST_fsm_state13 = 186'd4096;
parameter    ap_ST_fsm_state14 = 186'd8192;
parameter    ap_ST_fsm_state15 = 186'd16384;
parameter    ap_ST_fsm_state16 = 186'd32768;
parameter    ap_ST_fsm_state17 = 186'd65536;
parameter    ap_ST_fsm_state18 = 186'd131072;
parameter    ap_ST_fsm_state19 = 186'd262144;
parameter    ap_ST_fsm_state20 = 186'd524288;
parameter    ap_ST_fsm_state21 = 186'd1048576;
parameter    ap_ST_fsm_state22 = 186'd2097152;
parameter    ap_ST_fsm_state23 = 186'd4194304;
parameter    ap_ST_fsm_state24 = 186'd8388608;
parameter    ap_ST_fsm_state25 = 186'd16777216;
parameter    ap_ST_fsm_state26 = 186'd33554432;
parameter    ap_ST_fsm_state27 = 186'd67108864;
parameter    ap_ST_fsm_state28 = 186'd134217728;
parameter    ap_ST_fsm_state29 = 186'd268435456;
parameter    ap_ST_fsm_state30 = 186'd536870912;
parameter    ap_ST_fsm_state31 = 186'd1073741824;
parameter    ap_ST_fsm_state32 = 186'd2147483648;
parameter    ap_ST_fsm_state33 = 186'd4294967296;
parameter    ap_ST_fsm_state34 = 186'd8589934592;
parameter    ap_ST_fsm_state35 = 186'd17179869184;
parameter    ap_ST_fsm_state36 = 186'd34359738368;
parameter    ap_ST_fsm_state37 = 186'd68719476736;
parameter    ap_ST_fsm_state38 = 186'd137438953472;
parameter    ap_ST_fsm_state39 = 186'd274877906944;
parameter    ap_ST_fsm_state40 = 186'd549755813888;
parameter    ap_ST_fsm_state41 = 186'd1099511627776;
parameter    ap_ST_fsm_state42 = 186'd2199023255552;
parameter    ap_ST_fsm_state43 = 186'd4398046511104;
parameter    ap_ST_fsm_state44 = 186'd8796093022208;
parameter    ap_ST_fsm_state45 = 186'd17592186044416;
parameter    ap_ST_fsm_state46 = 186'd35184372088832;
parameter    ap_ST_fsm_state47 = 186'd70368744177664;
parameter    ap_ST_fsm_state48 = 186'd140737488355328;
parameter    ap_ST_fsm_state49 = 186'd281474976710656;
parameter    ap_ST_fsm_state50 = 186'd562949953421312;
parameter    ap_ST_fsm_state51 = 186'd1125899906842624;
parameter    ap_ST_fsm_state52 = 186'd2251799813685248;
parameter    ap_ST_fsm_state53 = 186'd4503599627370496;
parameter    ap_ST_fsm_state54 = 186'd9007199254740992;
parameter    ap_ST_fsm_state55 = 186'd18014398509481984;
parameter    ap_ST_fsm_state56 = 186'd36028797018963968;
parameter    ap_ST_fsm_state57 = 186'd72057594037927936;
parameter    ap_ST_fsm_state58 = 186'd144115188075855872;
parameter    ap_ST_fsm_state59 = 186'd288230376151711744;
parameter    ap_ST_fsm_state60 = 186'd576460752303423488;
parameter    ap_ST_fsm_state61 = 186'd1152921504606846976;
parameter    ap_ST_fsm_state62 = 186'd2305843009213693952;
parameter    ap_ST_fsm_state63 = 186'd4611686018427387904;
parameter    ap_ST_fsm_state64 = 186'd9223372036854775808;
parameter    ap_ST_fsm_state65 = 186'd18446744073709551616;
parameter    ap_ST_fsm_state66 = 186'd36893488147419103232;
parameter    ap_ST_fsm_state67 = 186'd73786976294838206464;
parameter    ap_ST_fsm_state68 = 186'd147573952589676412928;
parameter    ap_ST_fsm_state69 = 186'd295147905179352825856;
parameter    ap_ST_fsm_state70 = 186'd590295810358705651712;
parameter    ap_ST_fsm_state71 = 186'd1180591620717411303424;
parameter    ap_ST_fsm_state72 = 186'd2361183241434822606848;
parameter    ap_ST_fsm_state73 = 186'd4722366482869645213696;
parameter    ap_ST_fsm_state74 = 186'd9444732965739290427392;
parameter    ap_ST_fsm_state75 = 186'd18889465931478580854784;
parameter    ap_ST_fsm_state76 = 186'd37778931862957161709568;
parameter    ap_ST_fsm_state77 = 186'd75557863725914323419136;
parameter    ap_ST_fsm_state78 = 186'd151115727451828646838272;
parameter    ap_ST_fsm_state79 = 186'd302231454903657293676544;
parameter    ap_ST_fsm_state80 = 186'd604462909807314587353088;
parameter    ap_ST_fsm_state81 = 186'd1208925819614629174706176;
parameter    ap_ST_fsm_state82 = 186'd2417851639229258349412352;
parameter    ap_ST_fsm_state83 = 186'd4835703278458516698824704;
parameter    ap_ST_fsm_state84 = 186'd9671406556917033397649408;
parameter    ap_ST_fsm_state85 = 186'd19342813113834066795298816;
parameter    ap_ST_fsm_state86 = 186'd38685626227668133590597632;
parameter    ap_ST_fsm_state87 = 186'd77371252455336267181195264;
parameter    ap_ST_fsm_state88 = 186'd154742504910672534362390528;
parameter    ap_ST_fsm_state89 = 186'd309485009821345068724781056;
parameter    ap_ST_fsm_state90 = 186'd618970019642690137449562112;
parameter    ap_ST_fsm_state91 = 186'd1237940039285380274899124224;
parameter    ap_ST_fsm_state92 = 186'd2475880078570760549798248448;
parameter    ap_ST_fsm_state93 = 186'd4951760157141521099596496896;
parameter    ap_ST_fsm_state94 = 186'd9903520314283042199192993792;
parameter    ap_ST_fsm_state95 = 186'd19807040628566084398385987584;
parameter    ap_ST_fsm_state96 = 186'd39614081257132168796771975168;
parameter    ap_ST_fsm_state97 = 186'd79228162514264337593543950336;
parameter    ap_ST_fsm_state98 = 186'd158456325028528675187087900672;
parameter    ap_ST_fsm_state99 = 186'd316912650057057350374175801344;
parameter    ap_ST_fsm_state100 = 186'd633825300114114700748351602688;
parameter    ap_ST_fsm_state101 = 186'd1267650600228229401496703205376;
parameter    ap_ST_fsm_state102 = 186'd2535301200456458802993406410752;
parameter    ap_ST_fsm_state103 = 186'd5070602400912917605986812821504;
parameter    ap_ST_fsm_state104 = 186'd10141204801825835211973625643008;
parameter    ap_ST_fsm_state105 = 186'd20282409603651670423947251286016;
parameter    ap_ST_fsm_state106 = 186'd40564819207303340847894502572032;
parameter    ap_ST_fsm_state107 = 186'd81129638414606681695789005144064;
parameter    ap_ST_fsm_state108 = 186'd162259276829213363391578010288128;
parameter    ap_ST_fsm_state109 = 186'd324518553658426726783156020576256;
parameter    ap_ST_fsm_state110 = 186'd649037107316853453566312041152512;
parameter    ap_ST_fsm_state111 = 186'd1298074214633706907132624082305024;
parameter    ap_ST_fsm_state112 = 186'd2596148429267413814265248164610048;
parameter    ap_ST_fsm_state113 = 186'd5192296858534827628530496329220096;
parameter    ap_ST_fsm_state114 = 186'd10384593717069655257060992658440192;
parameter    ap_ST_fsm_state115 = 186'd20769187434139310514121985316880384;
parameter    ap_ST_fsm_state116 = 186'd41538374868278621028243970633760768;
parameter    ap_ST_fsm_state117 = 186'd83076749736557242056487941267521536;
parameter    ap_ST_fsm_state118 = 186'd166153499473114484112975882535043072;
parameter    ap_ST_fsm_state119 = 186'd332306998946228968225951765070086144;
parameter    ap_ST_fsm_state120 = 186'd664613997892457936451903530140172288;
parameter    ap_ST_fsm_state121 = 186'd1329227995784915872903807060280344576;
parameter    ap_ST_fsm_state122 = 186'd2658455991569831745807614120560689152;
parameter    ap_ST_fsm_state123 = 186'd5316911983139663491615228241121378304;
parameter    ap_ST_fsm_state124 = 186'd10633823966279326983230456482242756608;
parameter    ap_ST_fsm_state125 = 186'd21267647932558653966460912964485513216;
parameter    ap_ST_fsm_state126 = 186'd42535295865117307932921825928971026432;
parameter    ap_ST_fsm_state127 = 186'd85070591730234615865843651857942052864;
parameter    ap_ST_fsm_state128 = 186'd170141183460469231731687303715884105728;
parameter    ap_ST_fsm_state129 = 186'd340282366920938463463374607431768211456;
parameter    ap_ST_fsm_state130 = 186'd680564733841876926926749214863536422912;
parameter    ap_ST_fsm_state131 = 186'd1361129467683753853853498429727072845824;
parameter    ap_ST_fsm_state132 = 186'd2722258935367507707706996859454145691648;
parameter    ap_ST_fsm_state133 = 186'd5444517870735015415413993718908291383296;
parameter    ap_ST_fsm_state134 = 186'd10889035741470030830827987437816582766592;
parameter    ap_ST_fsm_state135 = 186'd21778071482940061661655974875633165533184;
parameter    ap_ST_fsm_state136 = 186'd43556142965880123323311949751266331066368;
parameter    ap_ST_fsm_state137 = 186'd87112285931760246646623899502532662132736;
parameter    ap_ST_fsm_state138 = 186'd174224571863520493293247799005065324265472;
parameter    ap_ST_fsm_state139 = 186'd348449143727040986586495598010130648530944;
parameter    ap_ST_fsm_state140 = 186'd696898287454081973172991196020261297061888;
parameter    ap_ST_fsm_state141 = 186'd1393796574908163946345982392040522594123776;
parameter    ap_ST_fsm_state142 = 186'd2787593149816327892691964784081045188247552;
parameter    ap_ST_fsm_state143 = 186'd5575186299632655785383929568162090376495104;
parameter    ap_ST_fsm_state144 = 186'd11150372599265311570767859136324180752990208;
parameter    ap_ST_fsm_state145 = 186'd22300745198530623141535718272648361505980416;
parameter    ap_ST_fsm_state146 = 186'd44601490397061246283071436545296723011960832;
parameter    ap_ST_fsm_state147 = 186'd89202980794122492566142873090593446023921664;
parameter    ap_ST_fsm_state148 = 186'd178405961588244985132285746181186892047843328;
parameter    ap_ST_fsm_state149 = 186'd356811923176489970264571492362373784095686656;
parameter    ap_ST_fsm_state150 = 186'd713623846352979940529142984724747568191373312;
parameter    ap_ST_fsm_state151 = 186'd1427247692705959881058285969449495136382746624;
parameter    ap_ST_fsm_state152 = 186'd2854495385411919762116571938898990272765493248;
parameter    ap_ST_fsm_state153 = 186'd5708990770823839524233143877797980545530986496;
parameter    ap_ST_fsm_state154 = 186'd11417981541647679048466287755595961091061972992;
parameter    ap_ST_fsm_state155 = 186'd22835963083295358096932575511191922182123945984;
parameter    ap_ST_fsm_state156 = 186'd45671926166590716193865151022383844364247891968;
parameter    ap_ST_fsm_state157 = 186'd91343852333181432387730302044767688728495783936;
parameter    ap_ST_fsm_state158 = 186'd182687704666362864775460604089535377456991567872;
parameter    ap_ST_fsm_state159 = 186'd365375409332725729550921208179070754913983135744;
parameter    ap_ST_fsm_state160 = 186'd730750818665451459101842416358141509827966271488;
parameter    ap_ST_fsm_state161 = 186'd1461501637330902918203684832716283019655932542976;
parameter    ap_ST_fsm_state162 = 186'd2923003274661805836407369665432566039311865085952;
parameter    ap_ST_fsm_pp0_stage0 = 186'd5846006549323611672814739330865132078623730171904;
parameter    ap_ST_fsm_state165 = 186'd11692013098647223345629478661730264157247460343808;
parameter    ap_ST_fsm_pp1_stage0 = 186'd23384026197294446691258957323460528314494920687616;
parameter    ap_ST_fsm_pp1_stage1 = 186'd46768052394588893382517914646921056628989841375232;
parameter    ap_ST_fsm_pp1_stage2 = 186'd93536104789177786765035829293842113257979682750464;
parameter    ap_ST_fsm_pp1_stage3 = 186'd187072209578355573530071658587684226515959365500928;
parameter    ap_ST_fsm_state185 = 186'd374144419156711147060143317175368453031918731001856;
parameter    ap_ST_fsm_state186 = 186'd748288838313422294120286634350736906063837462003712;
parameter    ap_ST_fsm_state187 = 186'd1496577676626844588240573268701473812127674924007424;
parameter    ap_ST_fsm_state188 = 186'd2993155353253689176481146537402947624255349848014848;
parameter    ap_ST_fsm_state189 = 186'd5986310706507378352962293074805895248510699696029696;
parameter    ap_ST_fsm_state190 = 186'd11972621413014756705924586149611790497021399392059392;
parameter    ap_ST_fsm_state191 = 186'd23945242826029513411849172299223580994042798784118784;
parameter    ap_ST_fsm_state192 = 186'd47890485652059026823698344598447161988085597568237568;
parameter    ap_ST_fsm_state193 = 186'd95780971304118053647396689196894323976171195136475136;
parameter    ap_ST_fsm_state194 = 186'd191561942608236107294793378393788647952342390272950272;
parameter    ap_ST_fsm_state195 = 186'd383123885216472214589586756787577295904684780545900544;
parameter    ap_ST_fsm_state196 = 186'd766247770432944429179173513575154591809369561091801088;
parameter    ap_ST_fsm_state197 = 186'd1532495540865888858358347027150309183618739122183602176;
parameter    ap_ST_fsm_state198 = 186'd3064991081731777716716694054300618367237478244367204352;
parameter    ap_ST_fsm_state199 = 186'd6129982163463555433433388108601236734474956488734408704;
parameter    ap_ST_fsm_state200 = 186'd12259964326927110866866776217202473468949912977468817408;
parameter    ap_ST_fsm_state201 = 186'd24519928653854221733733552434404946937899825954937634816;
parameter    ap_ST_fsm_state202 = 186'd49039857307708443467467104868809893875799651909875269632;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] dense_input_input_array_address0;
output   dense_input_input_array_ce0;
input  [31:0] dense_input_input_array_q0;
input  [63:0] dense_input_input_ndim;
input  [63:0] dense_input_input_numel;
output  [2:0] dense_input_input_shape_address0;
output   dense_input_input_shape_ce0;
input  [63:0] dense_input_input_shape_q0;
output  [11:0] activation_3_output_array_address0;
output   activation_3_output_array_ce0;
output   activation_3_output_array_we0;
output  [31:0] activation_3_output_array_d0;
output  [63:0] activation_3_output_ndim;
output   activation_3_output_ndim_ap_vld;
output  [63:0] activation_3_output_numel;
output   activation_3_output_numel_ap_vld;
output  [2:0] activation_3_output_shape_address0;
output   activation_3_output_shape_ce0;
output   activation_3_output_shape_we0;
output  [63:0] activation_3_output_shape_d0;
output  [2:0] activation_3_output_shape_address1;
output   activation_3_output_shape_ce1;
output   activation_3_output_shape_we1;
output  [63:0] activation_3_output_shape_d1;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg activation_3_output_array_ce0;
reg activation_3_output_array_we0;
reg activation_3_output_ndim_ap_vld;
reg activation_3_output_numel_ap_vld;
reg[2:0] activation_3_output_shape_address0;
reg activation_3_output_shape_ce0;
reg activation_3_output_shape_we0;
reg[63:0] activation_3_output_shape_d0;
reg[2:0] activation_3_output_shape_address1;
reg activation_3_output_shape_ce1;
reg activation_3_output_shape_we1;

(* fsm_encoding = "none" *) reg   [185:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
reg   [63:0] dense_output_numel;
wire   [18:0] face_classifier_c_de_address0;
reg    face_classifier_c_de_ce0;
wire   [31:0] face_classifier_c_de_q0;
reg   [63:0] batch_normalization_2;
reg   [63:0] batch_normalization_3;
reg   [63:0] dense_1_output_numel;
reg   [63:0] dense_1_bias_numel;
reg   [63:0] batch_normalization_8;
reg   [63:0] batch_normalization_12;
reg   [0:0] dense_2_output_ndim;
reg   [63:0] dense_2_output_numel;
reg   [63:0] dense_2_kernel_ndim;
reg   [63:0] dense_2_kernel_numel;
reg   [63:0] dense_2_bias_numel;
reg   [11:0] dense_output_array_address0;
reg    dense_output_array_ce0;
reg    dense_output_array_we0;
reg   [31:0] dense_output_array_d0;
wire   [31:0] dense_output_array_q0;
reg   [11:0] dense_output_array_address1;
reg    dense_output_array_ce1;
reg    dense_output_array_we1;
reg   [11:0] batch_normalization_1_address0;
reg    batch_normalization_1_ce0;
reg    batch_normalization_1_we0;
reg   [31:0] batch_normalization_1_d0;
wire   [31:0] batch_normalization_1_q0;
reg   [11:0] batch_normalization_1_address1;
reg    batch_normalization_1_ce1;
reg    batch_normalization_1_we1;
reg   [31:0] batch_normalization_1_d1;
reg    batch_normalization_9_ce0;
wire   [31:0] batch_normalization_9_q0;
reg    batch_normalization_s_ce0;
wire   [31:0] batch_normalization_s_q0;
reg    batch_normalization_10_ce0;
wire   [31:0] batch_normalization_10_q0;
reg    batch_normalization_11_ce0;
wire   [31:0] batch_normalization_11_q0;
reg   [11:0] activation_1_output_s_address0;
reg    activation_1_output_s_ce0;
reg    activation_1_output_s_we0;
wire   [31:0] activation_1_output_s_q0;
reg   [11:0] dropout_2_output_arr_address0;
reg    dropout_2_output_arr_ce0;
reg    dropout_2_output_arr_we0;
wire   [31:0] dropout_2_output_arr_q0;
reg   [11:0] dense_1_output_array_address0;
reg    dense_1_output_array_ce0;
reg    dense_1_output_array_we0;
reg   [31:0] dense_1_output_array_d0;
wire   [31:0] dense_1_output_array_q0;
reg   [11:0] dense_1_output_array_address1;
reg    dense_1_output_array_ce1;
reg    dense_1_output_array_we1;
reg   [2:0] dropout_2_output_sha_address0;
reg    dropout_2_output_sha_ce0;
reg    dropout_2_output_sha_we0;
reg   [63:0] dropout_2_output_sha_d0;
wire   [63:0] dropout_2_output_sha_q0;
reg   [2:0] dropout_2_output_sha_address1;
reg    dropout_2_output_sha_ce1;
reg    dropout_2_output_sha_we1;
reg   [11:0] dense_1_bias_array_address0;
reg    dense_1_bias_array_ce0;
reg    dense_1_bias_array_we0;
reg   [31:0] dense_1_bias_array_d0;
wire   [31:0] dense_1_bias_array_q0;
reg   [11:0] dense_1_bias_array_address1;
reg    dense_1_bias_array_ce1;
reg    dense_1_bias_array_we1;
reg   [31:0] dense_1_bias_array_d1;
reg   [11:0] batch_normalization_7_address0;
reg    batch_normalization_7_ce0;
reg    batch_normalization_7_we0;
reg   [31:0] batch_normalization_7_d0;
wire   [31:0] batch_normalization_7_q0;
reg   [11:0] batch_normalization_7_address1;
reg    batch_normalization_7_ce1;
reg    batch_normalization_7_we1;
reg   [31:0] batch_normalization_7_d1;
reg   [11:0] batch_normalization_6_address0;
reg    batch_normalization_6_ce0;
reg    batch_normalization_6_we0;
reg   [31:0] batch_normalization_6_d0;
wire   [31:0] batch_normalization_6_q0;
reg   [11:0] batch_normalization_6_address1;
reg    batch_normalization_6_ce1;
reg    batch_normalization_6_we1;
reg   [31:0] batch_normalization_6_d1;
reg   [11:0] batch_normalization_13_address0;
reg    batch_normalization_13_ce0;
reg    batch_normalization_13_we0;
reg   [31:0] batch_normalization_13_d0;
wire   [31:0] batch_normalization_13_q0;
reg   [11:0] batch_normalization_13_address1;
reg    batch_normalization_13_ce1;
reg    batch_normalization_13_we1;
reg   [31:0] batch_normalization_13_d1;
reg   [11:0] batch_normalization_5_address0;
reg    batch_normalization_5_ce0;
reg    batch_normalization_5_we0;
reg   [31:0] batch_normalization_5_d0;
wire   [31:0] batch_normalization_5_q0;
reg   [11:0] batch_normalization_5_address1;
reg    batch_normalization_5_ce1;
reg    batch_normalization_5_we1;
reg   [31:0] batch_normalization_5_d1;
reg   [11:0] batch_normalization_4_address0;
reg    batch_normalization_4_ce0;
reg    batch_normalization_4_we0;
reg   [31:0] batch_normalization_4_d0;
wire   [31:0] batch_normalization_4_q0;
reg   [11:0] batch_normalization_4_address1;
reg    batch_normalization_4_ce1;
reg    batch_normalization_4_we1;
reg   [31:0] batch_normalization_4_d1;
reg   [11:0] activation_2_output_s_address0;
reg    activation_2_output_s_ce0;
reg    activation_2_output_s_we0;
wire   [31:0] activation_2_output_s_q0;
reg   [11:0] dropout_3_output_arr_address0;
reg    dropout_3_output_arr_ce0;
reg    dropout_3_output_arr_we0;
wire   [31:0] dropout_3_output_arr_q0;
reg   [11:0] dense_2_output_array_address0;
reg    dense_2_output_array_ce0;
reg    dense_2_output_array_we0;
reg   [31:0] dense_2_output_array_d0;
wire   [31:0] dense_2_output_array_q0;
reg   [11:0] dense_2_output_array_address1;
reg    dense_2_output_array_ce1;
reg    dense_2_output_array_we1;
reg   [31:0] dense_2_output_array_d1;
wire   [31:0] dense_2_output_array_q1;
reg   [2:0] dropout_3_output_sha_address0;
reg    dropout_3_output_sha_ce0;
reg    dropout_3_output_sha_we0;
reg   [63:0] dropout_3_output_sha_d0;
wire   [63:0] dropout_3_output_sha_q0;
reg   [2:0] dropout_3_output_sha_address1;
reg    dropout_3_output_sha_ce1;
reg    dropout_3_output_sha_we1;
reg   [11:0] dense_2_kernel_array_address0;
reg    dense_2_kernel_array_ce0;
reg    dense_2_kernel_array_we0;
reg   [31:0] dense_2_kernel_array_d0;
wire   [31:0] dense_2_kernel_array_q0;
reg   [11:0] dense_2_kernel_array_address1;
reg    dense_2_kernel_array_ce1;
reg    dense_2_kernel_array_we1;
reg   [31:0] dense_2_kernel_array_d1;
reg   [2:0] dense_2_kernel_shape_address0;
reg    dense_2_kernel_shape_ce0;
reg    dense_2_kernel_shape_we0;
reg   [63:0] dense_2_kernel_shape_d0;
wire   [63:0] dense_2_kernel_shape_q0;
reg   [2:0] dense_2_kernel_shape_address1;
reg    dense_2_kernel_shape_ce1;
reg    dense_2_kernel_shape_we1;
wire   [63:0] dense_2_kernel_shape_q1;
reg   [11:0] dense_2_bias_array_address0;
reg    dense_2_bias_array_ce0;
reg    dense_2_bias_array_we0;
reg   [31:0] dense_2_bias_array_d0;
wire   [31:0] dense_2_bias_array_q0;
reg   [11:0] dense_2_bias_array_address1;
reg    dense_2_bias_array_ce1;
reg    dense_2_bias_array_we1;
reg   [31:0] dense_2_bias_array_d1;
reg   [2:0] dense_output_shape_address0;
reg    dense_output_shape_ce0;
reg    dense_output_shape_we0;
reg   [63:0] dense_output_shape_d0;
reg   [2:0] dense_output_shape_address1;
reg    dense_output_shape_ce1;
reg    dense_output_shape_we1;
reg   [2:0] dense_1_output_shape_address0;
reg    dense_1_output_shape_ce0;
reg    dense_1_output_shape_we0;
reg   [63:0] dense_1_output_shape_d0;
reg   [2:0] dense_1_output_shape_address1;
reg    dense_1_output_shape_ce1;
reg    dense_1_output_shape_we1;
reg   [2:0] i_2_reg_2296;
reg   [31:0] xmax1_reg_2307;
reg   [2:0] i_3_reg_2317;
reg   [31:0] sum_reg_2328;
reg   [63:0] reg_2495;
wire    ap_CS_fsm_state145;
wire   [0:0] tmp_73_fu_2713_p2;
wire    ap_CS_fsm_state148;
reg   [63:0] reg_2501;
wire    ap_CS_fsm_state158;
wire   [0:0] tmp_80_fu_2774_p2;
wire    ap_CS_fsm_state200;
reg   [31:0] reg_2506;
wire    ap_CS_fsm_state162;
wire    ap_CS_fsm_pp1_stage1;
reg    ap_enable_reg_pp1_iter0;
wire    ap_block_state167_pp1_stage1_iter0;
wire    ap_block_state171_pp1_stage1_iter1;
wire    ap_block_state175_pp1_stage1_iter2;
wire    ap_block_state179_pp1_stage1_iter3;
wire    ap_block_state183_pp1_stage1_iter4;
wire    ap_block_pp1_stage1_11001;
reg   [0:0] tmp_83_reg_3185;
wire    ap_CS_fsm_state194;
wire   [31:0] grp_fu_2457_p2;
reg   [31:0] reg_2513;
wire    ap_CS_fsm_state197;
wire    ap_CS_fsm_state198;
wire    ap_CS_fsm_state199;
wire   [31:0] grp_fu_2461_p2;
reg   [31:0] reg_2518;
wire    ap_CS_fsm_state50;
wire   [18:0] tmp_57_fu_2529_p2;
reg   [18:0] tmp_57_reg_2962;
wire    ap_CS_fsm_state51;
wire   [63:0] tmp_58_fu_2535_p1;
reg   [63:0] tmp_58_reg_2967;
wire   [0:0] tmp_59_fu_2540_p2;
reg   [0:0] tmp_59_reg_2977;
wire   [18:0] indvarinc_fu_2546_p2;
wire    ap_CS_fsm_state53;
wire   [10:0] indvarinc1_fu_2587_p2;
wire    ap_CS_fsm_state103;
wire   [6:0] indvarinc2_fu_2646_p2;
wire    ap_CS_fsm_state133;
wire    ap_CS_fsm_state135;
reg   [63:0] batch_normalization_14_reg_3010;
wire    ap_CS_fsm_state136;
wire    grp_k2c_batch_norm_fu_2428_ap_idle;
wire    grp_k2c_batch_norm_fu_2428_ap_ready;
wire    grp_k2c_batch_norm_fu_2428_ap_done;
wire   [11:0] i_38_fu_2682_p2;
reg   [11:0] i_38_reg_3021;
wire    ap_CS_fsm_state137;
reg   [11:0] batch_normalization_15_reg_3026;
wire   [0:0] exitcond2_fu_2677_p2;
reg   [63:0] batch_normalization_17_reg_3032;
reg   [31:0] batch_normalization_16_reg_3037;
wire    ap_CS_fsm_state138;
wire   [63:0] tmp_69_fu_2692_p1;
reg   [63:0] tmp_69_reg_3042;
wire    ap_CS_fsm_state141;
wire   [11:0] j_7_fu_2702_p2;
reg   [11:0] j_7_reg_3050;
wire   [0:0] tmp_70_fu_2697_p2;
wire   [63:0] tmp_72_fu_2708_p1;
reg   [63:0] tmp_72_reg_3060;
wire   [11:0] j_9_fu_2718_p2;
reg   [11:0] j_9_reg_3068;
reg   [63:0] batch_normalization_20_reg_3083;
wire    ap_CS_fsm_state149;
wire   [11:0] i_39_fu_2743_p2;
reg   [11:0] i_39_reg_3094;
wire    ap_CS_fsm_state150;
reg   [11:0] batch_normalization_21_reg_3099;
wire   [0:0] exitcond_fu_2738_p2;
reg   [63:0] batch_normalization_23_reg_3105;
reg   [31:0] batch_normalization_22_reg_3110;
wire    ap_CS_fsm_state151;
wire   [63:0] tmp_76_fu_2753_p1;
reg   [63:0] tmp_76_reg_3115;
wire    ap_CS_fsm_state154;
wire   [11:0] j_fu_2763_p2;
reg   [11:0] j_reg_3123;
wire   [0:0] tmp_77_fu_2758_p2;
wire   [63:0] tmp_79_fu_2769_p1;
reg   [63:0] tmp_79_reg_3133;
wire   [11:0] j_3_fu_2779_p2;
reg   [11:0] j_3_reg_3141;
wire   [0:0] exitcond1_fu_2800_p2;
reg   [0:0] exitcond1_reg_3166;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_block_state163_pp0_stage0_iter0;
wire    ap_block_state164_pp0_stage0_iter1;
wire    ap_block_pp0_stage0_11001;
wire   [2:0] i_40_fu_2811_p2;
reg    ap_enable_reg_pp0_iter0;
wire   [31:0] xmax_1_fu_2901_p3;
reg    ap_enable_reg_pp0_iter1;
wire   [0:0] tmp_83_fu_2909_p2;
wire    ap_CS_fsm_pp1_stage0;
wire    ap_block_state166_pp1_stage0_iter0;
wire    ap_block_state170_pp1_stage0_iter1;
wire    ap_block_state174_pp1_stage0_iter2;
wire    ap_block_state178_pp1_stage0_iter3;
wire    ap_block_state182_pp1_stage0_iter4;
wire    ap_block_pp1_stage0_11001;
reg   [0:0] tmp_83_reg_3185_pp1_iter1_reg;
reg   [0:0] tmp_83_reg_3185_pp1_iter2_reg;
reg   [0:0] tmp_83_reg_3185_pp1_iter3_reg;
reg   [0:0] tmp_83_reg_3185_pp1_iter4_reg;
wire   [2:0] i_41_fu_2915_p2;
reg   [2:0] i_41_reg_3189;
reg   [11:0] dense_2_output_array_2_reg_3194;
reg   [11:0] dense_2_output_array_2_reg_3194_pp1_iter1_reg;
reg   [11:0] dense_2_output_array_2_reg_3194_pp1_iter2_reg;
reg   [11:0] dense_2_output_array_2_reg_3194_pp1_iter3_reg;
wire   [31:0] grp_fu_2451_p2;
reg   [31:0] tmp_86_reg_3200;
reg    ap_enable_reg_pp1_iter1;
wire   [31:0] grp_fu_2477_p2;
reg   [31:0] tmp_87_reg_3205;
wire    ap_CS_fsm_pp1_stage2;
reg    ap_enable_reg_pp1_iter4;
wire    ap_block_state168_pp1_stage2_iter0;
wire    ap_block_state172_pp1_stage2_iter1;
wire    ap_block_state176_pp1_stage2_iter2;
wire    ap_block_state180_pp1_stage2_iter3;
wire    ap_block_state184_pp1_stage2_iter4;
wire    ap_block_pp1_stage2_11001;
wire   [31:0] grp_fu_2465_p2;
reg   [31:0] sum_1_reg_3215;
reg   [31:0] dense_2_output_array_5_reg_3221;
reg   [31:0] dense_2_output_array_6_reg_3226;
wire    ap_CS_fsm_state195;
reg   [31:0] dense_2_output_array_7_reg_3231;
reg   [31:0] dense_2_output_array_8_reg_3236;
wire    ap_CS_fsm_state196;
reg   [31:0] dense_2_output_array_9_reg_3241;
wire  signed [63:0] tmp_88_fu_2935_p1;
reg  signed [63:0] tmp_88_reg_3246;
wire    ap_CS_fsm_state201;
wire   [31:0] j_5_fu_2946_p2;
reg   [31:0] j_5_reg_3254;
wire   [0:0] tmp_89_fu_2940_p2;
wire    ap_block_pp0_stage0_subdone;
reg    ap_condition_pp0_exit_iter0_state163;
wire    ap_CS_fsm_state165;
wire    ap_block_pp1_stage0_subdone;
reg    ap_condition_pp1_exit_iter0_state166;
wire    ap_block_state169_pp1_stage3_iter0;
wire    ap_block_state173_pp1_stage3_iter1;
wire    ap_block_state177_pp1_stage3_iter2;
wire    ap_block_state181_pp1_stage3_iter3;
wire    ap_block_pp1_stage3_subdone;
wire    ap_CS_fsm_pp1_stage3;
wire    ap_block_pp1_stage2_subdone;
reg    ap_enable_reg_pp1_iter2;
reg    ap_enable_reg_pp1_iter3;
reg   [18:0] dense_kernel_array_address0;
reg    dense_kernel_array_ce0;
reg    dense_kernel_array_we0;
wire   [31:0] dense_kernel_array_q0;
reg   [18:0] dense_fwork_address0;
reg    dense_fwork_ce0;
reg    dense_fwork_we0;
reg   [31:0] dense_fwork_d0;
wire   [31:0] dense_fwork_q0;
reg    dense_fwork_ce1;
wire   [31:0] dense_fwork_q1;
reg   [10:0] dense_1_fwork_address0;
reg    dense_1_fwork_ce0;
reg    dense_1_fwork_we0;
reg   [31:0] dense_1_fwork_d0;
wire   [31:0] dense_1_fwork_q0;
reg    dense_1_fwork_ce1;
wire   [31:0] dense_1_fwork_q1;
reg   [6:0] dense_2_fwork_address0;
reg    dense_2_fwork_ce0;
reg    dense_2_fwork_we0;
reg   [31:0] dense_2_fwork_d0;
wire   [31:0] dense_2_fwork_q0;
reg    dense_2_fwork_ce1;
wire   [31:0] dense_2_fwork_q1;
wire    grp_k2c_dense2_fu_2351_ap_start;
wire    grp_k2c_dense2_fu_2351_ap_done;
wire    grp_k2c_dense2_fu_2351_ap_idle;
wire    grp_k2c_dense2_fu_2351_ap_ready;
wire   [11:0] grp_k2c_dense2_fu_2351_output_array_address0;
wire    grp_k2c_dense2_fu_2351_output_array_ce0;
wire    grp_k2c_dense2_fu_2351_output_array_we0;
wire   [31:0] grp_k2c_dense2_fu_2351_output_array_d0;
wire   [11:0] grp_k2c_dense2_fu_2351_input_array_address0;
wire    grp_k2c_dense2_fu_2351_input_array_ce0;
wire   [2:0] grp_k2c_dense2_fu_2351_input_shape_address0;
wire    grp_k2c_dense2_fu_2351_input_shape_ce0;
wire   [11:0] grp_k2c_dense2_fu_2351_kernel_array_address0;
wire    grp_k2c_dense2_fu_2351_kernel_array_ce0;
wire   [2:0] grp_k2c_dense2_fu_2351_kernel_shape_address0;
wire    grp_k2c_dense2_fu_2351_kernel_shape_ce0;
wire   [2:0] grp_k2c_dense2_fu_2351_kernel_shape_address1;
wire    grp_k2c_dense2_fu_2351_kernel_shape_ce1;
wire   [11:0] grp_k2c_dense2_fu_2351_bias_array_address0;
wire    grp_k2c_dense2_fu_2351_bias_array_ce0;
wire   [6:0] grp_k2c_dense2_fu_2351_fwork_address0;
wire    grp_k2c_dense2_fu_2351_fwork_ce0;
wire    grp_k2c_dense2_fu_2351_fwork_we0;
wire   [31:0] grp_k2c_dense2_fu_2351_fwork_d0;
wire   [6:0] grp_k2c_dense2_fu_2351_fwork_address1;
wire    grp_k2c_dense2_fu_2351_fwork_ce1;
wire    grp_k2c_dense_fu_2374_ap_start;
wire    grp_k2c_dense_fu_2374_ap_done;
wire    grp_k2c_dense_fu_2374_ap_idle;
wire    grp_k2c_dense_fu_2374_ap_ready;
wire   [11:0] grp_k2c_dense_fu_2374_input_array_address0;
wire    grp_k2c_dense_fu_2374_input_array_ce0;
wire   [2:0] grp_k2c_dense_fu_2374_input_shape_address0;
wire    grp_k2c_dense_fu_2374_input_shape_ce0;
wire   [18:0] grp_k2c_dense_fu_2374_kernel_array_address0;
wire    grp_k2c_dense_fu_2374_kernel_array_ce0;
wire   [18:0] grp_k2c_dense_fu_2374_fwork_address0;
wire    grp_k2c_dense_fu_2374_fwork_ce0;
wire    grp_k2c_dense_fu_2374_fwork_we0;
wire   [31:0] grp_k2c_dense_fu_2374_fwork_d0;
wire   [18:0] grp_k2c_dense_fu_2374_fwork_address1;
wire    grp_k2c_dense_fu_2374_fwork_ce1;
wire   [11:0] grp_k2c_dense_fu_2374_dense_output_array_address0;
wire    grp_k2c_dense_fu_2374_dense_output_array_ce0;
wire    grp_k2c_dense_fu_2374_dense_output_array_we0;
wire   [31:0] grp_k2c_dense_fu_2374_dense_output_array_d0;
wire    grp_k2c_dense2_1_fu_2394_ap_start;
wire    grp_k2c_dense2_1_fu_2394_ap_done;
wire    grp_k2c_dense2_1_fu_2394_ap_idle;
wire    grp_k2c_dense2_1_fu_2394_ap_ready;
wire   [11:0] grp_k2c_dense2_1_fu_2394_output_array_address0;
wire    grp_k2c_dense2_1_fu_2394_output_array_ce0;
wire    grp_k2c_dense2_1_fu_2394_output_array_we0;
wire   [31:0] grp_k2c_dense2_1_fu_2394_output_array_d0;
wire   [11:0] grp_k2c_dense2_1_fu_2394_input_array_address0;
wire    grp_k2c_dense2_1_fu_2394_input_array_ce0;
wire   [2:0] grp_k2c_dense2_1_fu_2394_input_shape_address0;
wire    grp_k2c_dense2_1_fu_2394_input_shape_ce0;
wire   [11:0] grp_k2c_dense2_1_fu_2394_bias_array_address0;
wire    grp_k2c_dense2_1_fu_2394_bias_array_ce0;
wire   [10:0] grp_k2c_dense2_1_fu_2394_fwork_address0;
wire    grp_k2c_dense2_1_fu_2394_fwork_ce0;
wire    grp_k2c_dense2_1_fu_2394_fwork_we0;
wire   [31:0] grp_k2c_dense2_1_fu_2394_fwork_d0;
wire   [10:0] grp_k2c_dense2_1_fu_2394_fwork_address1;
wire    grp_k2c_dense2_1_fu_2394_fwork_ce1;
wire    grp_generic_tanh_float_s_fu_2415_ap_start;
wire    grp_generic_tanh_float_s_fu_2415_ap_done;
wire    grp_generic_tanh_float_s_fu_2415_ap_idle;
wire    grp_generic_tanh_float_s_fu_2415_ap_ready;
reg   [31:0] grp_generic_tanh_float_s_fu_2415_t_in;
wire   [31:0] grp_generic_tanh_float_s_fu_2415_ap_return;
wire    grp_k2c_batch_norm_fu_2428_ap_start;
wire   [11:0] grp_k2c_batch_norm_fu_2428_outputs_array_address0;
wire    grp_k2c_batch_norm_fu_2428_outputs_array_ce0;
wire    grp_k2c_batch_norm_fu_2428_outputs_array_we0;
wire   [31:0] grp_k2c_batch_norm_fu_2428_outputs_array_d0;
wire   [11:0] grp_k2c_batch_norm_fu_2428_inputs_array_address0;
wire    grp_k2c_batch_norm_fu_2428_inputs_array_ce0;
reg   [31:0] grp_k2c_batch_norm_fu_2428_inputs_array_q0;
reg   [63:0] grp_k2c_batch_norm_fu_2428_inputs_numel_read;
wire   [11:0] grp_k2c_batch_norm_fu_2428_mean_array_address0;
wire    grp_k2c_batch_norm_fu_2428_mean_array_ce0;
reg   [31:0] grp_k2c_batch_norm_fu_2428_mean_array_q0;
wire   [11:0] grp_k2c_batch_norm_fu_2428_stdev_array_address0;
wire    grp_k2c_batch_norm_fu_2428_stdev_array_ce0;
reg   [31:0] grp_k2c_batch_norm_fu_2428_stdev_array_q0;
wire   [11:0] grp_k2c_batch_norm_fu_2428_gamma_array_address0;
wire    grp_k2c_batch_norm_fu_2428_gamma_array_ce0;
reg   [31:0] grp_k2c_batch_norm_fu_2428_gamma_array_q0;
wire   [11:0] grp_k2c_batch_norm_fu_2428_beta_array_address0;
wire    grp_k2c_batch_norm_fu_2428_beta_array_ce0;
reg   [31:0] grp_k2c_batch_norm_fu_2428_beta_array_q0;
reg   [18:0] tmp_s_reg_2186;
wire    ap_CS_fsm_state52;
reg   [18:0] invdar_reg_2197;
wire   [0:0] tmp_64_fu_2557_p2;
reg   [10:0] invdar1_reg_2208;
wire   [0:0] tmp_66_fu_2598_p2;
wire    ap_CS_fsm_state102;
reg   [6:0] invdar2_reg_2219;
wire   [0:0] tmp_68_fu_2657_p2;
wire    ap_CS_fsm_state132;
reg   [11:0] i_reg_2230;
wire    ap_CS_fsm_state140;
reg   [11:0] j_s_reg_2241;
wire    ap_CS_fsm_state142;
reg   [11:0] j_8_reg_2252;
wire    ap_CS_fsm_state146;
wire    ap_CS_fsm_state144;
reg   [11:0] i_1_reg_2263;
wire    ap_CS_fsm_state153;
reg   [11:0] j_1_reg_2274;
wire    ap_CS_fsm_state155;
reg   [11:0] j_2_reg_2285;
wire    ap_CS_fsm_state159;
wire    ap_CS_fsm_state157;
wire    ap_block_pp0_stage0;
reg   [2:0] ap_phi_mux_i_3_phi_fu_2321_p4;
wire    ap_block_pp1_stage0;
reg  signed [31:0] j_4_reg_2340;
wire    ap_CS_fsm_state202;
reg    grp_k2c_dense2_fu_2351_ap_start_reg;
wire    ap_CS_fsm_state160;
reg    grp_k2c_dense_fu_2374_ap_start_reg;
wire    ap_CS_fsm_state134;
reg    grp_k2c_dense2_1_fu_2394_ap_start_reg;
wire    ap_CS_fsm_state147;
reg    grp_generic_tanh_float_s_fu_2415_ap_start_reg;
wire    ap_CS_fsm_state139;
wire    ap_CS_fsm_state152;
reg    grp_k2c_batch_norm_fu_2428_ap_start_reg;
wire   [63:0] tmp_63_fu_2552_p1;
wire   [63:0] tmp_65_fu_2593_p1;
wire   [63:0] tmp_67_fu_2652_p1;
wire   [63:0] i_cast_fu_2672_p1;
wire   [63:0] i_1_cast_fu_2733_p1;
wire   [63:0] i_2_cast4_fu_2806_p1;
wire   [63:0] i_3_cast3_fu_2921_p1;
wire    ap_CS_fsm_state2;
wire    ap_CS_fsm_state3;
wire    ap_CS_fsm_state4;
wire    ap_CS_fsm_state5;
wire    ap_CS_fsm_state6;
wire    ap_CS_fsm_state7;
wire    ap_CS_fsm_state8;
wire    ap_CS_fsm_state9;
wire    ap_CS_fsm_state10;
wire    ap_CS_fsm_state11;
wire    ap_CS_fsm_state12;
wire    ap_CS_fsm_state13;
wire    ap_CS_fsm_state14;
wire    ap_CS_fsm_state15;
wire    ap_CS_fsm_state16;
wire    ap_CS_fsm_state17;
wire    ap_CS_fsm_state18;
wire    ap_CS_fsm_state19;
wire    ap_CS_fsm_state20;
wire    ap_CS_fsm_state21;
wire    ap_CS_fsm_state22;
wire    ap_CS_fsm_state23;
wire    ap_CS_fsm_state24;
wire    ap_CS_fsm_state25;
wire    ap_CS_fsm_state26;
wire    ap_CS_fsm_state27;
wire    ap_CS_fsm_state28;
wire    ap_CS_fsm_state29;
wire    ap_CS_fsm_state30;
wire    ap_CS_fsm_state31;
wire    ap_CS_fsm_state32;
wire    ap_CS_fsm_state33;
wire    ap_CS_fsm_state34;
wire    ap_CS_fsm_state35;
wire    ap_CS_fsm_state36;
wire    ap_CS_fsm_state37;
wire    ap_CS_fsm_state38;
wire    ap_CS_fsm_state39;
wire    ap_CS_fsm_state40;
wire    ap_CS_fsm_state41;
wire    ap_CS_fsm_state42;
wire    ap_CS_fsm_state43;
wire    ap_CS_fsm_state44;
wire    ap_CS_fsm_state45;
wire    ap_CS_fsm_state46;
wire    ap_CS_fsm_state47;
wire    ap_CS_fsm_state48;
wire    ap_CS_fsm_state49;
wire    ap_CS_fsm_state54;
wire    ap_CS_fsm_state55;
wire    ap_CS_fsm_state56;
wire    ap_CS_fsm_state57;
wire    ap_CS_fsm_state58;
wire    ap_CS_fsm_state59;
wire    ap_CS_fsm_state60;
wire    ap_CS_fsm_state61;
wire    ap_CS_fsm_state62;
wire    ap_CS_fsm_state63;
wire    ap_CS_fsm_state64;
wire    ap_CS_fsm_state65;
wire    ap_CS_fsm_state66;
wire    ap_CS_fsm_state67;
wire    ap_CS_fsm_state68;
wire    ap_CS_fsm_state69;
wire    ap_CS_fsm_state70;
wire    ap_CS_fsm_state71;
wire    ap_CS_fsm_state72;
wire    ap_CS_fsm_state73;
wire    ap_CS_fsm_state74;
wire    ap_CS_fsm_state75;
wire    ap_CS_fsm_state76;
wire    ap_CS_fsm_state77;
wire    ap_CS_fsm_state78;
wire    ap_CS_fsm_state79;
wire    ap_CS_fsm_state80;
wire    ap_CS_fsm_state81;
wire    ap_CS_fsm_state82;
wire    ap_CS_fsm_state83;
wire    ap_CS_fsm_state84;
wire    ap_CS_fsm_state85;
wire    ap_CS_fsm_state86;
wire    ap_CS_fsm_state87;
wire    ap_CS_fsm_state88;
wire    ap_CS_fsm_state89;
wire    ap_CS_fsm_state90;
wire    ap_CS_fsm_state91;
wire    ap_CS_fsm_state92;
wire    ap_CS_fsm_state93;
wire    ap_CS_fsm_state94;
wire    ap_CS_fsm_state95;
wire    ap_CS_fsm_state96;
wire    ap_CS_fsm_state97;
wire    ap_CS_fsm_state98;
wire    ap_CS_fsm_state99;
wire    ap_CS_fsm_state100;
wire    ap_CS_fsm_state101;
wire    ap_CS_fsm_state104;
wire    ap_CS_fsm_state105;
wire    ap_CS_fsm_state106;
wire    ap_CS_fsm_state107;
wire    ap_CS_fsm_state108;
wire    ap_CS_fsm_state109;
wire    ap_CS_fsm_state110;
wire    ap_CS_fsm_state111;
wire    ap_CS_fsm_state112;
wire    ap_CS_fsm_state113;
wire    ap_CS_fsm_state114;
wire    ap_CS_fsm_state115;
wire    ap_CS_fsm_state116;
wire    ap_CS_fsm_state117;
wire    ap_CS_fsm_state118;
wire    ap_CS_fsm_state119;
wire    ap_CS_fsm_state120;
wire    ap_CS_fsm_state121;
wire    ap_CS_fsm_state122;
wire    ap_CS_fsm_state123;
wire    ap_CS_fsm_state124;
wire    ap_CS_fsm_state125;
wire    ap_CS_fsm_state126;
wire    ap_CS_fsm_state127;
wire    ap_CS_fsm_state128;
wire    ap_CS_fsm_state129;
wire    ap_CS_fsm_state130;
wire    ap_CS_fsm_state131;
wire    ap_CS_fsm_state161;
wire    ap_block_pp1_stage1;
wire    ap_CS_fsm_state193;
wire    ap_CS_fsm_state143;
wire    ap_CS_fsm_state156;
reg   [31:0] grp_fu_2451_p0;
reg   [31:0] grp_fu_2451_p1;
wire    ap_block_pp1_stage2;
wire    ap_block_pp1_stage3;
reg   [31:0] grp_fu_2457_p0;
reg   [31:0] grp_fu_2461_p0;
wire    ap_CS_fsm_state185;
wire   [31:0] xmax_2_to_int_fu_2817_p1;
wire   [31:0] xmax1_to_int_fu_2835_p1;
wire   [7:0] tmp_15_fu_2821_p4;
wire   [22:0] tmp_91_fu_2831_p1;
wire   [0:0] notrhs_fu_2859_p2;
wire   [0:0] notlhs_fu_2853_p2;
wire   [7:0] tmp_17_fu_2839_p4;
wire   [22:0] tmp_92_fu_2849_p1;
wire   [0:0] notrhs1_fu_2877_p2;
wire   [0:0] notlhs1_fu_2871_p2;
wire   [0:0] tmp_19_fu_2865_p2;
wire   [0:0] tmp_20_fu_2883_p2;
wire   [0:0] tmp_21_fu_2889_p2;
wire   [0:0] tmp_22_fu_2471_p2;
wire   [0:0] tmp_23_fu_2895_p2;
reg   [1:0] grp_fu_2451_opcode;
wire    ap_block_pp1_stage3_00001;
wire    ap_block_pp1_stage2_00001;
wire    ap_block_pp0_stage0_00001;
reg   [185:0] ap_NS_fsm;
wire    ap_block_pp1_stage1_subdone;
wire    ap_block_pp1_stage3_11001;
reg    ap_idle_pp0;
wire    ap_enable_pp0;
reg    ap_idle_pp1;
wire    ap_enable_pp1;

// power-on initialization
initial begin
#0 ap_CS_fsm = 186'd1;
#0 dense_output_numel = 64'd0;
#0 batch_normalization_2 = 64'd0;
#0 batch_normalization_3 = 64'd0;
#0 dense_1_output_numel = 64'd0;
#0 dense_1_bias_numel = 64'd0;
#0 batch_normalization_8 = 64'd0;
#0 batch_normalization_12 = 64'd0;
#0 dense_2_output_ndim = 1'd0;
#0 dense_2_output_numel = 64'd0;
#0 dense_2_kernel_ndim = 64'd0;
#0 dense_2_kernel_numel = 64'd0;
#0 dense_2_bias_numel = 64'd0;
#0 ap_enable_reg_pp1_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter0 = 1'b0;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter1 = 1'b0;
#0 ap_enable_reg_pp1_iter4 = 1'b0;
#0 ap_enable_reg_pp1_iter2 = 1'b0;
#0 ap_enable_reg_pp1_iter3 = 1'b0;
#0 grp_k2c_dense2_fu_2351_ap_start_reg = 1'b0;
#0 grp_k2c_dense_fu_2374_ap_start_reg = 1'b0;
#0 grp_k2c_dense2_1_fu_2394_ap_start_reg = 1'b0;
#0 grp_generic_tanh_float_s_fu_2415_ap_start_reg = 1'b0;
#0 grp_k2c_batch_norm_fu_2428_ap_start_reg = 1'b0;
end

face_classifier_cEe0 #(
    .DataWidth( 32 ),
    .AddressRange( 262200 ),
    .AddressWidth( 19 ))
face_classifier_c_de_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(face_classifier_c_de_address0),
    .ce0(face_classifier_c_de_ce0),
    .q0(face_classifier_c_de_q0)
);

face_classifier_cFfa #(
    .DataWidth( 32 ),
    .AddressRange( 2622 ),
    .AddressWidth( 12 ))
dense_output_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_output_array_address0),
    .ce0(dense_output_array_ce0),
    .we0(dense_output_array_we0),
    .d0(dense_output_array_d0),
    .q0(dense_output_array_q0),
    .address1(dense_output_array_address1),
    .ce1(dense_output_array_ce1),
    .we1(dense_output_array_we1),
    .d1(32'd0)
);

face_classifier_cFfa #(
    .DataWidth( 32 ),
    .AddressRange( 2622 ),
    .AddressWidth( 12 ))
batch_normalization_1_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(batch_normalization_1_address0),
    .ce0(batch_normalization_1_ce0),
    .we0(batch_normalization_1_we0),
    .d0(batch_normalization_1_d0),
    .q0(batch_normalization_1_q0),
    .address1(batch_normalization_1_address1),
    .ce1(batch_normalization_1_ce1),
    .we1(batch_normalization_1_we1),
    .d1(batch_normalization_1_d1)
);

face_classifier_cHfu #(
    .DataWidth( 32 ),
    .AddressRange( 2622 ),
    .AddressWidth( 12 ))
batch_normalization_9_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_k2c_batch_norm_fu_2428_mean_array_address0),
    .ce0(batch_normalization_9_ce0),
    .q0(batch_normalization_9_q0)
);

face_classifier_cIfE #(
    .DataWidth( 32 ),
    .AddressRange( 2622 ),
    .AddressWidth( 12 ))
batch_normalization_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_k2c_batch_norm_fu_2428_stdev_array_address0),
    .ce0(batch_normalization_s_ce0),
    .q0(batch_normalization_s_q0)
);

face_classifier_cJfO #(
    .DataWidth( 32 ),
    .AddressRange( 2622 ),
    .AddressWidth( 12 ))
batch_normalization_10_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_k2c_batch_norm_fu_2428_gamma_array_address0),
    .ce0(batch_normalization_10_ce0),
    .q0(batch_normalization_10_q0)
);

face_classifier_cKfY #(
    .DataWidth( 32 ),
    .AddressRange( 2622 ),
    .AddressWidth( 12 ))
batch_normalization_11_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(grp_k2c_batch_norm_fu_2428_beta_array_address0),
    .ce0(batch_normalization_11_ce0),
    .q0(batch_normalization_11_q0)
);

face_classifier_cLf8 #(
    .DataWidth( 32 ),
    .AddressRange( 2622 ),
    .AddressWidth( 12 ))
activation_1_output_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(activation_1_output_s_address0),
    .ce0(activation_1_output_s_ce0),
    .we0(activation_1_output_s_we0),
    .d0(batch_normalization_1_q0),
    .q0(activation_1_output_s_q0)
);

face_classifier_cLf8 #(
    .DataWidth( 32 ),
    .AddressRange( 2622 ),
    .AddressWidth( 12 ))
dropout_2_output_arr_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dropout_2_output_arr_address0),
    .ce0(dropout_2_output_arr_ce0),
    .we0(dropout_2_output_arr_we0),
    .d0(activation_1_output_s_q0),
    .q0(dropout_2_output_arr_q0)
);

face_classifier_cFfa #(
    .DataWidth( 32 ),
    .AddressRange( 2622 ),
    .AddressWidth( 12 ))
dense_1_output_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_output_array_address0),
    .ce0(dense_1_output_array_ce0),
    .we0(dense_1_output_array_we0),
    .d0(dense_1_output_array_d0),
    .q0(dense_1_output_array_q0),
    .address1(dense_1_output_array_address1),
    .ce1(dense_1_output_array_ce1),
    .we1(dense_1_output_array_we1),
    .d1(32'd0)
);

face_classifier_cOgC #(
    .DataWidth( 64 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
dropout_2_output_sha_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dropout_2_output_sha_address0),
    .ce0(dropout_2_output_sha_ce0),
    .we0(dropout_2_output_sha_we0),
    .d0(dropout_2_output_sha_d0),
    .q0(dropout_2_output_sha_q0),
    .address1(dropout_2_output_sha_address1),
    .ce1(dropout_2_output_sha_ce1),
    .we1(dropout_2_output_sha_we1),
    .d1(64'd1)
);

face_classifier_cFfa #(
    .DataWidth( 32 ),
    .AddressRange( 2622 ),
    .AddressWidth( 12 ))
dense_1_bias_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_bias_array_address0),
    .ce0(dense_1_bias_array_ce0),
    .we0(dense_1_bias_array_we0),
    .d0(dense_1_bias_array_d0),
    .q0(dense_1_bias_array_q0),
    .address1(dense_1_bias_array_address1),
    .ce1(dense_1_bias_array_ce1),
    .we1(dense_1_bias_array_we1),
    .d1(dense_1_bias_array_d1)
);

face_classifier_cFfa #(
    .DataWidth( 32 ),
    .AddressRange( 2622 ),
    .AddressWidth( 12 ))
batch_normalization_7_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(batch_normalization_7_address0),
    .ce0(batch_normalization_7_ce0),
    .we0(batch_normalization_7_we0),
    .d0(batch_normalization_7_d0),
    .q0(batch_normalization_7_q0),
    .address1(batch_normalization_7_address1),
    .ce1(batch_normalization_7_ce1),
    .we1(batch_normalization_7_we1),
    .d1(batch_normalization_7_d1)
);

face_classifier_cFfa #(
    .DataWidth( 32 ),
    .AddressRange( 2622 ),
    .AddressWidth( 12 ))
batch_normalization_6_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(batch_normalization_6_address0),
    .ce0(batch_normalization_6_ce0),
    .we0(batch_normalization_6_we0),
    .d0(batch_normalization_6_d0),
    .q0(batch_normalization_6_q0),
    .address1(batch_normalization_6_address1),
    .ce1(batch_normalization_6_ce1),
    .we1(batch_normalization_6_we1),
    .d1(batch_normalization_6_d1)
);

face_classifier_cFfa #(
    .DataWidth( 32 ),
    .AddressRange( 2622 ),
    .AddressWidth( 12 ))
batch_normalization_13_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(batch_normalization_13_address0),
    .ce0(batch_normalization_13_ce0),
    .we0(batch_normalization_13_we0),
    .d0(batch_normalization_13_d0),
    .q0(batch_normalization_13_q0),
    .address1(batch_normalization_13_address1),
    .ce1(batch_normalization_13_ce1),
    .we1(batch_normalization_13_we1),
    .d1(batch_normalization_13_d1)
);

face_classifier_cFfa #(
    .DataWidth( 32 ),
    .AddressRange( 2622 ),
    .AddressWidth( 12 ))
batch_normalization_5_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(batch_normalization_5_address0),
    .ce0(batch_normalization_5_ce0),
    .we0(batch_normalization_5_we0),
    .d0(batch_normalization_5_d0),
    .q0(batch_normalization_5_q0),
    .address1(batch_normalization_5_address1),
    .ce1(batch_normalization_5_ce1),
    .we1(batch_normalization_5_we1),
    .d1(batch_normalization_5_d1)
);

face_classifier_cFfa #(
    .DataWidth( 32 ),
    .AddressRange( 2622 ),
    .AddressWidth( 12 ))
batch_normalization_4_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(batch_normalization_4_address0),
    .ce0(batch_normalization_4_ce0),
    .we0(batch_normalization_4_we0),
    .d0(batch_normalization_4_d0),
    .q0(batch_normalization_4_q0),
    .address1(batch_normalization_4_address1),
    .ce1(batch_normalization_4_ce1),
    .we1(batch_normalization_4_we1),
    .d1(batch_normalization_4_d1)
);

face_classifier_cLf8 #(
    .DataWidth( 32 ),
    .AddressRange( 2622 ),
    .AddressWidth( 12 ))
activation_2_output_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(activation_2_output_s_address0),
    .ce0(activation_2_output_s_ce0),
    .we0(activation_2_output_s_we0),
    .d0(batch_normalization_7_q0),
    .q0(activation_2_output_s_q0)
);

face_classifier_cLf8 #(
    .DataWidth( 32 ),
    .AddressRange( 2622 ),
    .AddressWidth( 12 ))
dropout_3_output_arr_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dropout_3_output_arr_address0),
    .ce0(dropout_3_output_arr_ce0),
    .we0(dropout_3_output_arr_we0),
    .d0(activation_2_output_s_q0),
    .q0(dropout_3_output_arr_q0)
);

face_classifier_cXh4 #(
    .DataWidth( 32 ),
    .AddressRange( 2622 ),
    .AddressWidth( 12 ))
dense_2_output_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_2_output_array_address0),
    .ce0(dense_2_output_array_ce0),
    .we0(dense_2_output_array_we0),
    .d0(dense_2_output_array_d0),
    .q0(dense_2_output_array_q0),
    .address1(dense_2_output_array_address1),
    .ce1(dense_2_output_array_ce1),
    .we1(dense_2_output_array_we1),
    .d1(dense_2_output_array_d1),
    .q1(dense_2_output_array_q1)
);

face_classifier_cOgC #(
    .DataWidth( 64 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
dropout_3_output_sha_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dropout_3_output_sha_address0),
    .ce0(dropout_3_output_sha_ce0),
    .we0(dropout_3_output_sha_we0),
    .d0(dropout_3_output_sha_d0),
    .q0(dropout_3_output_sha_q0),
    .address1(dropout_3_output_sha_address1),
    .ce1(dropout_3_output_sha_ce1),
    .we1(dropout_3_output_sha_we1),
    .d1(64'd1)
);

face_classifier_cFfa #(
    .DataWidth( 32 ),
    .AddressRange( 2622 ),
    .AddressWidth( 12 ))
dense_2_kernel_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_2_kernel_array_address0),
    .ce0(dense_2_kernel_array_ce0),
    .we0(dense_2_kernel_array_we0),
    .d0(dense_2_kernel_array_d0),
    .q0(dense_2_kernel_array_q0),
    .address1(dense_2_kernel_array_address1),
    .ce1(dense_2_kernel_array_ce1),
    .we1(dense_2_kernel_array_we1),
    .d1(dense_2_kernel_array_d1)
);

face_classifier_c0iy #(
    .DataWidth( 64 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
dense_2_kernel_shape_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_2_kernel_shape_address0),
    .ce0(dense_2_kernel_shape_ce0),
    .we0(dense_2_kernel_shape_we0),
    .d0(dense_2_kernel_shape_d0),
    .q0(dense_2_kernel_shape_q0),
    .address1(dense_2_kernel_shape_address1),
    .ce1(dense_2_kernel_shape_ce1),
    .we1(dense_2_kernel_shape_we1),
    .d1(64'd1),
    .q1(dense_2_kernel_shape_q1)
);

face_classifier_cFfa #(
    .DataWidth( 32 ),
    .AddressRange( 2622 ),
    .AddressWidth( 12 ))
dense_2_bias_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_2_bias_array_address0),
    .ce0(dense_2_bias_array_ce0),
    .we0(dense_2_bias_array_we0),
    .d0(dense_2_bias_array_d0),
    .q0(dense_2_bias_array_q0),
    .address1(dense_2_bias_array_address1),
    .ce1(dense_2_bias_array_ce1),
    .we1(dense_2_bias_array_we1),
    .d1(dense_2_bias_array_d1)
);

face_classifier_c2iS #(
    .DataWidth( 64 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
dense_output_shape_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_output_shape_address0),
    .ce0(dense_output_shape_ce0),
    .we0(dense_output_shape_we0),
    .d0(dense_output_shape_d0),
    .address1(dense_output_shape_address1),
    .ce1(dense_output_shape_ce1),
    .we1(dense_output_shape_we1),
    .d1(64'd1)
);

face_classifier_c2iS #(
    .DataWidth( 64 ),
    .AddressRange( 5 ),
    .AddressWidth( 3 ))
dense_1_output_shape_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_output_shape_address0),
    .ce0(dense_1_output_shape_ce0),
    .we0(dense_1_output_shape_we0),
    .d0(dense_1_output_shape_d0),
    .address1(dense_1_output_shape_address1),
    .ce1(dense_1_output_shape_ce1),
    .we1(dense_1_output_shape_we1),
    .d1(64'd1)
);

face_classifier_c4jc #(
    .DataWidth( 32 ),
    .AddressRange( 262200 ),
    .AddressWidth( 19 ))
dense_kernel_array_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_kernel_array_address0),
    .ce0(dense_kernel_array_ce0),
    .we0(dense_kernel_array_we0),
    .d0(face_classifier_c_de_q0),
    .q0(dense_kernel_array_q0)
);

face_classifier_c5jm #(
    .DataWidth( 32 ),
    .AddressRange( 264822 ),
    .AddressWidth( 19 ))
dense_fwork_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_fwork_address0),
    .ce0(dense_fwork_ce0),
    .we0(dense_fwork_we0),
    .d0(dense_fwork_d0),
    .q0(dense_fwork_q0),
    .address1(grp_k2c_dense_fu_2374_fwork_address1),
    .ce1(dense_fwork_ce1),
    .q1(dense_fwork_q1)
);

face_classifier_c6jw #(
    .DataWidth( 32 ),
    .AddressRange( 1100 ),
    .AddressWidth( 11 ))
dense_1_fwork_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_1_fwork_address0),
    .ce0(dense_1_fwork_ce0),
    .we0(dense_1_fwork_we0),
    .d0(dense_1_fwork_d0),
    .q0(dense_1_fwork_q0),
    .address1(grp_k2c_dense2_1_fu_2394_fwork_address1),
    .ce1(dense_1_fwork_ce1),
    .q1(dense_1_fwork_q1)
);

face_classifier_c7jG #(
    .DataWidth( 32 ),
    .AddressRange( 70 ),
    .AddressWidth( 7 ))
dense_2_fwork_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(dense_2_fwork_address0),
    .ce0(dense_2_fwork_ce0),
    .we0(dense_2_fwork_we0),
    .d0(dense_2_fwork_d0),
    .q0(dense_2_fwork_q0),
    .address1(grp_k2c_dense2_fu_2351_fwork_address1),
    .ce1(dense_2_fwork_ce1),
    .q1(dense_2_fwork_q1)
);

k2c_dense2 grp_k2c_dense2_fu_2351(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_k2c_dense2_fu_2351_ap_start),
    .ap_done(grp_k2c_dense2_fu_2351_ap_done),
    .ap_idle(grp_k2c_dense2_fu_2351_ap_idle),
    .ap_ready(grp_k2c_dense2_fu_2351_ap_ready),
    .output_array_address0(grp_k2c_dense2_fu_2351_output_array_address0),
    .output_array_ce0(grp_k2c_dense2_fu_2351_output_array_ce0),
    .output_array_we0(grp_k2c_dense2_fu_2351_output_array_we0),
    .output_array_d0(grp_k2c_dense2_fu_2351_output_array_d0),
    .output_array_q0(dense_2_output_array_q0),
    .output_numel_read(reg_2501),
    .input_array_address0(grp_k2c_dense2_fu_2351_input_array_address0),
    .input_array_ce0(grp_k2c_dense2_fu_2351_input_array_ce0),
    .input_array_q0(dropout_3_output_arr_q0),
    .input_ndim_read(batch_normalization_23_reg_3105),
    .input_numel_read(batch_normalization_20_reg_3083),
    .input_shape_address0(grp_k2c_dense2_fu_2351_input_shape_address0),
    .input_shape_ce0(grp_k2c_dense2_fu_2351_input_shape_ce0),
    .input_shape_q0(dropout_3_output_sha_q0),
    .kernel_array_address0(grp_k2c_dense2_fu_2351_kernel_array_address0),
    .kernel_array_ce0(grp_k2c_dense2_fu_2351_kernel_array_ce0),
    .kernel_array_q0(dense_2_kernel_array_q0),
    .kernel_ndim_read(dense_2_kernel_ndim),
    .kernel_numel_read(dense_2_kernel_numel),
    .kernel_shape_address0(grp_k2c_dense2_fu_2351_kernel_shape_address0),
    .kernel_shape_ce0(grp_k2c_dense2_fu_2351_kernel_shape_ce0),
    .kernel_shape_q0(dense_2_kernel_shape_q0),
    .kernel_shape_address1(grp_k2c_dense2_fu_2351_kernel_shape_address1),
    .kernel_shape_ce1(grp_k2c_dense2_fu_2351_kernel_shape_ce1),
    .kernel_shape_q1(dense_2_kernel_shape_q1),
    .bias_array_address0(grp_k2c_dense2_fu_2351_bias_array_address0),
    .bias_array_ce0(grp_k2c_dense2_fu_2351_bias_array_ce0),
    .bias_array_q0(dense_2_bias_array_q0),
    .bias_numel_read(dense_2_bias_numel),
    .fwork_address0(grp_k2c_dense2_fu_2351_fwork_address0),
    .fwork_ce0(grp_k2c_dense2_fu_2351_fwork_ce0),
    .fwork_we0(grp_k2c_dense2_fu_2351_fwork_we0),
    .fwork_d0(grp_k2c_dense2_fu_2351_fwork_d0),
    .fwork_q0(dense_2_fwork_q0),
    .fwork_address1(grp_k2c_dense2_fu_2351_fwork_address1),
    .fwork_ce1(grp_k2c_dense2_fu_2351_fwork_ce1),
    .fwork_q1(dense_2_fwork_q1)
);

k2c_dense grp_k2c_dense_fu_2374(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_k2c_dense_fu_2374_ap_start),
    .ap_done(grp_k2c_dense_fu_2374_ap_done),
    .ap_idle(grp_k2c_dense_fu_2374_ap_idle),
    .ap_ready(grp_k2c_dense_fu_2374_ap_ready),
    .input_array_address0(grp_k2c_dense_fu_2374_input_array_address0),
    .input_array_ce0(grp_k2c_dense_fu_2374_input_array_ce0),
    .input_array_q0(dense_input_input_array_q0),
    .input_ndim_read(dense_input_input_ndim),
    .input_numel_read(dense_input_input_numel),
    .input_shape_address0(grp_k2c_dense_fu_2374_input_shape_address0),
    .input_shape_ce0(grp_k2c_dense_fu_2374_input_shape_ce0),
    .input_shape_q0(dense_input_input_shape_q0),
    .kernel_array_address0(grp_k2c_dense_fu_2374_kernel_array_address0),
    .kernel_array_ce0(grp_k2c_dense_fu_2374_kernel_array_ce0),
    .kernel_array_q0(dense_kernel_array_q0),
    .fwork_address0(grp_k2c_dense_fu_2374_fwork_address0),
    .fwork_ce0(grp_k2c_dense_fu_2374_fwork_ce0),
    .fwork_we0(grp_k2c_dense_fu_2374_fwork_we0),
    .fwork_d0(grp_k2c_dense_fu_2374_fwork_d0),
    .fwork_q0(dense_fwork_q0),
    .fwork_address1(grp_k2c_dense_fu_2374_fwork_address1),
    .fwork_ce1(grp_k2c_dense_fu_2374_fwork_ce1),
    .fwork_q1(dense_fwork_q1),
    .dense_output_array_address0(grp_k2c_dense_fu_2374_dense_output_array_address0),
    .dense_output_array_ce0(grp_k2c_dense_fu_2374_dense_output_array_ce0),
    .dense_output_array_we0(grp_k2c_dense_fu_2374_dense_output_array_we0),
    .dense_output_array_d0(grp_k2c_dense_fu_2374_dense_output_array_d0),
    .dense_output_array_q0(dense_output_array_q0),
    .dense_output_numel(dense_output_numel)
);

k2c_dense2_1 grp_k2c_dense2_1_fu_2394(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_k2c_dense2_1_fu_2394_ap_start),
    .ap_done(grp_k2c_dense2_1_fu_2394_ap_done),
    .ap_idle(grp_k2c_dense2_1_fu_2394_ap_idle),
    .ap_ready(grp_k2c_dense2_1_fu_2394_ap_ready),
    .output_array_address0(grp_k2c_dense2_1_fu_2394_output_array_address0),
    .output_array_ce0(grp_k2c_dense2_1_fu_2394_output_array_ce0),
    .output_array_we0(grp_k2c_dense2_1_fu_2394_output_array_we0),
    .output_array_d0(grp_k2c_dense2_1_fu_2394_output_array_d0),
    .output_array_q0(dense_1_output_array_q0),
    .output_numel_read(reg_2495),
    .input_array_address0(grp_k2c_dense2_1_fu_2394_input_array_address0),
    .input_array_ce0(grp_k2c_dense2_1_fu_2394_input_array_ce0),
    .input_array_q0(dropout_2_output_arr_q0),
    .input_ndim_read(batch_normalization_17_reg_3032),
    .input_numel_read(batch_normalization_14_reg_3010),
    .input_shape_address0(grp_k2c_dense2_1_fu_2394_input_shape_address0),
    .input_shape_ce0(grp_k2c_dense2_1_fu_2394_input_shape_ce0),
    .input_shape_q0(dropout_2_output_sha_q0),
    .bias_array_address0(grp_k2c_dense2_1_fu_2394_bias_array_address0),
    .bias_array_ce0(grp_k2c_dense2_1_fu_2394_bias_array_ce0),
    .bias_array_q0(dense_1_bias_array_q0),
    .bias_numel_read(dense_1_bias_numel),
    .fwork_address0(grp_k2c_dense2_1_fu_2394_fwork_address0),
    .fwork_ce0(grp_k2c_dense2_1_fu_2394_fwork_ce0),
    .fwork_we0(grp_k2c_dense2_1_fu_2394_fwork_we0),
    .fwork_d0(grp_k2c_dense2_1_fu_2394_fwork_d0),
    .fwork_q0(dense_1_fwork_q0),
    .fwork_address1(grp_k2c_dense2_1_fu_2394_fwork_address1),
    .fwork_ce1(grp_k2c_dense2_1_fu_2394_fwork_ce1),
    .fwork_q1(dense_1_fwork_q1)
);

generic_tanh_float_s grp_generic_tanh_float_s_fu_2415(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_generic_tanh_float_s_fu_2415_ap_start),
    .ap_done(grp_generic_tanh_float_s_fu_2415_ap_done),
    .ap_idle(grp_generic_tanh_float_s_fu_2415_ap_idle),
    .ap_ready(grp_generic_tanh_float_s_fu_2415_ap_ready),
    .t_in(grp_generic_tanh_float_s_fu_2415_t_in),
    .ap_return(grp_generic_tanh_float_s_fu_2415_ap_return)
);

k2c_batch_norm grp_k2c_batch_norm_fu_2428(
    .ap_clk(ap_clk),
    .ap_rst(ap_rst),
    .ap_start(grp_k2c_batch_norm_fu_2428_ap_start),
    .ap_done(grp_k2c_batch_norm_fu_2428_ap_done),
    .ap_idle(grp_k2c_batch_norm_fu_2428_ap_idle),
    .ap_ready(grp_k2c_batch_norm_fu_2428_ap_ready),
    .outputs_array_address0(grp_k2c_batch_norm_fu_2428_outputs_array_address0),
    .outputs_array_ce0(grp_k2c_batch_norm_fu_2428_outputs_array_ce0),
    .outputs_array_we0(grp_k2c_batch_norm_fu_2428_outputs_array_we0),
    .outputs_array_d0(grp_k2c_batch_norm_fu_2428_outputs_array_d0),
    .inputs_array_address0(grp_k2c_batch_norm_fu_2428_inputs_array_address0),
    .inputs_array_ce0(grp_k2c_batch_norm_fu_2428_inputs_array_ce0),
    .inputs_array_q0(grp_k2c_batch_norm_fu_2428_inputs_array_q0),
    .inputs_numel_read(grp_k2c_batch_norm_fu_2428_inputs_numel_read),
    .mean_array_address0(grp_k2c_batch_norm_fu_2428_mean_array_address0),
    .mean_array_ce0(grp_k2c_batch_norm_fu_2428_mean_array_ce0),
    .mean_array_q0(grp_k2c_batch_norm_fu_2428_mean_array_q0),
    .stdev_array_address0(grp_k2c_batch_norm_fu_2428_stdev_array_address0),
    .stdev_array_ce0(grp_k2c_batch_norm_fu_2428_stdev_array_ce0),
    .stdev_array_q0(grp_k2c_batch_norm_fu_2428_stdev_array_q0),
    .gamma_array_address0(grp_k2c_batch_norm_fu_2428_gamma_array_address0),
    .gamma_array_ce0(grp_k2c_batch_norm_fu_2428_gamma_array_ce0),
    .gamma_array_q0(grp_k2c_batch_norm_fu_2428_gamma_array_q0),
    .beta_array_address0(grp_k2c_batch_norm_fu_2428_beta_array_address0),
    .beta_array_ce0(grp_k2c_batch_norm_fu_2428_beta_array_ce0),
    .beta_array_q0(grp_k2c_batch_norm_fu_2428_beta_array_q0)
);

face_classifier_crcU #(
    .ID( 1 ),
    .NUM_STAGE( 4 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
face_classifier_crcU_U151(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2451_p0),
    .din1(grp_fu_2451_p1),
    .opcode(grp_fu_2451_opcode),
    .ce(1'b1),
    .dout(grp_fu_2451_p2)
);

face_classifier_cfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
face_classifier_cfYi_U152(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2457_p0),
    .din1(sum_1_reg_3215),
    .ce(1'b1),
    .dout(grp_fu_2457_p2)
);

face_classifier_cfYi #(
    .ID( 1 ),
    .NUM_STAGE( 3 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
face_classifier_cfYi_U153(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(grp_fu_2461_p0),
    .din1(sum_1_reg_3215),
    .ce(1'b1),
    .dout(grp_fu_2461_p2)
);

face_classifier_cmb6 #(
    .ID( 1 ),
    .NUM_STAGE( 10 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
face_classifier_cmb6_U154(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd1065353216),
    .din1(sum_reg_2328),
    .ce(1'b1),
    .dout(grp_fu_2465_p2)
);

face_classifier_cudo #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 1 ))
face_classifier_cudo_U155(
    .din0(dense_2_output_array_q1),
    .din1(xmax1_reg_2307),
    .opcode(5'd2),
    .dout(tmp_22_fu_2471_p2)
);

face_classifier_c8jQ #(
    .ID( 1 ),
    .NUM_STAGE( 8 ),
    .din0_WIDTH( 32 ),
    .din1_WIDTH( 32 ),
    .dout_WIDTH( 32 ))
face_classifier_c8jQ_U156(
    .clk(ap_clk),
    .reset(ap_rst),
    .din0(32'd0),
    .din1(tmp_86_reg_3200),
    .ce(1'b1),
    .dout(grp_fu_2477_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state163) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state162)) begin
            ap_enable_reg_pp0_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_condition_pp0_exit_iter0_state163))) begin
            ap_enable_reg_pp0_iter1 <= (1'b1 ^ ap_condition_pp0_exit_iter0_state163);
        end else if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
        end else if ((1'b1 == ap_CS_fsm_state162)) begin
            ap_enable_reg_pp0_iter1 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter0 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage0_subdone) & (1'b1 == ap_condition_pp1_exit_iter0_state166) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
            ap_enable_reg_pp1_iter0 <= 1'b0;
        end else if ((1'b1 == ap_CS_fsm_state165)) begin
            ap_enable_reg_pp1_iter0 <= 1'b1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage3_subdone) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
            if ((1'b1 == ap_condition_pp1_exit_iter0_state166)) begin
                ap_enable_reg_pp1_iter1 <= (1'b1 ^ ap_condition_pp1_exit_iter0_state166);
            end else if ((1'b1 == 1'b1)) begin
                ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
            end
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter2 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage3_subdone) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
            ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter3 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp1_stage3_subdone) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
            ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp1_iter4 <= 1'b0;
    end else begin
        if ((((1'b0 == ap_block_pp1_stage3_subdone) & (1'b1 == ap_CS_fsm_pp1_stage3)) | ((1'b0 == ap_block_pp1_stage2_subdone) & (1'b1 == ap_CS_fsm_pp1_stage2)))) begin
            ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
        end else if ((1'b1 == ap_CS_fsm_state165)) begin
            ap_enable_reg_pp1_iter4 <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_generic_tanh_float_s_fu_2415_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state152) | (1'b1 == ap_CS_fsm_state139))) begin
            grp_generic_tanh_float_s_fu_2415_ap_start_reg <= 1'b1;
        end else if ((grp_generic_tanh_float_s_fu_2415_ap_ready == 1'b1)) begin
            grp_generic_tanh_float_s_fu_2415_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_k2c_batch_norm_fu_2428_ap_start_reg <= 1'b0;
    end else begin
        if (((1'b1 == ap_CS_fsm_state135) | (1'b1 == ap_CS_fsm_state148))) begin
            grp_k2c_batch_norm_fu_2428_ap_start_reg <= 1'b1;
        end else if ((grp_k2c_batch_norm_fu_2428_ap_ready == 1'b1)) begin
            grp_k2c_batch_norm_fu_2428_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_k2c_dense2_1_fu_2394_ap_start_reg <= 1'b0;
    end else begin
        if (((tmp_73_fu_2713_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state145))) begin
            grp_k2c_dense2_1_fu_2394_ap_start_reg <= 1'b1;
        end else if ((grp_k2c_dense2_1_fu_2394_ap_ready == 1'b1)) begin
            grp_k2c_dense2_1_fu_2394_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_k2c_dense2_fu_2351_ap_start_reg <= 1'b0;
    end else begin
        if (((tmp_80_fu_2774_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state158))) begin
            grp_k2c_dense2_fu_2351_ap_start_reg <= 1'b1;
        end else if ((grp_k2c_dense2_fu_2351_ap_ready == 1'b1)) begin
            grp_k2c_dense2_fu_2351_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        grp_k2c_dense_fu_2374_ap_start_reg <= 1'b0;
    end else begin
        if (((tmp_68_fu_2657_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state133))) begin
            grp_k2c_dense_fu_2374_ap_start_reg <= 1'b1;
        end else if ((grp_k2c_dense_fu_2374_ap_ready == 1'b1)) begin
            grp_k2c_dense_fu_2374_ap_start_reg <= 1'b0;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state153) & (grp_generic_tanh_float_s_fu_2415_ap_done == 1'b1))) begin
        i_1_reg_2263 <= i_39_reg_3094;
    end else if (((grp_k2c_batch_norm_fu_2428_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state149))) begin
        i_1_reg_2263 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_fu_2800_p2 == 1'd0) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        i_2_reg_2296 <= i_40_fu_2811_p2;
    end else if ((1'b1 == ap_CS_fsm_state162)) begin
        i_2_reg_2296 <= 3'd1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state165)) begin
        i_3_reg_2317 <= 3'd0;
    end else if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_83_reg_3185 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        i_3_reg_2317 <= i_41_reg_3189;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state140) & (grp_generic_tanh_float_s_fu_2415_ap_done == 1'b1))) begin
        i_reg_2230 <= i_38_reg_3021;
    end else if (((grp_k2c_batch_norm_fu_2428_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state136))) begin
        i_reg_2230 <= 12'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        invdar1_reg_2208 <= 11'd0;
    end else if (((tmp_66_fu_2598_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state103))) begin
        invdar1_reg_2208 <= indvarinc1_fu_2587_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        invdar2_reg_2219 <= 7'd0;
    end else if (((tmp_68_fu_2657_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state133))) begin
        invdar2_reg_2219 <= indvarinc2_fu_2646_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_59_reg_2977 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
        invdar_reg_2197 <= 19'd0;
    end else if (((tmp_64_fu_2557_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state53))) begin
        invdar_reg_2197 <= indvarinc_fu_2546_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_2738_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state150))) begin
        j_1_reg_2274 <= 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state155)) begin
        j_1_reg_2274 <= j_reg_3123;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state157)) begin
        j_2_reg_2285 <= 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state159)) begin
        j_2_reg_2285 <= j_3_reg_3141;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state200)) begin
        j_4_reg_2340 <= 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state202)) begin
        j_4_reg_2340 <= j_5_reg_3254;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state144)) begin
        j_8_reg_2252 <= 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state146)) begin
        j_8_reg_2252 <= j_9_reg_3068;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_2677_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state137))) begin
        j_s_reg_2241 <= 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state142)) begin
        j_s_reg_2241 <= j_7_reg_3050;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state165)) begin
        sum_reg_2328 <= 32'd0;
    end else if (((1'b0 == ap_block_pp1_stage2_11001) & (tmp_83_reg_3185_pp1_iter4_reg == 1'd0) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
        sum_reg_2328 <= grp_fu_2451_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        tmp_s_reg_2186 <= 19'd0;
    end else if (((tmp_59_reg_2977 == 1'd0) & (1'b1 == ap_CS_fsm_state52))) begin
        tmp_s_reg_2186 <= tmp_57_reg_2962;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (exitcond1_reg_3166 == 1'd0) & (ap_enable_reg_pp0_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        xmax1_reg_2307 <= xmax_1_fu_2901_p3;
    end else if ((1'b1 == ap_CS_fsm_state162)) begin
        xmax1_reg_2307 <= dense_2_output_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_66_fu_2598_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state103))) begin
        batch_normalization_12[1] <= 1'b1;
batch_normalization_12[3] <= 1'b1;
        batch_normalization_8[0] <= 1'b1;
        dense_2_bias_numel[1] <= 1'b1;
dense_2_bias_numel[2] <= 1'b1;
        dense_2_kernel_ndim[1] <= 1'b1;
        dense_2_kernel_numel[2] <= 1'b1;
dense_2_kernel_numel[3] <= 1'b1;
dense_2_kernel_numel[4] <= 1'b1;
dense_2_kernel_numel[5] <= 1'b1;
        dense_2_output_ndim <= 1'd1;
        dense_2_output_numel[1] <= 1'b1;
dense_2_output_numel[2] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_k2c_batch_norm_fu_2428_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state136))) begin
        batch_normalization_14_reg_3010[2] <= batch_normalization_3[2];
batch_normalization_14_reg_3010[6 : 5] <= batch_normalization_3[6 : 5];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_2677_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state137))) begin
        batch_normalization_15_reg_3026 <= i_cast_fu_2672_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state138)) begin
        batch_normalization_16_reg_3037 <= batch_normalization_1_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond2_fu_2677_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state137))) begin
        batch_normalization_17_reg_3032[0] <= batch_normalization_2[0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_64_fu_2557_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
        batch_normalization_2[0] <= 1'b1;
        batch_normalization_3[2] <= 1'b1;
batch_normalization_3[5] <= 1'b1;
batch_normalization_3[6] <= 1'b1;
        dense_1_bias_numel[1] <= 1'b1;
dense_1_bias_numel[3] <= 1'b1;
        dense_1_output_numel[1] <= 1'b1;
dense_1_output_numel[3] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((grp_k2c_batch_norm_fu_2428_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state149))) begin
        batch_normalization_20_reg_3083[1] <= batch_normalization_12[1];
batch_normalization_20_reg_3083[3] <= batch_normalization_12[3];
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_2738_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state150))) begin
        batch_normalization_21_reg_3099 <= i_1_cast_fu_2733_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state151)) begin
        batch_normalization_22_reg_3110 <= batch_normalization_7_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((exitcond_fu_2738_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state150))) begin
        batch_normalization_23_reg_3105[0] <= batch_normalization_8[0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (tmp_83_fu_2909_p2 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        dense_2_output_array_2_reg_3194[2 : 0] <= i_3_cast3_fu_2921_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0))) begin
        dense_2_output_array_2_reg_3194_pp1_iter1_reg[2 : 0] <= dense_2_output_array_2_reg_3194[2 : 0];
        dense_2_output_array_2_reg_3194_pp1_iter2_reg[2 : 0] <= dense_2_output_array_2_reg_3194_pp1_iter1_reg[2 : 0];
        dense_2_output_array_2_reg_3194_pp1_iter3_reg[2 : 0] <= dense_2_output_array_2_reg_3194_pp1_iter2_reg[2 : 0];
        tmp_83_reg_3185 <= tmp_83_fu_2909_p2;
        tmp_83_reg_3185_pp1_iter1_reg <= tmp_83_reg_3185;
        tmp_83_reg_3185_pp1_iter2_reg <= tmp_83_reg_3185_pp1_iter1_reg;
        tmp_83_reg_3185_pp1_iter3_reg <= tmp_83_reg_3185_pp1_iter2_reg;
        tmp_83_reg_3185_pp1_iter4_reg <= tmp_83_reg_3185_pp1_iter3_reg;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state194)) begin
        dense_2_output_array_5_reg_3221 <= dense_2_output_array_q1;
        sum_1_reg_3215 <= grp_fu_2465_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state195)) begin
        dense_2_output_array_6_reg_3226 <= dense_2_output_array_q0;
        dense_2_output_array_7_reg_3231 <= dense_2_output_array_q1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state196)) begin
        dense_2_output_array_8_reg_3236 <= dense_2_output_array_q0;
        dense_2_output_array_9_reg_3241 <= dense_2_output_array_q1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        dense_output_numel[2] <= 1'b1;
dense_output_numel[5] <= 1'b1;
dense_output_numel[6] <= 1'b1;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        exitcond1_reg_3166 <= exitcond1_fu_2800_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state137)) begin
        i_38_reg_3021 <= i_38_fu_2682_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state150)) begin
        i_39_reg_3094 <= i_39_fu_2743_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        i_41_reg_3189 <= i_41_fu_2915_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state158)) begin
        j_3_reg_3141 <= j_3_fu_2779_p2;
        tmp_79_reg_3133[11 : 0] <= tmp_79_fu_2769_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state201)) begin
        j_5_reg_3254 <= j_5_fu_2946_p2;
        tmp_88_reg_3246 <= tmp_88_fu_2935_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state141)) begin
        j_7_reg_3050 <= j_7_fu_2702_p2;
        tmp_69_reg_3042[11 : 0] <= tmp_69_fu_2692_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state145)) begin
        j_9_reg_3068 <= j_9_fu_2718_p2;
        tmp_72_reg_3060[11 : 0] <= tmp_72_fu_2708_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state154)) begin
        j_reg_3123 <= j_fu_2763_p2;
        tmp_76_reg_3115[11 : 0] <= tmp_76_fu_2753_p1[11 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state148) | ((tmp_73_fu_2713_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state145)))) begin
        reg_2495[1] <= dense_1_output_numel[1];
reg_2495[3] <= dense_1_output_numel[3];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state200) | ((tmp_80_fu_2774_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state158)))) begin
        reg_2501[2 : 1] <= dense_2_output_numel[2 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state194) | (1'b1 == ap_CS_fsm_state162) | ((1'b0 == ap_block_pp1_stage1_11001) & (tmp_83_reg_3185 == 1'd0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        reg_2506 <= dense_2_output_array_q0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state199) | (1'b1 == ap_CS_fsm_state198) | (1'b1 == ap_CS_fsm_state197))) begin
        reg_2513 <= grp_fu_2457_p2;
        reg_2518 <= grp_fu_2461_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        tmp_57_reg_2962 <= tmp_57_fu_2529_p2;
        tmp_58_reg_2967[18 : 0] <= tmp_58_fu_2535_p1[18 : 0];
        tmp_59_reg_2977 <= tmp_59_fu_2540_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (tmp_83_reg_3185_pp1_iter1_reg == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        tmp_86_reg_3200 <= grp_fu_2451_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp1_stage1_11001) & (tmp_83_reg_3185_pp1_iter3_reg == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        tmp_87_reg_3205 <= grp_fu_2477_p2;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state145)) begin
        activation_1_output_s_address0 = tmp_72_fu_2708_p1;
    end else if ((1'b1 == ap_CS_fsm_state142)) begin
        activation_1_output_s_address0 = tmp_69_reg_3042;
    end else begin
        activation_1_output_s_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state145) | (1'b1 == ap_CS_fsm_state142))) begin
        activation_1_output_s_ce0 = 1'b1;
    end else begin
        activation_1_output_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state142)) begin
        activation_1_output_s_we0 = 1'b1;
    end else begin
        activation_1_output_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state158)) begin
        activation_2_output_s_address0 = tmp_79_fu_2769_p1;
    end else if ((1'b1 == ap_CS_fsm_state155)) begin
        activation_2_output_s_address0 = tmp_76_reg_3115;
    end else begin
        activation_2_output_s_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state158) | (1'b1 == ap_CS_fsm_state155))) begin
        activation_2_output_s_ce0 = 1'b1;
    end else begin
        activation_2_output_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state155)) begin
        activation_2_output_s_we0 = 1'b1;
    end else begin
        activation_2_output_s_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state202)) begin
        activation_3_output_array_ce0 = 1'b1;
    end else begin
        activation_3_output_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state202)) begin
        activation_3_output_array_we0 = 1'b1;
    end else begin
        activation_3_output_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state200)) begin
        activation_3_output_ndim_ap_vld = 1'b1;
    end else begin
        activation_3_output_ndim_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state200)) begin
        activation_3_output_numel_ap_vld = 1'b1;
    end else begin
        activation_3_output_numel_ap_vld = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state200)) begin
        activation_3_output_shape_address0 = 64'd4;
    end else if ((1'b1 == ap_CS_fsm_state199)) begin
        activation_3_output_shape_address0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state198)) begin
        activation_3_output_shape_address0 = 64'd0;
    end else begin
        activation_3_output_shape_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state200)) begin
        activation_3_output_shape_address1 = 64'd3;
    end else if ((1'b1 == ap_CS_fsm_state199)) begin
        activation_3_output_shape_address1 = 64'd2;
    end else begin
        activation_3_output_shape_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state199) | (1'b1 == ap_CS_fsm_state198) | (1'b1 == ap_CS_fsm_state200))) begin
        activation_3_output_shape_ce0 = 1'b1;
    end else begin
        activation_3_output_shape_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state199) | (1'b1 == ap_CS_fsm_state200))) begin
        activation_3_output_shape_ce1 = 1'b1;
    end else begin
        activation_3_output_shape_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state199) | (1'b1 == ap_CS_fsm_state200))) begin
        activation_3_output_shape_d0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state198)) begin
        activation_3_output_shape_d0 = 64'd6;
    end else begin
        activation_3_output_shape_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state199) | (1'b1 == ap_CS_fsm_state198) | (1'b1 == ap_CS_fsm_state200))) begin
        activation_3_output_shape_we0 = 1'b1;
    end else begin
        activation_3_output_shape_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state199) | (1'b1 == ap_CS_fsm_state200))) begin
        activation_3_output_shape_we1 = 1'b1;
    end else begin
        activation_3_output_shape_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((exitcond1_fu_2800_p2 == 1'd1)) begin
        ap_condition_pp0_exit_iter0_state163 = 1'b1;
    end else begin
        ap_condition_pp0_exit_iter0_state163 = 1'b0;
    end
end

always @ (*) begin
    if ((tmp_83_fu_2909_p2 == 1'd1)) begin
        ap_condition_pp1_exit_iter0_state166 = 1'b1;
    end else begin
        ap_condition_pp1_exit_iter0_state166 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_89_fu_2940_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state201))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp1_iter3 == 1'b0) & (ap_enable_reg_pp1_iter2 == 1'b0) & (ap_enable_reg_pp1_iter4 == 1'b0) & (ap_enable_reg_pp1_iter1 == 1'b0) & (ap_enable_reg_pp1_iter0 == 1'b0))) begin
        ap_idle_pp1 = 1'b1;
    end else begin
        ap_idle_pp1 = 1'b0;
    end
end

always @ (*) begin
    if (((tmp_83_reg_3185 == 1'd0) & (ap_enable_reg_pp1_iter1 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage0) & (1'b0 == ap_block_pp1_stage0))) begin
        ap_phi_mux_i_3_phi_fu_2321_p4 = i_41_reg_3189;
    end else begin
        ap_phi_mux_i_3_phi_fu_2321_p4 = i_3_reg_2317;
    end
end

always @ (*) begin
    if (((tmp_89_fu_2940_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state201))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state136)) begin
        batch_normalization_10_ce0 = grp_k2c_batch_norm_fu_2428_gamma_array_ce0;
    end else begin
        batch_normalization_10_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state136)) begin
        batch_normalization_11_ce0 = grp_k2c_batch_norm_fu_2428_beta_array_ce0;
    end else begin
        batch_normalization_11_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        batch_normalization_13_address0 = 12'd8;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        batch_normalization_13_address0 = 12'd6;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        batch_normalization_13_address0 = 12'd4;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        batch_normalization_13_address0 = 12'd2;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        batch_normalization_13_address0 = 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state149)) begin
        batch_normalization_13_address0 = grp_k2c_batch_norm_fu_2428_stdev_array_address0;
    end else begin
        batch_normalization_13_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        batch_normalization_13_address1 = 12'd9;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        batch_normalization_13_address1 = 12'd7;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        batch_normalization_13_address1 = 12'd5;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        batch_normalization_13_address1 = 12'd3;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        batch_normalization_13_address1 = 12'd1;
    end else begin
        batch_normalization_13_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132))) begin
        batch_normalization_13_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state149)) begin
        batch_normalization_13_ce0 = grp_k2c_batch_norm_fu_2428_stdev_array_ce0;
    end else begin
        batch_normalization_13_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132))) begin
        batch_normalization_13_ce1 = 1'b1;
    end else begin
        batch_normalization_13_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        batch_normalization_13_d0 = 32'd1075516487;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        batch_normalization_13_d0 = 32'd1074920196;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        batch_normalization_13_d0 = 32'd1075799855;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        batch_normalization_13_d0 = 32'd1075821880;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        batch_normalization_13_d0 = 32'd1075431693;
    end else begin
        batch_normalization_13_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        batch_normalization_13_d1 = 32'd1076462060;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        batch_normalization_13_d1 = 32'd1076694818;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        batch_normalization_13_d1 = 32'd1076525688;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        batch_normalization_13_d1 = 32'd1076328355;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        batch_normalization_13_d1 = 32'd1074484573;
    end else begin
        batch_normalization_13_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132))) begin
        batch_normalization_13_we0 = 1'b1;
    end else begin
        batch_normalization_13_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132))) begin
        batch_normalization_13_we1 = 1'b1;
    end else begin
        batch_normalization_13_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state141)) begin
        batch_normalization_1_address0 = tmp_69_fu_2692_p1;
    end else if ((1'b1 == ap_CS_fsm_state137)) begin
        batch_normalization_1_address0 = i_cast_fu_2672_p1;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        batch_normalization_1_address0 = 12'd98;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        batch_normalization_1_address0 = 12'd96;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        batch_normalization_1_address0 = 12'd94;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        batch_normalization_1_address0 = 12'd92;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        batch_normalization_1_address0 = 12'd90;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        batch_normalization_1_address0 = 12'd88;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        batch_normalization_1_address0 = 12'd86;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        batch_normalization_1_address0 = 12'd84;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        batch_normalization_1_address0 = 12'd82;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        batch_normalization_1_address0 = 12'd80;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        batch_normalization_1_address0 = 12'd78;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        batch_normalization_1_address0 = 12'd76;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        batch_normalization_1_address0 = 12'd74;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        batch_normalization_1_address0 = 12'd72;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        batch_normalization_1_address0 = 12'd70;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        batch_normalization_1_address0 = 12'd68;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        batch_normalization_1_address0 = 12'd66;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        batch_normalization_1_address0 = 12'd64;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        batch_normalization_1_address0 = 12'd62;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        batch_normalization_1_address0 = 12'd60;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        batch_normalization_1_address0 = 12'd58;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        batch_normalization_1_address0 = 12'd56;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        batch_normalization_1_address0 = 12'd54;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        batch_normalization_1_address0 = 12'd52;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        batch_normalization_1_address0 = 12'd50;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        batch_normalization_1_address0 = 12'd48;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        batch_normalization_1_address0 = 12'd46;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        batch_normalization_1_address0 = 12'd44;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        batch_normalization_1_address0 = 12'd42;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        batch_normalization_1_address0 = 12'd40;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        batch_normalization_1_address0 = 12'd38;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        batch_normalization_1_address0 = 12'd36;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        batch_normalization_1_address0 = 12'd34;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        batch_normalization_1_address0 = 12'd32;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        batch_normalization_1_address0 = 12'd30;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        batch_normalization_1_address0 = 12'd28;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        batch_normalization_1_address0 = 12'd26;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        batch_normalization_1_address0 = 12'd24;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        batch_normalization_1_address0 = 12'd22;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        batch_normalization_1_address0 = 12'd20;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        batch_normalization_1_address0 = 12'd18;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        batch_normalization_1_address0 = 12'd16;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        batch_normalization_1_address0 = 12'd14;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        batch_normalization_1_address0 = 12'd12;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        batch_normalization_1_address0 = 12'd10;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        batch_normalization_1_address0 = 12'd8;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        batch_normalization_1_address0 = 12'd6;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        batch_normalization_1_address0 = 12'd4;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        batch_normalization_1_address0 = 12'd2;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        batch_normalization_1_address0 = 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state136)) begin
        batch_normalization_1_address0 = grp_k2c_batch_norm_fu_2428_outputs_array_address0;
    end else begin
        batch_normalization_1_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state140)) begin
        batch_normalization_1_address1 = batch_normalization_15_reg_3026;
    end else if ((1'b1 == ap_CS_fsm_state102)) begin
        batch_normalization_1_address1 = 12'd99;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        batch_normalization_1_address1 = 12'd97;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        batch_normalization_1_address1 = 12'd95;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        batch_normalization_1_address1 = 12'd93;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        batch_normalization_1_address1 = 12'd91;
    end else if ((1'b1 == ap_CS_fsm_state97)) begin
        batch_normalization_1_address1 = 12'd89;
    end else if ((1'b1 == ap_CS_fsm_state96)) begin
        batch_normalization_1_address1 = 12'd87;
    end else if ((1'b1 == ap_CS_fsm_state95)) begin
        batch_normalization_1_address1 = 12'd85;
    end else if ((1'b1 == ap_CS_fsm_state94)) begin
        batch_normalization_1_address1 = 12'd83;
    end else if ((1'b1 == ap_CS_fsm_state93)) begin
        batch_normalization_1_address1 = 12'd81;
    end else if ((1'b1 == ap_CS_fsm_state92)) begin
        batch_normalization_1_address1 = 12'd79;
    end else if ((1'b1 == ap_CS_fsm_state91)) begin
        batch_normalization_1_address1 = 12'd77;
    end else if ((1'b1 == ap_CS_fsm_state90)) begin
        batch_normalization_1_address1 = 12'd75;
    end else if ((1'b1 == ap_CS_fsm_state89)) begin
        batch_normalization_1_address1 = 12'd73;
    end else if ((1'b1 == ap_CS_fsm_state88)) begin
        batch_normalization_1_address1 = 12'd71;
    end else if ((1'b1 == ap_CS_fsm_state87)) begin
        batch_normalization_1_address1 = 12'd69;
    end else if ((1'b1 == ap_CS_fsm_state86)) begin
        batch_normalization_1_address1 = 12'd67;
    end else if ((1'b1 == ap_CS_fsm_state85)) begin
        batch_normalization_1_address1 = 12'd65;
    end else if ((1'b1 == ap_CS_fsm_state84)) begin
        batch_normalization_1_address1 = 12'd63;
    end else if ((1'b1 == ap_CS_fsm_state83)) begin
        batch_normalization_1_address1 = 12'd61;
    end else if ((1'b1 == ap_CS_fsm_state82)) begin
        batch_normalization_1_address1 = 12'd59;
    end else if ((1'b1 == ap_CS_fsm_state81)) begin
        batch_normalization_1_address1 = 12'd57;
    end else if ((1'b1 == ap_CS_fsm_state80)) begin
        batch_normalization_1_address1 = 12'd55;
    end else if ((1'b1 == ap_CS_fsm_state79)) begin
        batch_normalization_1_address1 = 12'd53;
    end else if ((1'b1 == ap_CS_fsm_state78)) begin
        batch_normalization_1_address1 = 12'd51;
    end else if ((1'b1 == ap_CS_fsm_state77)) begin
        batch_normalization_1_address1 = 12'd49;
    end else if ((1'b1 == ap_CS_fsm_state76)) begin
        batch_normalization_1_address1 = 12'd47;
    end else if ((1'b1 == ap_CS_fsm_state75)) begin
        batch_normalization_1_address1 = 12'd45;
    end else if ((1'b1 == ap_CS_fsm_state74)) begin
        batch_normalization_1_address1 = 12'd43;
    end else if ((1'b1 == ap_CS_fsm_state73)) begin
        batch_normalization_1_address1 = 12'd41;
    end else if ((1'b1 == ap_CS_fsm_state72)) begin
        batch_normalization_1_address1 = 12'd39;
    end else if ((1'b1 == ap_CS_fsm_state71)) begin
        batch_normalization_1_address1 = 12'd37;
    end else if ((1'b1 == ap_CS_fsm_state70)) begin
        batch_normalization_1_address1 = 12'd35;
    end else if ((1'b1 == ap_CS_fsm_state69)) begin
        batch_normalization_1_address1 = 12'd33;
    end else if ((1'b1 == ap_CS_fsm_state68)) begin
        batch_normalization_1_address1 = 12'd31;
    end else if ((1'b1 == ap_CS_fsm_state67)) begin
        batch_normalization_1_address1 = 12'd29;
    end else if ((1'b1 == ap_CS_fsm_state66)) begin
        batch_normalization_1_address1 = 12'd27;
    end else if ((1'b1 == ap_CS_fsm_state65)) begin
        batch_normalization_1_address1 = 12'd25;
    end else if ((1'b1 == ap_CS_fsm_state64)) begin
        batch_normalization_1_address1 = 12'd23;
    end else if ((1'b1 == ap_CS_fsm_state63)) begin
        batch_normalization_1_address1 = 12'd21;
    end else if ((1'b1 == ap_CS_fsm_state62)) begin
        batch_normalization_1_address1 = 12'd19;
    end else if ((1'b1 == ap_CS_fsm_state61)) begin
        batch_normalization_1_address1 = 12'd17;
    end else if ((1'b1 == ap_CS_fsm_state60)) begin
        batch_normalization_1_address1 = 12'd15;
    end else if ((1'b1 == ap_CS_fsm_state59)) begin
        batch_normalization_1_address1 = 12'd13;
    end else if ((1'b1 == ap_CS_fsm_state58)) begin
        batch_normalization_1_address1 = 12'd11;
    end else if ((1'b1 == ap_CS_fsm_state57)) begin
        batch_normalization_1_address1 = 12'd9;
    end else if ((1'b1 == ap_CS_fsm_state56)) begin
        batch_normalization_1_address1 = 12'd7;
    end else if ((1'b1 == ap_CS_fsm_state55)) begin
        batch_normalization_1_address1 = 12'd5;
    end else if ((1'b1 == ap_CS_fsm_state54)) begin
        batch_normalization_1_address1 = 12'd3;
    end else if ((1'b1 == ap_CS_fsm_state53)) begin
        batch_normalization_1_address1 = 12'd1;
    end else begin
        batch_normalization_1_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state137) | (1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state102))) begin
        batch_normalization_1_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state136)) begin
        batch_normalization_1_ce0 = grp_k2c_batch_norm_fu_2428_outputs_array_ce0;
    end else begin
        batch_normalization_1_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state102) | ((1'b1 == ap_CS_fsm_state140) & (grp_generic_tanh_float_s_fu_2415_ap_done == 1'b1)))) begin
        batch_normalization_1_ce1 = 1'b1;
    end else begin
        batch_normalization_1_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state102))) begin
        batch_normalization_1_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state136)) begin
        batch_normalization_1_d0 = grp_k2c_batch_norm_fu_2428_outputs_array_d0;
    end else begin
        batch_normalization_1_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state140)) begin
        batch_normalization_1_d1 = grp_generic_tanh_float_s_fu_2415_ap_return;
    end else if (((1'b1 == ap_CS_fsm_state53) | (1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state102))) begin
        batch_normalization_1_d1 = 32'd0;
    end else begin
        batch_normalization_1_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state102) | ((tmp_64_fu_2557_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53)))) begin
        batch_normalization_1_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state136)) begin
        batch_normalization_1_we0 = grp_k2c_batch_norm_fu_2428_outputs_array_we0;
    end else begin
        batch_normalization_1_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state97) | (1'b1 == ap_CS_fsm_state96) | (1'b1 == ap_CS_fsm_state95) | (1'b1 == ap_CS_fsm_state94) | (1'b1 == ap_CS_fsm_state93) | (1'b1 == ap_CS_fsm_state92) | (1'b1 == ap_CS_fsm_state91) | (1'b1 == ap_CS_fsm_state90) | (1'b1 == ap_CS_fsm_state89) | (1'b1 == ap_CS_fsm_state88) | (1'b1 == ap_CS_fsm_state87) | (1'b1 == ap_CS_fsm_state86) | (1'b1 == ap_CS_fsm_state85) | (1'b1 == ap_CS_fsm_state84) | (1'b1 == ap_CS_fsm_state83) | (1'b1 == ap_CS_fsm_state82) | (1'b1 == ap_CS_fsm_state81) | (1'b1 == ap_CS_fsm_state80) | (1'b1 == ap_CS_fsm_state79) | (1'b1 == ap_CS_fsm_state78) | (1'b1 == ap_CS_fsm_state77) | (1'b1 == ap_CS_fsm_state76) | (1'b1 == ap_CS_fsm_state75) | (1'b1 == ap_CS_fsm_state74) | (1'b1 == ap_CS_fsm_state73) | (1'b1 == ap_CS_fsm_state72) | (1'b1 == ap_CS_fsm_state71) | (1'b1 == ap_CS_fsm_state70) | (1'b1 == ap_CS_fsm_state69) | (1'b1 == ap_CS_fsm_state68) | (1'b1 == ap_CS_fsm_state67) | (1'b1 == ap_CS_fsm_state66) | (1'b1 == ap_CS_fsm_state65) | (1'b1 == ap_CS_fsm_state64) | (1'b1 == ap_CS_fsm_state63) | (1'b1 == ap_CS_fsm_state62) | (1'b1 == ap_CS_fsm_state61) | (1'b1 == ap_CS_fsm_state60) | (1'b1 == ap_CS_fsm_state59) | (1'b1 == ap_CS_fsm_state58) | (1'b1 == ap_CS_fsm_state57) | (1'b1 == ap_CS_fsm_state56) | (1'b1 == ap_CS_fsm_state55) | (1'b1 == ap_CS_fsm_state54) | (1'b1 == ap_CS_fsm_state102) | ((tmp_64_fu_2557_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53)) | ((1'b1 == ap_CS_fsm_state140) & (grp_generic_tanh_float_s_fu_2415_ap_done == 1'b1)))) begin
        batch_normalization_1_we1 = 1'b1;
    end else begin
        batch_normalization_1_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        batch_normalization_4_address0 = 12'd8;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        batch_normalization_4_address0 = 12'd6;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        batch_normalization_4_address0 = 12'd4;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        batch_normalization_4_address0 = 12'd2;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        batch_normalization_4_address0 = 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state149)) begin
        batch_normalization_4_address0 = grp_k2c_batch_norm_fu_2428_beta_array_address0;
    end else begin
        batch_normalization_4_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        batch_normalization_4_address1 = 12'd9;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        batch_normalization_4_address1 = 12'd7;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        batch_normalization_4_address1 = 12'd5;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        batch_normalization_4_address1 = 12'd3;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        batch_normalization_4_address1 = 12'd1;
    end else begin
        batch_normalization_4_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132))) begin
        batch_normalization_4_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state149)) begin
        batch_normalization_4_ce0 = grp_k2c_batch_norm_fu_2428_beta_array_ce0;
    end else begin
        batch_normalization_4_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132))) begin
        batch_normalization_4_ce1 = 1'b1;
    end else begin
        batch_normalization_4_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        batch_normalization_4_d0 = 32'd3165041066;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        batch_normalization_4_d0 = 32'd1020034591;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        batch_normalization_4_d0 = 32'd3180124279;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        batch_normalization_4_d0 = 32'd1017482704;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        batch_normalization_4_d0 = 32'd3166011135;
    end else begin
        batch_normalization_4_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        batch_normalization_4_d1 = 32'd3178109576;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        batch_normalization_4_d1 = 32'd993881896;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        batch_normalization_4_d1 = 32'd3180609563;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        batch_normalization_4_d1 = 32'd1021549855;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        batch_normalization_4_d1 = 32'd3164058717;
    end else begin
        batch_normalization_4_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132))) begin
        batch_normalization_4_we0 = 1'b1;
    end else begin
        batch_normalization_4_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132))) begin
        batch_normalization_4_we1 = 1'b1;
    end else begin
        batch_normalization_4_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        batch_normalization_5_address0 = 12'd8;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        batch_normalization_5_address0 = 12'd6;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        batch_normalization_5_address0 = 12'd4;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        batch_normalization_5_address0 = 12'd2;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        batch_normalization_5_address0 = 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state149)) begin
        batch_normalization_5_address0 = grp_k2c_batch_norm_fu_2428_gamma_array_address0;
    end else begin
        batch_normalization_5_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        batch_normalization_5_address1 = 12'd9;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        batch_normalization_5_address1 = 12'd7;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        batch_normalization_5_address1 = 12'd5;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        batch_normalization_5_address1 = 12'd3;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        batch_normalization_5_address1 = 12'd1;
    end else begin
        batch_normalization_5_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132))) begin
        batch_normalization_5_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state149)) begin
        batch_normalization_5_ce0 = grp_k2c_batch_norm_fu_2428_gamma_array_ce0;
    end else begin
        batch_normalization_5_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132))) begin
        batch_normalization_5_ce1 = 1'b1;
    end else begin
        batch_normalization_5_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        batch_normalization_5_d0 = 32'd1066491955;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        batch_normalization_5_d0 = 32'd1066640536;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        batch_normalization_5_d0 = 32'd1066492675;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        batch_normalization_5_d0 = 32'd1066648240;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        batch_normalization_5_d0 = 32'd1066515602;
    end else begin
        batch_normalization_5_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        batch_normalization_5_d1 = 32'd1066603009;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        batch_normalization_5_d1 = 32'd1066550812;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        batch_normalization_5_d1 = 32'd1066548817;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        batch_normalization_5_d1 = 32'd1066331450;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        batch_normalization_5_d1 = 32'd1066668918;
    end else begin
        batch_normalization_5_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132))) begin
        batch_normalization_5_we0 = 1'b1;
    end else begin
        batch_normalization_5_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132))) begin
        batch_normalization_5_we1 = 1'b1;
    end else begin
        batch_normalization_5_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        batch_normalization_6_address0 = 12'd8;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        batch_normalization_6_address0 = 12'd6;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        batch_normalization_6_address0 = 12'd4;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        batch_normalization_6_address0 = 12'd2;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        batch_normalization_6_address0 = 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state149)) begin
        batch_normalization_6_address0 = grp_k2c_batch_norm_fu_2428_mean_array_address0;
    end else begin
        batch_normalization_6_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        batch_normalization_6_address1 = 12'd9;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        batch_normalization_6_address1 = 12'd7;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        batch_normalization_6_address1 = 12'd5;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        batch_normalization_6_address1 = 12'd3;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        batch_normalization_6_address1 = 12'd1;
    end else begin
        batch_normalization_6_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132))) begin
        batch_normalization_6_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state149)) begin
        batch_normalization_6_ce0 = grp_k2c_batch_norm_fu_2428_mean_array_ce0;
    end else begin
        batch_normalization_6_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132))) begin
        batch_normalization_6_ce1 = 1'b1;
    end else begin
        batch_normalization_6_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        batch_normalization_6_d0 = 32'd3169029603;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        batch_normalization_6_d0 = 32'd3150635416;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        batch_normalization_6_d0 = 32'd1034059984;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        batch_normalization_6_d0 = 32'd1025097377;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        batch_normalization_6_d0 = 32'd3158135508;
    end else begin
        batch_normalization_6_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        batch_normalization_6_d1 = 32'd3174602333;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        batch_normalization_6_d1 = 32'd3180465104;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        batch_normalization_6_d1 = 32'd1021431191;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        batch_normalization_6_d1 = 32'd3124603788;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        batch_normalization_6_d1 = 32'd1015698058;
    end else begin
        batch_normalization_6_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132))) begin
        batch_normalization_6_we0 = 1'b1;
    end else begin
        batch_normalization_6_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132))) begin
        batch_normalization_6_we1 = 1'b1;
    end else begin
        batch_normalization_6_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state154)) begin
        batch_normalization_7_address0 = tmp_76_fu_2753_p1;
    end else if ((1'b1 == ap_CS_fsm_state150)) begin
        batch_normalization_7_address0 = i_1_cast_fu_2733_p1;
    end else if ((1'b1 == ap_CS_fsm_state132)) begin
        batch_normalization_7_address0 = 12'd8;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        batch_normalization_7_address0 = 12'd6;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        batch_normalization_7_address0 = 12'd4;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        batch_normalization_7_address0 = 12'd2;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        batch_normalization_7_address0 = 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state149)) begin
        batch_normalization_7_address0 = grp_k2c_batch_norm_fu_2428_outputs_array_address0;
    end else begin
        batch_normalization_7_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state153)) begin
        batch_normalization_7_address1 = batch_normalization_21_reg_3099;
    end else if ((1'b1 == ap_CS_fsm_state132)) begin
        batch_normalization_7_address1 = 12'd9;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        batch_normalization_7_address1 = 12'd7;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        batch_normalization_7_address1 = 12'd5;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        batch_normalization_7_address1 = 12'd3;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        batch_normalization_7_address1 = 12'd1;
    end else begin
        batch_normalization_7_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state150) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132))) begin
        batch_normalization_7_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state149)) begin
        batch_normalization_7_ce0 = grp_k2c_batch_norm_fu_2428_outputs_array_ce0;
    end else begin
        batch_normalization_7_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132) | ((1'b1 == ap_CS_fsm_state153) & (grp_generic_tanh_float_s_fu_2415_ap_done == 1'b1)))) begin
        batch_normalization_7_ce1 = 1'b1;
    end else begin
        batch_normalization_7_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132))) begin
        batch_normalization_7_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state149)) begin
        batch_normalization_7_d0 = grp_k2c_batch_norm_fu_2428_outputs_array_d0;
    end else begin
        batch_normalization_7_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state153)) begin
        batch_normalization_7_d1 = grp_generic_tanh_float_s_fu_2415_ap_return;
    end else if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132))) begin
        batch_normalization_7_d1 = 32'd0;
    end else begin
        batch_normalization_7_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132))) begin
        batch_normalization_7_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state149)) begin
        batch_normalization_7_we0 = grp_k2c_batch_norm_fu_2428_outputs_array_we0;
    end else begin
        batch_normalization_7_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state132) | ((1'b1 == ap_CS_fsm_state153) & (grp_generic_tanh_float_s_fu_2415_ap_done == 1'b1)))) begin
        batch_normalization_7_we1 = 1'b1;
    end else begin
        batch_normalization_7_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state136)) begin
        batch_normalization_9_ce0 = grp_k2c_batch_norm_fu_2428_mean_array_ce0;
    end else begin
        batch_normalization_9_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state136)) begin
        batch_normalization_s_ce0 = grp_k2c_batch_norm_fu_2428_stdev_array_ce0;
    end else begin
        batch_normalization_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        dense_1_bias_array_address0 = 12'd8;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        dense_1_bias_array_address0 = 12'd6;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        dense_1_bias_array_address0 = 12'd4;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        dense_1_bias_array_address0 = 12'd2;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        dense_1_bias_array_address0 = 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        dense_1_bias_array_address0 = grp_k2c_dense2_1_fu_2394_bias_array_address0;
    end else begin
        dense_1_bias_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        dense_1_bias_array_address1 = 12'd9;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        dense_1_bias_array_address1 = 12'd7;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        dense_1_bias_array_address1 = 12'd5;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        dense_1_bias_array_address1 = 12'd3;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        dense_1_bias_array_address1 = 12'd1;
    end else begin
        dense_1_bias_array_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state102))) begin
        dense_1_bias_array_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        dense_1_bias_array_ce0 = grp_k2c_dense2_1_fu_2394_bias_array_ce0;
    end else begin
        dense_1_bias_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state102))) begin
        dense_1_bias_array_ce1 = 1'b1;
    end else begin
        dense_1_bias_array_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        dense_1_bias_array_d0 = 32'd3099075427;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        dense_1_bias_array_d0 = 32'd3033909344;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        dense_1_bias_array_d0 = 32'd3102619817;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        dense_1_bias_array_d0 = 32'd955528402;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        dense_1_bias_array_d0 = 32'd3091870894;
    end else begin
        dense_1_bias_array_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        dense_1_bias_array_d1 = 32'd953842554;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        dense_1_bias_array_d1 = 32'd943839945;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        dense_1_bias_array_d1 = 32'd3105549397;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        dense_1_bias_array_d1 = 32'd965382960;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        dense_1_bias_array_d1 = 32'd942852989;
    end else begin
        dense_1_bias_array_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state102))) begin
        dense_1_bias_array_we0 = 1'b1;
    end else begin
        dense_1_bias_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state102))) begin
        dense_1_bias_array_we1 = 1'b1;
    end else begin
        dense_1_bias_array_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        dense_1_fwork_address0 = tmp_65_fu_2593_p1;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        dense_1_fwork_address0 = grp_k2c_dense2_1_fu_2394_fwork_address0;
    end else begin
        dense_1_fwork_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        dense_1_fwork_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        dense_1_fwork_ce0 = grp_k2c_dense2_1_fu_2394_fwork_ce0;
    end else begin
        dense_1_fwork_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state147)) begin
        dense_1_fwork_ce1 = grp_k2c_dense2_1_fu_2394_fwork_ce1;
    end else begin
        dense_1_fwork_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        dense_1_fwork_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        dense_1_fwork_d0 = grp_k2c_dense2_1_fu_2394_fwork_d0;
    end else begin
        dense_1_fwork_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state103)) begin
        dense_1_fwork_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        dense_1_fwork_we0 = grp_k2c_dense2_1_fu_2394_fwork_we0;
    end else begin
        dense_1_fwork_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        dense_1_output_array_address0 = 12'd8;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        dense_1_output_array_address0 = 12'd6;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        dense_1_output_array_address0 = 12'd4;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        dense_1_output_array_address0 = 12'd2;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        dense_1_output_array_address0 = 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state149)) begin
        dense_1_output_array_address0 = grp_k2c_batch_norm_fu_2428_inputs_array_address0;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        dense_1_output_array_address0 = grp_k2c_dense2_1_fu_2394_output_array_address0;
    end else begin
        dense_1_output_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        dense_1_output_array_address1 = 12'd9;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        dense_1_output_array_address1 = 12'd7;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        dense_1_output_array_address1 = 12'd5;
    end else if ((1'b1 == ap_CS_fsm_state99)) begin
        dense_1_output_array_address1 = 12'd3;
    end else if ((1'b1 == ap_CS_fsm_state98)) begin
        dense_1_output_array_address1 = 12'd1;
    end else begin
        dense_1_output_array_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state102))) begin
        dense_1_output_array_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state149)) begin
        dense_1_output_array_ce0 = grp_k2c_batch_norm_fu_2428_inputs_array_ce0;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        dense_1_output_array_ce0 = grp_k2c_dense2_1_fu_2394_output_array_ce0;
    end else begin
        dense_1_output_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state102))) begin
        dense_1_output_array_ce1 = 1'b1;
    end else begin
        dense_1_output_array_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state102))) begin
        dense_1_output_array_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        dense_1_output_array_d0 = grp_k2c_dense2_1_fu_2394_output_array_d0;
    end else begin
        dense_1_output_array_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state102))) begin
        dense_1_output_array_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        dense_1_output_array_we0 = grp_k2c_dense2_1_fu_2394_output_array_we0;
    end else begin
        dense_1_output_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state99) | (1'b1 == ap_CS_fsm_state98) | (1'b1 == ap_CS_fsm_state102))) begin
        dense_1_output_array_we1 = 1'b1;
    end else begin
        dense_1_output_array_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        dense_1_output_shape_address0 = 3'd4;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        dense_1_output_shape_address0 = 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        dense_1_output_shape_address0 = 3'd0;
    end else begin
        dense_1_output_shape_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state102)) begin
        dense_1_output_shape_address1 = 3'd3;
    end else if ((1'b1 == ap_CS_fsm_state101)) begin
        dense_1_output_shape_address1 = 3'd2;
    end else begin
        dense_1_output_shape_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state102))) begin
        dense_1_output_shape_ce0 = 1'b1;
    end else begin
        dense_1_output_shape_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state102))) begin
        dense_1_output_shape_ce1 = 1'b1;
    end else begin
        dense_1_output_shape_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state102))) begin
        dense_1_output_shape_d0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state100)) begin
        dense_1_output_shape_d0 = 64'd10;
    end else begin
        dense_1_output_shape_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state100) | (1'b1 == ap_CS_fsm_state102))) begin
        dense_1_output_shape_we0 = 1'b1;
    end else begin
        dense_1_output_shape_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state101) | (1'b1 == ap_CS_fsm_state102))) begin
        dense_1_output_shape_we1 = 1'b1;
    end else begin
        dense_1_output_shape_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        dense_2_bias_array_address0 = 12'd4;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        dense_2_bias_array_address0 = 12'd2;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        dense_2_bias_array_address0 = 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        dense_2_bias_array_address0 = grp_k2c_dense2_fu_2351_bias_array_address0;
    end else begin
        dense_2_bias_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        dense_2_bias_array_address1 = 12'd5;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        dense_2_bias_array_address1 = 12'd3;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        dense_2_bias_array_address1 = 12'd1;
    end else begin
        dense_2_bias_array_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state132))) begin
        dense_2_bias_array_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        dense_2_bias_array_ce0 = grp_k2c_dense2_fu_2351_bias_array_ce0;
    end else begin
        dense_2_bias_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state132))) begin
        dense_2_bias_array_ce1 = 1'b1;
    end else begin
        dense_2_bias_array_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        dense_2_bias_array_d0 = 32'd1020906425;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        dense_2_bias_array_d0 = 32'd3170988174;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        dense_2_bias_array_d0 = 32'd1030223071;
    end else begin
        dense_2_bias_array_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        dense_2_bias_array_d1 = 32'd3170522999;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        dense_2_bias_array_d1 = 32'd3141682015;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        dense_2_bias_array_d1 = 32'd3160219007;
    end else begin
        dense_2_bias_array_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state132))) begin
        dense_2_bias_array_we0 = 1'b1;
    end else begin
        dense_2_bias_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state132))) begin
        dense_2_bias_array_we1 = 1'b1;
    end else begin
        dense_2_bias_array_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state133)) begin
        dense_2_fwork_address0 = tmp_67_fu_2652_p1;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        dense_2_fwork_address0 = grp_k2c_dense2_fu_2351_fwork_address0;
    end else begin
        dense_2_fwork_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state133)) begin
        dense_2_fwork_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        dense_2_fwork_ce0 = grp_k2c_dense2_fu_2351_fwork_ce0;
    end else begin
        dense_2_fwork_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state160)) begin
        dense_2_fwork_ce1 = grp_k2c_dense2_fu_2351_fwork_ce1;
    end else begin
        dense_2_fwork_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state133)) begin
        dense_2_fwork_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        dense_2_fwork_d0 = grp_k2c_dense2_fu_2351_fwork_d0;
    end else begin
        dense_2_fwork_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state133)) begin
        dense_2_fwork_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        dense_2_fwork_we0 = grp_k2c_dense2_fu_2351_fwork_we0;
    end else begin
        dense_2_fwork_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        dense_2_kernel_array_address0 = 12'd58;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        dense_2_kernel_array_address0 = 12'd56;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        dense_2_kernel_array_address0 = 12'd54;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        dense_2_kernel_array_address0 = 12'd52;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        dense_2_kernel_array_address0 = 12'd50;
    end else if ((1'b1 == ap_CS_fsm_state127)) begin
        dense_2_kernel_array_address0 = 12'd48;
    end else if ((1'b1 == ap_CS_fsm_state126)) begin
        dense_2_kernel_array_address0 = 12'd46;
    end else if ((1'b1 == ap_CS_fsm_state125)) begin
        dense_2_kernel_array_address0 = 12'd44;
    end else if ((1'b1 == ap_CS_fsm_state124)) begin
        dense_2_kernel_array_address0 = 12'd42;
    end else if ((1'b1 == ap_CS_fsm_state123)) begin
        dense_2_kernel_array_address0 = 12'd40;
    end else if ((1'b1 == ap_CS_fsm_state122)) begin
        dense_2_kernel_array_address0 = 12'd38;
    end else if ((1'b1 == ap_CS_fsm_state121)) begin
        dense_2_kernel_array_address0 = 12'd36;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        dense_2_kernel_array_address0 = 12'd34;
    end else if ((1'b1 == ap_CS_fsm_state119)) begin
        dense_2_kernel_array_address0 = 12'd32;
    end else if ((1'b1 == ap_CS_fsm_state118)) begin
        dense_2_kernel_array_address0 = 12'd30;
    end else if ((1'b1 == ap_CS_fsm_state117)) begin
        dense_2_kernel_array_address0 = 12'd28;
    end else if ((1'b1 == ap_CS_fsm_state116)) begin
        dense_2_kernel_array_address0 = 12'd26;
    end else if ((1'b1 == ap_CS_fsm_state115)) begin
        dense_2_kernel_array_address0 = 12'd24;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        dense_2_kernel_array_address0 = 12'd22;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        dense_2_kernel_array_address0 = 12'd20;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        dense_2_kernel_array_address0 = 12'd18;
    end else if ((1'b1 == ap_CS_fsm_state111)) begin
        dense_2_kernel_array_address0 = 12'd16;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        dense_2_kernel_array_address0 = 12'd14;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        dense_2_kernel_array_address0 = 12'd12;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        dense_2_kernel_array_address0 = 12'd10;
    end else if ((1'b1 == ap_CS_fsm_state107)) begin
        dense_2_kernel_array_address0 = 12'd8;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        dense_2_kernel_array_address0 = 12'd6;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        dense_2_kernel_array_address0 = 12'd4;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        dense_2_kernel_array_address0 = 12'd2;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        dense_2_kernel_array_address0 = 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        dense_2_kernel_array_address0 = grp_k2c_dense2_fu_2351_kernel_array_address0;
    end else begin
        dense_2_kernel_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        dense_2_kernel_array_address1 = 12'd59;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        dense_2_kernel_array_address1 = 12'd57;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        dense_2_kernel_array_address1 = 12'd55;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        dense_2_kernel_array_address1 = 12'd53;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        dense_2_kernel_array_address1 = 12'd51;
    end else if ((1'b1 == ap_CS_fsm_state127)) begin
        dense_2_kernel_array_address1 = 12'd49;
    end else if ((1'b1 == ap_CS_fsm_state126)) begin
        dense_2_kernel_array_address1 = 12'd47;
    end else if ((1'b1 == ap_CS_fsm_state125)) begin
        dense_2_kernel_array_address1 = 12'd45;
    end else if ((1'b1 == ap_CS_fsm_state124)) begin
        dense_2_kernel_array_address1 = 12'd43;
    end else if ((1'b1 == ap_CS_fsm_state123)) begin
        dense_2_kernel_array_address1 = 12'd41;
    end else if ((1'b1 == ap_CS_fsm_state122)) begin
        dense_2_kernel_array_address1 = 12'd39;
    end else if ((1'b1 == ap_CS_fsm_state121)) begin
        dense_2_kernel_array_address1 = 12'd37;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        dense_2_kernel_array_address1 = 12'd35;
    end else if ((1'b1 == ap_CS_fsm_state119)) begin
        dense_2_kernel_array_address1 = 12'd33;
    end else if ((1'b1 == ap_CS_fsm_state118)) begin
        dense_2_kernel_array_address1 = 12'd31;
    end else if ((1'b1 == ap_CS_fsm_state117)) begin
        dense_2_kernel_array_address1 = 12'd29;
    end else if ((1'b1 == ap_CS_fsm_state116)) begin
        dense_2_kernel_array_address1 = 12'd27;
    end else if ((1'b1 == ap_CS_fsm_state115)) begin
        dense_2_kernel_array_address1 = 12'd25;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        dense_2_kernel_array_address1 = 12'd23;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        dense_2_kernel_array_address1 = 12'd21;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        dense_2_kernel_array_address1 = 12'd19;
    end else if ((1'b1 == ap_CS_fsm_state111)) begin
        dense_2_kernel_array_address1 = 12'd17;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        dense_2_kernel_array_address1 = 12'd15;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        dense_2_kernel_array_address1 = 12'd13;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        dense_2_kernel_array_address1 = 12'd11;
    end else if ((1'b1 == ap_CS_fsm_state107)) begin
        dense_2_kernel_array_address1 = 12'd9;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        dense_2_kernel_array_address1 = 12'd7;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        dense_2_kernel_array_address1 = 12'd5;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        dense_2_kernel_array_address1 = 12'd3;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        dense_2_kernel_array_address1 = 12'd1;
    end else begin
        dense_2_kernel_array_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state132))) begin
        dense_2_kernel_array_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        dense_2_kernel_array_ce0 = grp_k2c_dense2_fu_2351_kernel_array_ce0;
    end else begin
        dense_2_kernel_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state103) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state132))) begin
        dense_2_kernel_array_ce1 = 1'b1;
    end else begin
        dense_2_kernel_array_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        dense_2_kernel_array_d0 = 32'd3201791281;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        dense_2_kernel_array_d0 = 32'd1049410282;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        dense_2_kernel_array_d0 = 32'd3204755047;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        dense_2_kernel_array_d0 = 32'd3208664019;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        dense_2_kernel_array_d0 = 32'd1057977392;
    end else if ((1'b1 == ap_CS_fsm_state127)) begin
        dense_2_kernel_array_d0 = 32'd3208308885;
    end else if ((1'b1 == ap_CS_fsm_state126)) begin
        dense_2_kernel_array_d0 = 32'd1062679634;
    end else if ((1'b1 == ap_CS_fsm_state125)) begin
        dense_2_kernel_array_d0 = 32'd1050460177;
    end else if ((1'b1 == ap_CS_fsm_state124)) begin
        dense_2_kernel_array_d0 = 32'd1043079073;
    end else if ((1'b1 == ap_CS_fsm_state123)) begin
        dense_2_kernel_array_d0 = 32'd3198187535;
    end else if ((1'b1 == ap_CS_fsm_state122)) begin
        dense_2_kernel_array_d0 = 32'd3200012788;
    end else if ((1'b1 == ap_CS_fsm_state121)) begin
        dense_2_kernel_array_d0 = 32'd1054903312;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        dense_2_kernel_array_d0 = 32'd3173263293;
    end else if ((1'b1 == ap_CS_fsm_state119)) begin
        dense_2_kernel_array_d0 = 32'd1054948033;
    end else if ((1'b1 == ap_CS_fsm_state118)) begin
        dense_2_kernel_array_d0 = 32'd3210230539;
    end else if ((1'b1 == ap_CS_fsm_state117)) begin
        dense_2_kernel_array_d0 = 32'd1039770813;
    end else if ((1'b1 == ap_CS_fsm_state116)) begin
        dense_2_kernel_array_d0 = 32'd3207481738;
    end else if ((1'b1 == ap_CS_fsm_state115)) begin
        dense_2_kernel_array_d0 = 32'd3211249493;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        dense_2_kernel_array_d0 = 32'd1062843267;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        dense_2_kernel_array_d0 = 32'd1056681086;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        dense_2_kernel_array_d0 = 32'd3191561303;
    end else if ((1'b1 == ap_CS_fsm_state111)) begin
        dense_2_kernel_array_d0 = 32'd1061063822;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        dense_2_kernel_array_d0 = 32'd3205910778;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        dense_2_kernel_array_d0 = 32'd1060291387;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        dense_2_kernel_array_d0 = 32'd3206146015;
    end else if ((1'b1 == ap_CS_fsm_state107)) begin
        dense_2_kernel_array_d0 = 32'd3207732640;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        dense_2_kernel_array_d0 = 32'd3207665430;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        dense_2_kernel_array_d0 = 32'd3189446973;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        dense_2_kernel_array_d0 = 32'd3209817735;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        dense_2_kernel_array_d0 = 32'd3169865259;
    end else begin
        dense_2_kernel_array_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        dense_2_kernel_array_d1 = 32'd1062879589;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        dense_2_kernel_array_d1 = 32'd3202524235;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        dense_2_kernel_array_d1 = 32'd1036874612;
    end else if ((1'b1 == ap_CS_fsm_state129)) begin
        dense_2_kernel_array_d1 = 32'd1040478008;
    end else if ((1'b1 == ap_CS_fsm_state128)) begin
        dense_2_kernel_array_d1 = 32'd1061718919;
    end else if ((1'b1 == ap_CS_fsm_state127)) begin
        dense_2_kernel_array_d1 = 32'd3192682527;
    end else if ((1'b1 == ap_CS_fsm_state126)) begin
        dense_2_kernel_array_d1 = 32'd3206626941;
    end else if ((1'b1 == ap_CS_fsm_state125)) begin
        dense_2_kernel_array_d1 = 32'd3201471907;
    end else if ((1'b1 == ap_CS_fsm_state124)) begin
        dense_2_kernel_array_d1 = 32'd1063067942;
    end else if ((1'b1 == ap_CS_fsm_state123)) begin
        dense_2_kernel_array_d1 = 32'd1051220635;
    end else if ((1'b1 == ap_CS_fsm_state122)) begin
        dense_2_kernel_array_d1 = 32'd1025392083;
    end else if ((1'b1 == ap_CS_fsm_state121)) begin
        dense_2_kernel_array_d1 = 32'd1031471116;
    end else if ((1'b1 == ap_CS_fsm_state120)) begin
        dense_2_kernel_array_d1 = 32'd3205555640;
    end else if ((1'b1 == ap_CS_fsm_state119)) begin
        dense_2_kernel_array_d1 = 32'd3211272684;
    end else if ((1'b1 == ap_CS_fsm_state118)) begin
        dense_2_kernel_array_d1 = 32'd3206056862;
    end else if ((1'b1 == ap_CS_fsm_state117)) begin
        dense_2_kernel_array_d1 = 32'd3197720857;
    end else if ((1'b1 == ap_CS_fsm_state116)) begin
        dense_2_kernel_array_d1 = 32'd1062373495;
    end else if ((1'b1 == ap_CS_fsm_state115)) begin
        dense_2_kernel_array_d1 = 32'd3208810576;
    end else if ((1'b1 == ap_CS_fsm_state114)) begin
        dense_2_kernel_array_d1 = 32'd3188847380;
    end else if ((1'b1 == ap_CS_fsm_state113)) begin
        dense_2_kernel_array_d1 = 32'd1059188096;
    end else if ((1'b1 == ap_CS_fsm_state112)) begin
        dense_2_kernel_array_d1 = 32'd3209505831;
    end else if ((1'b1 == ap_CS_fsm_state111)) begin
        dense_2_kernel_array_d1 = 32'd1063146346;
    end else if ((1'b1 == ap_CS_fsm_state110)) begin
        dense_2_kernel_array_d1 = 32'd3191491555;
    end else if ((1'b1 == ap_CS_fsm_state109)) begin
        dense_2_kernel_array_d1 = 32'd3192592516;
    end else if ((1'b1 == ap_CS_fsm_state108)) begin
        dense_2_kernel_array_d1 = 32'd1053523864;
    end else if ((1'b1 == ap_CS_fsm_state107)) begin
        dense_2_kernel_array_d1 = 32'd3180337550;
    end else if ((1'b1 == ap_CS_fsm_state106)) begin
        dense_2_kernel_array_d1 = 32'd1035682847;
    end else if ((1'b1 == ap_CS_fsm_state105)) begin
        dense_2_kernel_array_d1 = 32'd3209882177;
    end else if ((1'b1 == ap_CS_fsm_state104)) begin
        dense_2_kernel_array_d1 = 32'd3188359873;
    end else if ((1'b1 == ap_CS_fsm_state103)) begin
        dense_2_kernel_array_d1 = 32'd1062756077;
    end else begin
        dense_2_kernel_array_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state132) | ((tmp_66_fu_2598_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state103)))) begin
        dense_2_kernel_array_we0 = 1'b1;
    end else begin
        dense_2_kernel_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state129) | (1'b1 == ap_CS_fsm_state128) | (1'b1 == ap_CS_fsm_state127) | (1'b1 == ap_CS_fsm_state126) | (1'b1 == ap_CS_fsm_state125) | (1'b1 == ap_CS_fsm_state124) | (1'b1 == ap_CS_fsm_state123) | (1'b1 == ap_CS_fsm_state122) | (1'b1 == ap_CS_fsm_state121) | (1'b1 == ap_CS_fsm_state120) | (1'b1 == ap_CS_fsm_state119) | (1'b1 == ap_CS_fsm_state118) | (1'b1 == ap_CS_fsm_state117) | (1'b1 == ap_CS_fsm_state116) | (1'b1 == ap_CS_fsm_state115) | (1'b1 == ap_CS_fsm_state114) | (1'b1 == ap_CS_fsm_state113) | (1'b1 == ap_CS_fsm_state112) | (1'b1 == ap_CS_fsm_state111) | (1'b1 == ap_CS_fsm_state110) | (1'b1 == ap_CS_fsm_state109) | (1'b1 == ap_CS_fsm_state108) | (1'b1 == ap_CS_fsm_state107) | (1'b1 == ap_CS_fsm_state106) | (1'b1 == ap_CS_fsm_state105) | (1'b1 == ap_CS_fsm_state104) | (1'b1 == ap_CS_fsm_state132) | ((tmp_66_fu_2598_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state103)))) begin
        dense_2_kernel_array_we1 = 1'b1;
    end else begin
        dense_2_kernel_array_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        dense_2_kernel_shape_address0 = 3'd4;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        dense_2_kernel_shape_address0 = 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        dense_2_kernel_shape_address0 = 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        dense_2_kernel_shape_address0 = grp_k2c_dense2_fu_2351_kernel_shape_address0;
    end else begin
        dense_2_kernel_shape_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        dense_2_kernel_shape_address1 = 3'd3;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        dense_2_kernel_shape_address1 = 3'd2;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        dense_2_kernel_shape_address1 = grp_k2c_dense2_fu_2351_kernel_shape_address1;
    end else begin
        dense_2_kernel_shape_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state132))) begin
        dense_2_kernel_shape_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        dense_2_kernel_shape_ce0 = grp_k2c_dense2_fu_2351_kernel_shape_ce0;
    end else begin
        dense_2_kernel_shape_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state132))) begin
        dense_2_kernel_shape_ce1 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        dense_2_kernel_shape_ce1 = grp_k2c_dense2_fu_2351_kernel_shape_ce1;
    end else begin
        dense_2_kernel_shape_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state132)) begin
        dense_2_kernel_shape_d0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state131)) begin
        dense_2_kernel_shape_d0 = 64'd6;
    end else if ((1'b1 == ap_CS_fsm_state130)) begin
        dense_2_kernel_shape_d0 = 64'd10;
    end else begin
        dense_2_kernel_shape_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state132))) begin
        dense_2_kernel_shape_we0 = 1'b1;
    end else begin
        dense_2_kernel_shape_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state132))) begin
        dense_2_kernel_shape_we1 = 1'b1;
    end else begin
        dense_2_kernel_shape_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state201)) begin
        dense_2_output_array_address0 = tmp_88_fu_2935_p1;
    end else if (((1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1) & (1'b0 == ap_block_pp1_stage0))) begin
        dense_2_output_array_address0 = i_3_cast3_fu_2921_p1;
    end else if (((1'b1 == ap_CS_fsm_state195) | (1'b1 == ap_CS_fsm_state200) | (1'b1 == ap_CS_fsm_state132))) begin
        dense_2_output_array_address0 = 12'd4;
    end else if (((1'b1 == ap_CS_fsm_state199) | (1'b1 == ap_CS_fsm_state194) | (1'b1 == ap_CS_fsm_state131))) begin
        dense_2_output_array_address0 = 12'd2;
    end else if (((1'b1 == ap_CS_fsm_state198) | (1'b1 == ap_CS_fsm_state193) | (1'b1 == ap_CS_fsm_state161) | (1'b1 == ap_CS_fsm_state130))) begin
        dense_2_output_array_address0 = 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        dense_2_output_array_address0 = grp_k2c_dense2_fu_2351_output_array_address0;
    end else begin
        dense_2_output_array_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        dense_2_output_array_address1 = dense_2_output_array_2_reg_3194_pp1_iter3_reg;
    end else if (((ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0) & (1'b0 == ap_block_pp0_stage0))) begin
        dense_2_output_array_address1 = i_2_cast4_fu_2806_p1;
    end else if (((1'b1 == ap_CS_fsm_state195) | (1'b1 == ap_CS_fsm_state200) | (1'b1 == ap_CS_fsm_state132))) begin
        dense_2_output_array_address1 = 12'd5;
    end else if (((1'b1 == ap_CS_fsm_state199) | (1'b1 == ap_CS_fsm_state194) | (1'b1 == ap_CS_fsm_state131))) begin
        dense_2_output_array_address1 = 12'd3;
    end else if (((1'b1 == ap_CS_fsm_state198) | (1'b1 == ap_CS_fsm_state193) | (1'b1 == ap_CS_fsm_state130))) begin
        dense_2_output_array_address1 = 12'd1;
    end else begin
        dense_2_output_array_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state201) | (1'b1 == ap_CS_fsm_state195) | (1'b1 == ap_CS_fsm_state199) | (1'b1 == ap_CS_fsm_state198) | (1'b1 == ap_CS_fsm_state194) | (1'b1 == ap_CS_fsm_state200) | (1'b1 == ap_CS_fsm_state193) | (1'b1 == ap_CS_fsm_state161) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state132) | ((1'b0 == ap_block_pp1_stage0_11001) & (1'b1 == ap_CS_fsm_pp1_stage0) & (ap_enable_reg_pp1_iter0 == 1'b1)))) begin
        dense_2_output_array_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        dense_2_output_array_ce0 = grp_k2c_dense2_fu_2351_output_array_ce0;
    end else begin
        dense_2_output_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state195) | (1'b1 == ap_CS_fsm_state199) | (1'b1 == ap_CS_fsm_state198) | (1'b1 == ap_CS_fsm_state194) | (1'b1 == ap_CS_fsm_state200) | (1'b1 == ap_CS_fsm_state193) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state132) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp1_stage1_11001) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        dense_2_output_array_ce1 = 1'b1;
    end else begin
        dense_2_output_array_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state199) | (1'b1 == ap_CS_fsm_state198) | (1'b1 == ap_CS_fsm_state200))) begin
        dense_2_output_array_d0 = reg_2513;
    end else if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state132))) begin
        dense_2_output_array_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        dense_2_output_array_d0 = grp_k2c_dense2_fu_2351_output_array_d0;
    end else begin
        dense_2_output_array_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state199) | (1'b1 == ap_CS_fsm_state198) | (1'b1 == ap_CS_fsm_state200))) begin
        dense_2_output_array_d1 = reg_2518;
    end else if (((1'b0 == ap_block_pp1_stage1) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1))) begin
        dense_2_output_array_d1 = grp_fu_2477_p2;
    end else if (((1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state132))) begin
        dense_2_output_array_d1 = 32'd0;
    end else begin
        dense_2_output_array_d1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state199) | (1'b1 == ap_CS_fsm_state198) | (1'b1 == ap_CS_fsm_state200) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state132))) begin
        dense_2_output_array_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        dense_2_output_array_we0 = grp_k2c_dense2_fu_2351_output_array_we0;
    end else begin
        dense_2_output_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state199) | (1'b1 == ap_CS_fsm_state198) | (1'b1 == ap_CS_fsm_state200) | (1'b1 == ap_CS_fsm_state131) | (1'b1 == ap_CS_fsm_state130) | (1'b1 == ap_CS_fsm_state132) | ((1'b0 == ap_block_pp1_stage1_11001) & (tmp_83_reg_3185_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage1)))) begin
        dense_2_output_array_we1 = 1'b1;
    end else begin
        dense_2_output_array_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        dense_fwork_address0 = tmp_63_fu_2552_p1;
    end else if ((1'b1 == ap_CS_fsm_state134)) begin
        dense_fwork_address0 = grp_k2c_dense_fu_2374_fwork_address0;
    end else begin
        dense_fwork_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        dense_fwork_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state134)) begin
        dense_fwork_ce0 = grp_k2c_dense_fu_2374_fwork_ce0;
    end else begin
        dense_fwork_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state134)) begin
        dense_fwork_ce1 = grp_k2c_dense_fu_2374_fwork_ce1;
    end else begin
        dense_fwork_ce1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        dense_fwork_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state134)) begin
        dense_fwork_d0 = grp_k2c_dense_fu_2374_fwork_d0;
    end else begin
        dense_fwork_d0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state53)) begin
        dense_fwork_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state134)) begin
        dense_fwork_we0 = grp_k2c_dense_fu_2374_fwork_we0;
    end else begin
        dense_fwork_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        dense_kernel_array_address0 = tmp_58_reg_2967;
    end else if ((1'b1 == ap_CS_fsm_state134)) begin
        dense_kernel_array_address0 = grp_k2c_dense_fu_2374_kernel_array_address0;
    end else begin
        dense_kernel_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        dense_kernel_array_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state134)) begin
        dense_kernel_array_ce0 = grp_k2c_dense_fu_2374_kernel_array_ce0;
    end else begin
        dense_kernel_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state52)) begin
        dense_kernel_array_we0 = 1'b1;
    end else begin
        dense_kernel_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        dense_output_array_address0 = 12'd98;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        dense_output_array_address0 = 12'd96;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        dense_output_array_address0 = 12'd94;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        dense_output_array_address0 = 12'd92;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        dense_output_array_address0 = 12'd90;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        dense_output_array_address0 = 12'd88;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        dense_output_array_address0 = 12'd86;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        dense_output_array_address0 = 12'd84;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        dense_output_array_address0 = 12'd82;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        dense_output_array_address0 = 12'd80;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        dense_output_array_address0 = 12'd78;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        dense_output_array_address0 = 12'd76;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        dense_output_array_address0 = 12'd74;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        dense_output_array_address0 = 12'd72;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        dense_output_array_address0 = 12'd70;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        dense_output_array_address0 = 12'd68;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        dense_output_array_address0 = 12'd66;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        dense_output_array_address0 = 12'd64;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        dense_output_array_address0 = 12'd62;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        dense_output_array_address0 = 12'd60;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        dense_output_array_address0 = 12'd58;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        dense_output_array_address0 = 12'd56;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        dense_output_array_address0 = 12'd54;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        dense_output_array_address0 = 12'd52;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        dense_output_array_address0 = 12'd50;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        dense_output_array_address0 = 12'd48;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        dense_output_array_address0 = 12'd46;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        dense_output_array_address0 = 12'd44;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        dense_output_array_address0 = 12'd42;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        dense_output_array_address0 = 12'd40;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        dense_output_array_address0 = 12'd38;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        dense_output_array_address0 = 12'd36;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        dense_output_array_address0 = 12'd34;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        dense_output_array_address0 = 12'd32;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        dense_output_array_address0 = 12'd30;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        dense_output_array_address0 = 12'd28;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        dense_output_array_address0 = 12'd26;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dense_output_array_address0 = 12'd24;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        dense_output_array_address0 = 12'd22;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        dense_output_array_address0 = 12'd20;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        dense_output_array_address0 = 12'd18;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        dense_output_array_address0 = 12'd16;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        dense_output_array_address0 = 12'd14;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        dense_output_array_address0 = 12'd12;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dense_output_array_address0 = 12'd10;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        dense_output_array_address0 = 12'd8;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dense_output_array_address0 = 12'd6;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dense_output_array_address0 = 12'd4;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_output_array_address0 = 12'd2;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        dense_output_array_address0 = 12'd0;
    end else if ((1'b1 == ap_CS_fsm_state136)) begin
        dense_output_array_address0 = grp_k2c_batch_norm_fu_2428_inputs_array_address0;
    end else if ((1'b1 == ap_CS_fsm_state134)) begin
        dense_output_array_address0 = grp_k2c_dense_fu_2374_dense_output_array_address0;
    end else begin
        dense_output_array_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        dense_output_array_address1 = 12'd99;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        dense_output_array_address1 = 12'd97;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        dense_output_array_address1 = 12'd95;
    end else if ((1'b1 == ap_CS_fsm_state47)) begin
        dense_output_array_address1 = 12'd93;
    end else if ((1'b1 == ap_CS_fsm_state46)) begin
        dense_output_array_address1 = 12'd91;
    end else if ((1'b1 == ap_CS_fsm_state45)) begin
        dense_output_array_address1 = 12'd89;
    end else if ((1'b1 == ap_CS_fsm_state44)) begin
        dense_output_array_address1 = 12'd87;
    end else if ((1'b1 == ap_CS_fsm_state43)) begin
        dense_output_array_address1 = 12'd85;
    end else if ((1'b1 == ap_CS_fsm_state42)) begin
        dense_output_array_address1 = 12'd83;
    end else if ((1'b1 == ap_CS_fsm_state41)) begin
        dense_output_array_address1 = 12'd81;
    end else if ((1'b1 == ap_CS_fsm_state40)) begin
        dense_output_array_address1 = 12'd79;
    end else if ((1'b1 == ap_CS_fsm_state39)) begin
        dense_output_array_address1 = 12'd77;
    end else if ((1'b1 == ap_CS_fsm_state38)) begin
        dense_output_array_address1 = 12'd75;
    end else if ((1'b1 == ap_CS_fsm_state37)) begin
        dense_output_array_address1 = 12'd73;
    end else if ((1'b1 == ap_CS_fsm_state36)) begin
        dense_output_array_address1 = 12'd71;
    end else if ((1'b1 == ap_CS_fsm_state35)) begin
        dense_output_array_address1 = 12'd69;
    end else if ((1'b1 == ap_CS_fsm_state34)) begin
        dense_output_array_address1 = 12'd67;
    end else if ((1'b1 == ap_CS_fsm_state33)) begin
        dense_output_array_address1 = 12'd65;
    end else if ((1'b1 == ap_CS_fsm_state32)) begin
        dense_output_array_address1 = 12'd63;
    end else if ((1'b1 == ap_CS_fsm_state31)) begin
        dense_output_array_address1 = 12'd61;
    end else if ((1'b1 == ap_CS_fsm_state30)) begin
        dense_output_array_address1 = 12'd59;
    end else if ((1'b1 == ap_CS_fsm_state29)) begin
        dense_output_array_address1 = 12'd57;
    end else if ((1'b1 == ap_CS_fsm_state28)) begin
        dense_output_array_address1 = 12'd55;
    end else if ((1'b1 == ap_CS_fsm_state27)) begin
        dense_output_array_address1 = 12'd53;
    end else if ((1'b1 == ap_CS_fsm_state26)) begin
        dense_output_array_address1 = 12'd51;
    end else if ((1'b1 == ap_CS_fsm_state25)) begin
        dense_output_array_address1 = 12'd49;
    end else if ((1'b1 == ap_CS_fsm_state24)) begin
        dense_output_array_address1 = 12'd47;
    end else if ((1'b1 == ap_CS_fsm_state23)) begin
        dense_output_array_address1 = 12'd45;
    end else if ((1'b1 == ap_CS_fsm_state22)) begin
        dense_output_array_address1 = 12'd43;
    end else if ((1'b1 == ap_CS_fsm_state21)) begin
        dense_output_array_address1 = 12'd41;
    end else if ((1'b1 == ap_CS_fsm_state20)) begin
        dense_output_array_address1 = 12'd39;
    end else if ((1'b1 == ap_CS_fsm_state19)) begin
        dense_output_array_address1 = 12'd37;
    end else if ((1'b1 == ap_CS_fsm_state18)) begin
        dense_output_array_address1 = 12'd35;
    end else if ((1'b1 == ap_CS_fsm_state17)) begin
        dense_output_array_address1 = 12'd33;
    end else if ((1'b1 == ap_CS_fsm_state16)) begin
        dense_output_array_address1 = 12'd31;
    end else if ((1'b1 == ap_CS_fsm_state15)) begin
        dense_output_array_address1 = 12'd29;
    end else if ((1'b1 == ap_CS_fsm_state14)) begin
        dense_output_array_address1 = 12'd27;
    end else if ((1'b1 == ap_CS_fsm_state13)) begin
        dense_output_array_address1 = 12'd25;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        dense_output_array_address1 = 12'd23;
    end else if ((1'b1 == ap_CS_fsm_state11)) begin
        dense_output_array_address1 = 12'd21;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        dense_output_array_address1 = 12'd19;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        dense_output_array_address1 = 12'd17;
    end else if ((1'b1 == ap_CS_fsm_state8)) begin
        dense_output_array_address1 = 12'd15;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        dense_output_array_address1 = 12'd13;
    end else if ((1'b1 == ap_CS_fsm_state6)) begin
        dense_output_array_address1 = 12'd11;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        dense_output_array_address1 = 12'd9;
    end else if ((1'b1 == ap_CS_fsm_state4)) begin
        dense_output_array_address1 = 12'd7;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        dense_output_array_address1 = 12'd5;
    end else if ((1'b1 == ap_CS_fsm_state2)) begin
        dense_output_array_address1 = 12'd3;
    end else if ((1'b1 == ap_CS_fsm_state1)) begin
        dense_output_array_address1 = 12'd1;
    end else begin
        dense_output_array_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        dense_output_array_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state136)) begin
        dense_output_array_ce0 = grp_k2c_batch_norm_fu_2428_inputs_array_ce0;
    end else if ((1'b1 == ap_CS_fsm_state134)) begin
        dense_output_array_ce0 = grp_k2c_dense_fu_2374_dense_output_array_ce0;
    end else begin
        dense_output_array_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        dense_output_array_ce1 = 1'b1;
    end else begin
        dense_output_array_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state1) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2))) begin
        dense_output_array_d0 = 32'd0;
    end else if ((1'b1 == ap_CS_fsm_state134)) begin
        dense_output_array_d0 = grp_k2c_dense_fu_2374_dense_output_array_d0;
    end else begin
        dense_output_array_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        dense_output_array_we0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state134)) begin
        dense_output_array_we0 = grp_k2c_dense_fu_2374_dense_output_array_we0;
    end else begin
        dense_output_array_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48) | (1'b1 == ap_CS_fsm_state47) | (1'b1 == ap_CS_fsm_state46) | (1'b1 == ap_CS_fsm_state45) | (1'b1 == ap_CS_fsm_state44) | (1'b1 == ap_CS_fsm_state43) | (1'b1 == ap_CS_fsm_state42) | (1'b1 == ap_CS_fsm_state41) | (1'b1 == ap_CS_fsm_state40) | (1'b1 == ap_CS_fsm_state39) | (1'b1 == ap_CS_fsm_state38) | (1'b1 == ap_CS_fsm_state37) | (1'b1 == ap_CS_fsm_state36) | (1'b1 == ap_CS_fsm_state35) | (1'b1 == ap_CS_fsm_state34) | (1'b1 == ap_CS_fsm_state33) | (1'b1 == ap_CS_fsm_state32) | (1'b1 == ap_CS_fsm_state31) | (1'b1 == ap_CS_fsm_state30) | (1'b1 == ap_CS_fsm_state29) | (1'b1 == ap_CS_fsm_state28) | (1'b1 == ap_CS_fsm_state27) | (1'b1 == ap_CS_fsm_state26) | (1'b1 == ap_CS_fsm_state25) | (1'b1 == ap_CS_fsm_state24) | (1'b1 == ap_CS_fsm_state23) | (1'b1 == ap_CS_fsm_state22) | (1'b1 == ap_CS_fsm_state21) | (1'b1 == ap_CS_fsm_state20) | (1'b1 == ap_CS_fsm_state19) | (1'b1 == ap_CS_fsm_state18) | (1'b1 == ap_CS_fsm_state17) | (1'b1 == ap_CS_fsm_state16) | (1'b1 == ap_CS_fsm_state15) | (1'b1 == ap_CS_fsm_state14) | (1'b1 == ap_CS_fsm_state13) | (1'b1 == ap_CS_fsm_state12) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state9) | (1'b1 == ap_CS_fsm_state8) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state6) | (1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state4) | (1'b1 == ap_CS_fsm_state3) | (1'b1 == ap_CS_fsm_state2) | ((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1)))) begin
        dense_output_array_we1 = 1'b1;
    end else begin
        dense_output_array_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        dense_output_shape_address0 = 3'd4;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        dense_output_shape_address0 = 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        dense_output_shape_address0 = 3'd0;
    end else begin
        dense_output_shape_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state50)) begin
        dense_output_shape_address1 = 3'd3;
    end else if ((1'b1 == ap_CS_fsm_state49)) begin
        dense_output_shape_address1 = 3'd2;
    end else begin
        dense_output_shape_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48))) begin
        dense_output_shape_ce0 = 1'b1;
    end else begin
        dense_output_shape_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49))) begin
        dense_output_shape_ce1 = 1'b1;
    end else begin
        dense_output_shape_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49))) begin
        dense_output_shape_d0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state48)) begin
        dense_output_shape_d0 = 64'd100;
    end else begin
        dense_output_shape_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49) | (1'b1 == ap_CS_fsm_state48))) begin
        dense_output_shape_we0 = 1'b1;
    end else begin
        dense_output_shape_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state50) | (1'b1 == ap_CS_fsm_state49))) begin
        dense_output_shape_we1 = 1'b1;
    end else begin
        dense_output_shape_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state146)) begin
        dropout_2_output_arr_address0 = tmp_72_reg_3060;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        dropout_2_output_arr_address0 = grp_k2c_dense2_1_fu_2394_input_array_address0;
    end else begin
        dropout_2_output_arr_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state146)) begin
        dropout_2_output_arr_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        dropout_2_output_arr_ce0 = grp_k2c_dense2_1_fu_2394_input_array_ce0;
    end else begin
        dropout_2_output_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state146)) begin
        dropout_2_output_arr_we0 = 1'b1;
    end else begin
        dropout_2_output_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state144)) begin
        dropout_2_output_sha_address0 = 3'd4;
    end else if ((1'b1 == ap_CS_fsm_state143)) begin
        dropout_2_output_sha_address0 = 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state141)) begin
        dropout_2_output_sha_address0 = 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        dropout_2_output_sha_address0 = grp_k2c_dense2_1_fu_2394_input_shape_address0;
    end else begin
        dropout_2_output_sha_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state144)) begin
        dropout_2_output_sha_address1 = 3'd3;
    end else if ((1'b1 == ap_CS_fsm_state143)) begin
        dropout_2_output_sha_address1 = 3'd2;
    end else begin
        dropout_2_output_sha_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state141) | (1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state144))) begin
        dropout_2_output_sha_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state147)) begin
        dropout_2_output_sha_ce0 = grp_k2c_dense2_1_fu_2394_input_shape_ce0;
    end else begin
        dropout_2_output_sha_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state144))) begin
        dropout_2_output_sha_ce1 = 1'b1;
    end else begin
        dropout_2_output_sha_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state144))) begin
        dropout_2_output_sha_d0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state141)) begin
        dropout_2_output_sha_d0 = 64'd100;
    end else begin
        dropout_2_output_sha_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state144) | ((tmp_70_fu_2697_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state141)))) begin
        dropout_2_output_sha_we0 = 1'b1;
    end else begin
        dropout_2_output_sha_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state143) | (1'b1 == ap_CS_fsm_state144))) begin
        dropout_2_output_sha_we1 = 1'b1;
    end else begin
        dropout_2_output_sha_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state159)) begin
        dropout_3_output_arr_address0 = tmp_79_reg_3133;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        dropout_3_output_arr_address0 = grp_k2c_dense2_fu_2351_input_array_address0;
    end else begin
        dropout_3_output_arr_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state159)) begin
        dropout_3_output_arr_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        dropout_3_output_arr_ce0 = grp_k2c_dense2_fu_2351_input_array_ce0;
    end else begin
        dropout_3_output_arr_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state159)) begin
        dropout_3_output_arr_we0 = 1'b1;
    end else begin
        dropout_3_output_arr_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state157)) begin
        dropout_3_output_sha_address0 = 3'd4;
    end else if ((1'b1 == ap_CS_fsm_state156)) begin
        dropout_3_output_sha_address0 = 3'd1;
    end else if ((1'b1 == ap_CS_fsm_state154)) begin
        dropout_3_output_sha_address0 = 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        dropout_3_output_sha_address0 = grp_k2c_dense2_fu_2351_input_shape_address0;
    end else begin
        dropout_3_output_sha_address0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state157)) begin
        dropout_3_output_sha_address1 = 3'd3;
    end else if ((1'b1 == ap_CS_fsm_state156)) begin
        dropout_3_output_sha_address1 = 3'd2;
    end else begin
        dropout_3_output_sha_address1 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state154) | (1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state157))) begin
        dropout_3_output_sha_ce0 = 1'b1;
    end else if ((1'b1 == ap_CS_fsm_state160)) begin
        dropout_3_output_sha_ce0 = grp_k2c_dense2_fu_2351_input_shape_ce0;
    end else begin
        dropout_3_output_sha_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state157))) begin
        dropout_3_output_sha_ce1 = 1'b1;
    end else begin
        dropout_3_output_sha_ce1 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state157))) begin
        dropout_3_output_sha_d0 = 64'd1;
    end else if ((1'b1 == ap_CS_fsm_state154)) begin
        dropout_3_output_sha_d0 = 64'd10;
    end else begin
        dropout_3_output_sha_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state157) | ((tmp_77_fu_2758_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state154)))) begin
        dropout_3_output_sha_we0 = 1'b1;
    end else begin
        dropout_3_output_sha_we0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state156) | (1'b1 == ap_CS_fsm_state157))) begin
        dropout_3_output_sha_we1 = 1'b1;
    end else begin
        dropout_3_output_sha_we1 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state51)) begin
        face_classifier_c_de_ce0 = 1'b1;
    end else begin
        face_classifier_c_de_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage2_00001) & (tmp_83_reg_3185 == 1'd0) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        grp_fu_2451_opcode = 2'd1;
    end else if (((1'b0 == ap_block_pp1_stage3_00001) & (tmp_83_reg_3185_pp1_iter3_reg == 1'd0) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
        grp_fu_2451_opcode = 2'd0;
    end else begin
        grp_fu_2451_opcode = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage3) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
        grp_fu_2451_p0 = sum_reg_2328;
    end else if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        grp_fu_2451_p0 = reg_2506;
    end else begin
        grp_fu_2451_p0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp1_stage3) & (ap_enable_reg_pp1_iter3 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage3))) begin
        grp_fu_2451_p1 = tmp_87_reg_3205;
    end else if (((1'b0 == ap_block_pp1_stage2) & (1'b1 == ap_CS_fsm_pp1_stage2) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
        grp_fu_2451_p1 = xmax1_reg_2307;
    end else begin
        grp_fu_2451_p1 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state197)) begin
        grp_fu_2457_p0 = dense_2_output_array_8_reg_3236;
    end else if ((1'b1 == ap_CS_fsm_state196)) begin
        grp_fu_2457_p0 = dense_2_output_array_6_reg_3226;
    end else if ((1'b1 == ap_CS_fsm_state195)) begin
        grp_fu_2457_p0 = reg_2506;
    end else begin
        grp_fu_2457_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state197)) begin
        grp_fu_2461_p0 = dense_2_output_array_9_reg_3241;
    end else if ((1'b1 == ap_CS_fsm_state196)) begin
        grp_fu_2461_p0 = dense_2_output_array_7_reg_3231;
    end else if ((1'b1 == ap_CS_fsm_state195)) begin
        grp_fu_2461_p0 = dense_2_output_array_5_reg_3221;
    end else begin
        grp_fu_2461_p0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state153)) begin
        grp_generic_tanh_float_s_fu_2415_t_in = batch_normalization_22_reg_3110;
    end else if ((1'b1 == ap_CS_fsm_state140)) begin
        grp_generic_tanh_float_s_fu_2415_t_in = batch_normalization_16_reg_3037;
    end else begin
        grp_generic_tanh_float_s_fu_2415_t_in = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        grp_k2c_batch_norm_fu_2428_beta_array_q0 = batch_normalization_4_q0;
    end else if ((1'b1 == ap_CS_fsm_state136)) begin
        grp_k2c_batch_norm_fu_2428_beta_array_q0 = batch_normalization_11_q0;
    end else begin
        grp_k2c_batch_norm_fu_2428_beta_array_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        grp_k2c_batch_norm_fu_2428_gamma_array_q0 = batch_normalization_5_q0;
    end else if ((1'b1 == ap_CS_fsm_state136)) begin
        grp_k2c_batch_norm_fu_2428_gamma_array_q0 = batch_normalization_10_q0;
    end else begin
        grp_k2c_batch_norm_fu_2428_gamma_array_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        grp_k2c_batch_norm_fu_2428_inputs_array_q0 = dense_1_output_array_q0;
    end else if ((1'b1 == ap_CS_fsm_state136)) begin
        grp_k2c_batch_norm_fu_2428_inputs_array_q0 = dense_output_array_q0;
    end else begin
        grp_k2c_batch_norm_fu_2428_inputs_array_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        grp_k2c_batch_norm_fu_2428_inputs_numel_read = reg_2495;
    end else if ((1'b1 == ap_CS_fsm_state136)) begin
        grp_k2c_batch_norm_fu_2428_inputs_numel_read = dense_output_numel;
    end else begin
        grp_k2c_batch_norm_fu_2428_inputs_numel_read = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        grp_k2c_batch_norm_fu_2428_mean_array_q0 = batch_normalization_6_q0;
    end else if ((1'b1 == ap_CS_fsm_state136)) begin
        grp_k2c_batch_norm_fu_2428_mean_array_q0 = batch_normalization_9_q0;
    end else begin
        grp_k2c_batch_norm_fu_2428_mean_array_q0 = 'bx;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state149)) begin
        grp_k2c_batch_norm_fu_2428_stdev_array_q0 = batch_normalization_13_q0;
    end else if ((1'b1 == ap_CS_fsm_state136)) begin
        grp_k2c_batch_norm_fu_2428_stdev_array_q0 = batch_normalization_s_q0;
    end else begin
        grp_k2c_batch_norm_fu_2428_stdev_array_q0 = 'bx;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            ap_NS_fsm = ap_ST_fsm_state3;
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            ap_NS_fsm = ap_ST_fsm_state5;
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state6 : begin
            ap_NS_fsm = ap_ST_fsm_state7;
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state8;
        end
        ap_ST_fsm_state8 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state9 : begin
            ap_NS_fsm = ap_ST_fsm_state10;
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        ap_ST_fsm_state11 : begin
            ap_NS_fsm = ap_ST_fsm_state12;
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state13;
        end
        ap_ST_fsm_state13 : begin
            ap_NS_fsm = ap_ST_fsm_state14;
        end
        ap_ST_fsm_state14 : begin
            ap_NS_fsm = ap_ST_fsm_state15;
        end
        ap_ST_fsm_state15 : begin
            ap_NS_fsm = ap_ST_fsm_state16;
        end
        ap_ST_fsm_state16 : begin
            ap_NS_fsm = ap_ST_fsm_state17;
        end
        ap_ST_fsm_state17 : begin
            ap_NS_fsm = ap_ST_fsm_state18;
        end
        ap_ST_fsm_state18 : begin
            ap_NS_fsm = ap_ST_fsm_state19;
        end
        ap_ST_fsm_state19 : begin
            ap_NS_fsm = ap_ST_fsm_state20;
        end
        ap_ST_fsm_state20 : begin
            ap_NS_fsm = ap_ST_fsm_state21;
        end
        ap_ST_fsm_state21 : begin
            ap_NS_fsm = ap_ST_fsm_state22;
        end
        ap_ST_fsm_state22 : begin
            ap_NS_fsm = ap_ST_fsm_state23;
        end
        ap_ST_fsm_state23 : begin
            ap_NS_fsm = ap_ST_fsm_state24;
        end
        ap_ST_fsm_state24 : begin
            ap_NS_fsm = ap_ST_fsm_state25;
        end
        ap_ST_fsm_state25 : begin
            ap_NS_fsm = ap_ST_fsm_state26;
        end
        ap_ST_fsm_state26 : begin
            ap_NS_fsm = ap_ST_fsm_state27;
        end
        ap_ST_fsm_state27 : begin
            ap_NS_fsm = ap_ST_fsm_state28;
        end
        ap_ST_fsm_state28 : begin
            ap_NS_fsm = ap_ST_fsm_state29;
        end
        ap_ST_fsm_state29 : begin
            ap_NS_fsm = ap_ST_fsm_state30;
        end
        ap_ST_fsm_state30 : begin
            ap_NS_fsm = ap_ST_fsm_state31;
        end
        ap_ST_fsm_state31 : begin
            ap_NS_fsm = ap_ST_fsm_state32;
        end
        ap_ST_fsm_state32 : begin
            ap_NS_fsm = ap_ST_fsm_state33;
        end
        ap_ST_fsm_state33 : begin
            ap_NS_fsm = ap_ST_fsm_state34;
        end
        ap_ST_fsm_state34 : begin
            ap_NS_fsm = ap_ST_fsm_state35;
        end
        ap_ST_fsm_state35 : begin
            ap_NS_fsm = ap_ST_fsm_state36;
        end
        ap_ST_fsm_state36 : begin
            ap_NS_fsm = ap_ST_fsm_state37;
        end
        ap_ST_fsm_state37 : begin
            ap_NS_fsm = ap_ST_fsm_state38;
        end
        ap_ST_fsm_state38 : begin
            ap_NS_fsm = ap_ST_fsm_state39;
        end
        ap_ST_fsm_state39 : begin
            ap_NS_fsm = ap_ST_fsm_state40;
        end
        ap_ST_fsm_state40 : begin
            ap_NS_fsm = ap_ST_fsm_state41;
        end
        ap_ST_fsm_state41 : begin
            ap_NS_fsm = ap_ST_fsm_state42;
        end
        ap_ST_fsm_state42 : begin
            ap_NS_fsm = ap_ST_fsm_state43;
        end
        ap_ST_fsm_state43 : begin
            ap_NS_fsm = ap_ST_fsm_state44;
        end
        ap_ST_fsm_state44 : begin
            ap_NS_fsm = ap_ST_fsm_state45;
        end
        ap_ST_fsm_state45 : begin
            ap_NS_fsm = ap_ST_fsm_state46;
        end
        ap_ST_fsm_state46 : begin
            ap_NS_fsm = ap_ST_fsm_state47;
        end
        ap_ST_fsm_state47 : begin
            ap_NS_fsm = ap_ST_fsm_state48;
        end
        ap_ST_fsm_state48 : begin
            ap_NS_fsm = ap_ST_fsm_state49;
        end
        ap_ST_fsm_state49 : begin
            ap_NS_fsm = ap_ST_fsm_state50;
        end
        ap_ST_fsm_state50 : begin
            ap_NS_fsm = ap_ST_fsm_state51;
        end
        ap_ST_fsm_state51 : begin
            ap_NS_fsm = ap_ST_fsm_state52;
        end
        ap_ST_fsm_state52 : begin
            if (((tmp_59_reg_2977 == 1'd1) & (1'b1 == ap_CS_fsm_state52))) begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state51;
            end
        end
        ap_ST_fsm_state53 : begin
            if (((tmp_64_fu_2557_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state53))) begin
                ap_NS_fsm = ap_ST_fsm_state54;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state53;
            end
        end
        ap_ST_fsm_state54 : begin
            ap_NS_fsm = ap_ST_fsm_state55;
        end
        ap_ST_fsm_state55 : begin
            ap_NS_fsm = ap_ST_fsm_state56;
        end
        ap_ST_fsm_state56 : begin
            ap_NS_fsm = ap_ST_fsm_state57;
        end
        ap_ST_fsm_state57 : begin
            ap_NS_fsm = ap_ST_fsm_state58;
        end
        ap_ST_fsm_state58 : begin
            ap_NS_fsm = ap_ST_fsm_state59;
        end
        ap_ST_fsm_state59 : begin
            ap_NS_fsm = ap_ST_fsm_state60;
        end
        ap_ST_fsm_state60 : begin
            ap_NS_fsm = ap_ST_fsm_state61;
        end
        ap_ST_fsm_state61 : begin
            ap_NS_fsm = ap_ST_fsm_state62;
        end
        ap_ST_fsm_state62 : begin
            ap_NS_fsm = ap_ST_fsm_state63;
        end
        ap_ST_fsm_state63 : begin
            ap_NS_fsm = ap_ST_fsm_state64;
        end
        ap_ST_fsm_state64 : begin
            ap_NS_fsm = ap_ST_fsm_state65;
        end
        ap_ST_fsm_state65 : begin
            ap_NS_fsm = ap_ST_fsm_state66;
        end
        ap_ST_fsm_state66 : begin
            ap_NS_fsm = ap_ST_fsm_state67;
        end
        ap_ST_fsm_state67 : begin
            ap_NS_fsm = ap_ST_fsm_state68;
        end
        ap_ST_fsm_state68 : begin
            ap_NS_fsm = ap_ST_fsm_state69;
        end
        ap_ST_fsm_state69 : begin
            ap_NS_fsm = ap_ST_fsm_state70;
        end
        ap_ST_fsm_state70 : begin
            ap_NS_fsm = ap_ST_fsm_state71;
        end
        ap_ST_fsm_state71 : begin
            ap_NS_fsm = ap_ST_fsm_state72;
        end
        ap_ST_fsm_state72 : begin
            ap_NS_fsm = ap_ST_fsm_state73;
        end
        ap_ST_fsm_state73 : begin
            ap_NS_fsm = ap_ST_fsm_state74;
        end
        ap_ST_fsm_state74 : begin
            ap_NS_fsm = ap_ST_fsm_state75;
        end
        ap_ST_fsm_state75 : begin
            ap_NS_fsm = ap_ST_fsm_state76;
        end
        ap_ST_fsm_state76 : begin
            ap_NS_fsm = ap_ST_fsm_state77;
        end
        ap_ST_fsm_state77 : begin
            ap_NS_fsm = ap_ST_fsm_state78;
        end
        ap_ST_fsm_state78 : begin
            ap_NS_fsm = ap_ST_fsm_state79;
        end
        ap_ST_fsm_state79 : begin
            ap_NS_fsm = ap_ST_fsm_state80;
        end
        ap_ST_fsm_state80 : begin
            ap_NS_fsm = ap_ST_fsm_state81;
        end
        ap_ST_fsm_state81 : begin
            ap_NS_fsm = ap_ST_fsm_state82;
        end
        ap_ST_fsm_state82 : begin
            ap_NS_fsm = ap_ST_fsm_state83;
        end
        ap_ST_fsm_state83 : begin
            ap_NS_fsm = ap_ST_fsm_state84;
        end
        ap_ST_fsm_state84 : begin
            ap_NS_fsm = ap_ST_fsm_state85;
        end
        ap_ST_fsm_state85 : begin
            ap_NS_fsm = ap_ST_fsm_state86;
        end
        ap_ST_fsm_state86 : begin
            ap_NS_fsm = ap_ST_fsm_state87;
        end
        ap_ST_fsm_state87 : begin
            ap_NS_fsm = ap_ST_fsm_state88;
        end
        ap_ST_fsm_state88 : begin
            ap_NS_fsm = ap_ST_fsm_state89;
        end
        ap_ST_fsm_state89 : begin
            ap_NS_fsm = ap_ST_fsm_state90;
        end
        ap_ST_fsm_state90 : begin
            ap_NS_fsm = ap_ST_fsm_state91;
        end
        ap_ST_fsm_state91 : begin
            ap_NS_fsm = ap_ST_fsm_state92;
        end
        ap_ST_fsm_state92 : begin
            ap_NS_fsm = ap_ST_fsm_state93;
        end
        ap_ST_fsm_state93 : begin
            ap_NS_fsm = ap_ST_fsm_state94;
        end
        ap_ST_fsm_state94 : begin
            ap_NS_fsm = ap_ST_fsm_state95;
        end
        ap_ST_fsm_state95 : begin
            ap_NS_fsm = ap_ST_fsm_state96;
        end
        ap_ST_fsm_state96 : begin
            ap_NS_fsm = ap_ST_fsm_state97;
        end
        ap_ST_fsm_state97 : begin
            ap_NS_fsm = ap_ST_fsm_state98;
        end
        ap_ST_fsm_state98 : begin
            ap_NS_fsm = ap_ST_fsm_state99;
        end
        ap_ST_fsm_state99 : begin
            ap_NS_fsm = ap_ST_fsm_state100;
        end
        ap_ST_fsm_state100 : begin
            ap_NS_fsm = ap_ST_fsm_state101;
        end
        ap_ST_fsm_state101 : begin
            ap_NS_fsm = ap_ST_fsm_state102;
        end
        ap_ST_fsm_state102 : begin
            ap_NS_fsm = ap_ST_fsm_state103;
        end
        ap_ST_fsm_state103 : begin
            if (((tmp_66_fu_2598_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state103))) begin
                ap_NS_fsm = ap_ST_fsm_state104;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state103;
            end
        end
        ap_ST_fsm_state104 : begin
            ap_NS_fsm = ap_ST_fsm_state105;
        end
        ap_ST_fsm_state105 : begin
            ap_NS_fsm = ap_ST_fsm_state106;
        end
        ap_ST_fsm_state106 : begin
            ap_NS_fsm = ap_ST_fsm_state107;
        end
        ap_ST_fsm_state107 : begin
            ap_NS_fsm = ap_ST_fsm_state108;
        end
        ap_ST_fsm_state108 : begin
            ap_NS_fsm = ap_ST_fsm_state109;
        end
        ap_ST_fsm_state109 : begin
            ap_NS_fsm = ap_ST_fsm_state110;
        end
        ap_ST_fsm_state110 : begin
            ap_NS_fsm = ap_ST_fsm_state111;
        end
        ap_ST_fsm_state111 : begin
            ap_NS_fsm = ap_ST_fsm_state112;
        end
        ap_ST_fsm_state112 : begin
            ap_NS_fsm = ap_ST_fsm_state113;
        end
        ap_ST_fsm_state113 : begin
            ap_NS_fsm = ap_ST_fsm_state114;
        end
        ap_ST_fsm_state114 : begin
            ap_NS_fsm = ap_ST_fsm_state115;
        end
        ap_ST_fsm_state115 : begin
            ap_NS_fsm = ap_ST_fsm_state116;
        end
        ap_ST_fsm_state116 : begin
            ap_NS_fsm = ap_ST_fsm_state117;
        end
        ap_ST_fsm_state117 : begin
            ap_NS_fsm = ap_ST_fsm_state118;
        end
        ap_ST_fsm_state118 : begin
            ap_NS_fsm = ap_ST_fsm_state119;
        end
        ap_ST_fsm_state119 : begin
            ap_NS_fsm = ap_ST_fsm_state120;
        end
        ap_ST_fsm_state120 : begin
            ap_NS_fsm = ap_ST_fsm_state121;
        end
        ap_ST_fsm_state121 : begin
            ap_NS_fsm = ap_ST_fsm_state122;
        end
        ap_ST_fsm_state122 : begin
            ap_NS_fsm = ap_ST_fsm_state123;
        end
        ap_ST_fsm_state123 : begin
            ap_NS_fsm = ap_ST_fsm_state124;
        end
        ap_ST_fsm_state124 : begin
            ap_NS_fsm = ap_ST_fsm_state125;
        end
        ap_ST_fsm_state125 : begin
            ap_NS_fsm = ap_ST_fsm_state126;
        end
        ap_ST_fsm_state126 : begin
            ap_NS_fsm = ap_ST_fsm_state127;
        end
        ap_ST_fsm_state127 : begin
            ap_NS_fsm = ap_ST_fsm_state128;
        end
        ap_ST_fsm_state128 : begin
            ap_NS_fsm = ap_ST_fsm_state129;
        end
        ap_ST_fsm_state129 : begin
            ap_NS_fsm = ap_ST_fsm_state130;
        end
        ap_ST_fsm_state130 : begin
            ap_NS_fsm = ap_ST_fsm_state131;
        end
        ap_ST_fsm_state131 : begin
            ap_NS_fsm = ap_ST_fsm_state132;
        end
        ap_ST_fsm_state132 : begin
            ap_NS_fsm = ap_ST_fsm_state133;
        end
        ap_ST_fsm_state133 : begin
            if (((tmp_68_fu_2657_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state133))) begin
                ap_NS_fsm = ap_ST_fsm_state134;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state133;
            end
        end
        ap_ST_fsm_state134 : begin
            if (((1'b1 == ap_CS_fsm_state134) & (grp_k2c_dense_fu_2374_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state135;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state134;
            end
        end
        ap_ST_fsm_state135 : begin
            ap_NS_fsm = ap_ST_fsm_state136;
        end
        ap_ST_fsm_state136 : begin
            if (((grp_k2c_batch_norm_fu_2428_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state136))) begin
                ap_NS_fsm = ap_ST_fsm_state137;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state136;
            end
        end
        ap_ST_fsm_state137 : begin
            if (((exitcond2_fu_2677_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state137))) begin
                ap_NS_fsm = ap_ST_fsm_state141;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state138;
            end
        end
        ap_ST_fsm_state138 : begin
            ap_NS_fsm = ap_ST_fsm_state139;
        end
        ap_ST_fsm_state139 : begin
            ap_NS_fsm = ap_ST_fsm_state140;
        end
        ap_ST_fsm_state140 : begin
            if (((1'b1 == ap_CS_fsm_state140) & (grp_generic_tanh_float_s_fu_2415_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state137;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state140;
            end
        end
        ap_ST_fsm_state141 : begin
            if (((tmp_70_fu_2697_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state141))) begin
                ap_NS_fsm = ap_ST_fsm_state143;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state142;
            end
        end
        ap_ST_fsm_state142 : begin
            ap_NS_fsm = ap_ST_fsm_state141;
        end
        ap_ST_fsm_state143 : begin
            ap_NS_fsm = ap_ST_fsm_state144;
        end
        ap_ST_fsm_state144 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state145 : begin
            if (((tmp_73_fu_2713_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state145))) begin
                ap_NS_fsm = ap_ST_fsm_state147;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state146;
            end
        end
        ap_ST_fsm_state146 : begin
            ap_NS_fsm = ap_ST_fsm_state145;
        end
        ap_ST_fsm_state147 : begin
            if (((1'b1 == ap_CS_fsm_state147) & (grp_k2c_dense2_1_fu_2394_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state148;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state147;
            end
        end
        ap_ST_fsm_state148 : begin
            ap_NS_fsm = ap_ST_fsm_state149;
        end
        ap_ST_fsm_state149 : begin
            if (((grp_k2c_batch_norm_fu_2428_ap_done == 1'b1) & (1'b1 == ap_CS_fsm_state149))) begin
                ap_NS_fsm = ap_ST_fsm_state150;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state149;
            end
        end
        ap_ST_fsm_state150 : begin
            if (((exitcond_fu_2738_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state150))) begin
                ap_NS_fsm = ap_ST_fsm_state154;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state151;
            end
        end
        ap_ST_fsm_state151 : begin
            ap_NS_fsm = ap_ST_fsm_state152;
        end
        ap_ST_fsm_state152 : begin
            ap_NS_fsm = ap_ST_fsm_state153;
        end
        ap_ST_fsm_state153 : begin
            if (((1'b1 == ap_CS_fsm_state153) & (grp_generic_tanh_float_s_fu_2415_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state150;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state153;
            end
        end
        ap_ST_fsm_state154 : begin
            if (((tmp_77_fu_2758_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state154))) begin
                ap_NS_fsm = ap_ST_fsm_state156;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state155;
            end
        end
        ap_ST_fsm_state155 : begin
            ap_NS_fsm = ap_ST_fsm_state154;
        end
        ap_ST_fsm_state156 : begin
            ap_NS_fsm = ap_ST_fsm_state157;
        end
        ap_ST_fsm_state157 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state158 : begin
            if (((tmp_80_fu_2774_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state158))) begin
                ap_NS_fsm = ap_ST_fsm_state160;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state159;
            end
        end
        ap_ST_fsm_state159 : begin
            ap_NS_fsm = ap_ST_fsm_state158;
        end
        ap_ST_fsm_state160 : begin
            if (((1'b1 == ap_CS_fsm_state160) & (grp_k2c_dense2_fu_2351_ap_done == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state161;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state160;
            end
        end
        ap_ST_fsm_state161 : begin
            ap_NS_fsm = ap_ST_fsm_state162;
        end
        ap_ST_fsm_state162 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        ap_ST_fsm_pp0_stage0 : begin
            if (~((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond1_fu_2800_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end else if (((1'b0 == ap_block_pp0_stage0_subdone) & (exitcond1_fu_2800_p2 == 1'd1) & (ap_enable_reg_pp0_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state165;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp0_stage0;
            end
        end
        ap_ST_fsm_state165 : begin
            ap_NS_fsm = ap_ST_fsm_pp1_stage0;
        end
        ap_ST_fsm_pp1_stage0 : begin
            if ((~((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (tmp_83_fu_2909_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1)) & (1'b0 == ap_block_pp1_stage0_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end else if (((1'b0 == ap_block_pp1_stage0_subdone) & (ap_enable_reg_pp1_iter1 == 1'b0) & (tmp_83_fu_2909_p2 == 1'd1) & (ap_enable_reg_pp1_iter0 == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state185;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end
        end
        ap_ST_fsm_pp1_stage1 : begin
            if ((1'b0 == ap_block_pp1_stage1_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage1;
            end
        end
        ap_ST_fsm_pp1_stage2 : begin
            if ((~((ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage2_subdone) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2)) & (1'b0 == ap_block_pp1_stage2_subdone))) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end else if (((ap_enable_reg_pp1_iter3 == 1'b0) & (1'b0 == ap_block_pp1_stage2_subdone) & (ap_enable_reg_pp1_iter4 == 1'b1) & (1'b1 == ap_CS_fsm_pp1_stage2))) begin
                ap_NS_fsm = ap_ST_fsm_state185;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage2;
            end
        end
        ap_ST_fsm_pp1_stage3 : begin
            if ((1'b0 == ap_block_pp1_stage3_subdone)) begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage0;
            end else begin
                ap_NS_fsm = ap_ST_fsm_pp1_stage3;
            end
        end
        ap_ST_fsm_state185 : begin
            ap_NS_fsm = ap_ST_fsm_state186;
        end
        ap_ST_fsm_state186 : begin
            ap_NS_fsm = ap_ST_fsm_state187;
        end
        ap_ST_fsm_state187 : begin
            ap_NS_fsm = ap_ST_fsm_state188;
        end
        ap_ST_fsm_state188 : begin
            ap_NS_fsm = ap_ST_fsm_state189;
        end
        ap_ST_fsm_state189 : begin
            ap_NS_fsm = ap_ST_fsm_state190;
        end
        ap_ST_fsm_state190 : begin
            ap_NS_fsm = ap_ST_fsm_state191;
        end
        ap_ST_fsm_state191 : begin
            ap_NS_fsm = ap_ST_fsm_state192;
        end
        ap_ST_fsm_state192 : begin
            ap_NS_fsm = ap_ST_fsm_state193;
        end
        ap_ST_fsm_state193 : begin
            ap_NS_fsm = ap_ST_fsm_state194;
        end
        ap_ST_fsm_state194 : begin
            ap_NS_fsm = ap_ST_fsm_state195;
        end
        ap_ST_fsm_state195 : begin
            ap_NS_fsm = ap_ST_fsm_state196;
        end
        ap_ST_fsm_state196 : begin
            ap_NS_fsm = ap_ST_fsm_state197;
        end
        ap_ST_fsm_state197 : begin
            ap_NS_fsm = ap_ST_fsm_state198;
        end
        ap_ST_fsm_state198 : begin
            ap_NS_fsm = ap_ST_fsm_state199;
        end
        ap_ST_fsm_state199 : begin
            ap_NS_fsm = ap_ST_fsm_state200;
        end
        ap_ST_fsm_state200 : begin
            ap_NS_fsm = ap_ST_fsm_state201;
        end
        ap_ST_fsm_state201 : begin
            if (((tmp_89_fu_2940_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state201))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state202;
            end
        end
        ap_ST_fsm_state202 : begin
            ap_NS_fsm = ap_ST_fsm_state201;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign activation_3_output_array_address0 = tmp_88_reg_3246;

assign activation_3_output_array_d0 = dense_2_output_array_q0;

assign activation_3_output_ndim = dense_2_output_ndim;

assign activation_3_output_numel = dense_2_output_numel;

assign activation_3_output_shape_d1 = 64'd1;

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd162];

assign ap_CS_fsm_pp1_stage0 = ap_CS_fsm[32'd164];

assign ap_CS_fsm_pp1_stage1 = ap_CS_fsm[32'd165];

assign ap_CS_fsm_pp1_stage2 = ap_CS_fsm[32'd166];

assign ap_CS_fsm_pp1_stage3 = ap_CS_fsm[32'd167];

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state100 = ap_CS_fsm[32'd99];

assign ap_CS_fsm_state101 = ap_CS_fsm[32'd100];

assign ap_CS_fsm_state102 = ap_CS_fsm[32'd101];

assign ap_CS_fsm_state103 = ap_CS_fsm[32'd102];

assign ap_CS_fsm_state104 = ap_CS_fsm[32'd103];

assign ap_CS_fsm_state105 = ap_CS_fsm[32'd104];

assign ap_CS_fsm_state106 = ap_CS_fsm[32'd105];

assign ap_CS_fsm_state107 = ap_CS_fsm[32'd106];

assign ap_CS_fsm_state108 = ap_CS_fsm[32'd107];

assign ap_CS_fsm_state109 = ap_CS_fsm[32'd108];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state110 = ap_CS_fsm[32'd109];

assign ap_CS_fsm_state111 = ap_CS_fsm[32'd110];

assign ap_CS_fsm_state112 = ap_CS_fsm[32'd111];

assign ap_CS_fsm_state113 = ap_CS_fsm[32'd112];

assign ap_CS_fsm_state114 = ap_CS_fsm[32'd113];

assign ap_CS_fsm_state115 = ap_CS_fsm[32'd114];

assign ap_CS_fsm_state116 = ap_CS_fsm[32'd115];

assign ap_CS_fsm_state117 = ap_CS_fsm[32'd116];

assign ap_CS_fsm_state118 = ap_CS_fsm[32'd117];

assign ap_CS_fsm_state119 = ap_CS_fsm[32'd118];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state120 = ap_CS_fsm[32'd119];

assign ap_CS_fsm_state121 = ap_CS_fsm[32'd120];

assign ap_CS_fsm_state122 = ap_CS_fsm[32'd121];

assign ap_CS_fsm_state123 = ap_CS_fsm[32'd122];

assign ap_CS_fsm_state124 = ap_CS_fsm[32'd123];

assign ap_CS_fsm_state125 = ap_CS_fsm[32'd124];

assign ap_CS_fsm_state126 = ap_CS_fsm[32'd125];

assign ap_CS_fsm_state127 = ap_CS_fsm[32'd126];

assign ap_CS_fsm_state128 = ap_CS_fsm[32'd127];

assign ap_CS_fsm_state129 = ap_CS_fsm[32'd128];

assign ap_CS_fsm_state13 = ap_CS_fsm[32'd12];

assign ap_CS_fsm_state130 = ap_CS_fsm[32'd129];

assign ap_CS_fsm_state131 = ap_CS_fsm[32'd130];

assign ap_CS_fsm_state132 = ap_CS_fsm[32'd131];

assign ap_CS_fsm_state133 = ap_CS_fsm[32'd132];

assign ap_CS_fsm_state134 = ap_CS_fsm[32'd133];

assign ap_CS_fsm_state135 = ap_CS_fsm[32'd134];

assign ap_CS_fsm_state136 = ap_CS_fsm[32'd135];

assign ap_CS_fsm_state137 = ap_CS_fsm[32'd136];

assign ap_CS_fsm_state138 = ap_CS_fsm[32'd137];

assign ap_CS_fsm_state139 = ap_CS_fsm[32'd138];

assign ap_CS_fsm_state14 = ap_CS_fsm[32'd13];

assign ap_CS_fsm_state140 = ap_CS_fsm[32'd139];

assign ap_CS_fsm_state141 = ap_CS_fsm[32'd140];

assign ap_CS_fsm_state142 = ap_CS_fsm[32'd141];

assign ap_CS_fsm_state143 = ap_CS_fsm[32'd142];

assign ap_CS_fsm_state144 = ap_CS_fsm[32'd143];

assign ap_CS_fsm_state145 = ap_CS_fsm[32'd144];

assign ap_CS_fsm_state146 = ap_CS_fsm[32'd145];

assign ap_CS_fsm_state147 = ap_CS_fsm[32'd146];

assign ap_CS_fsm_state148 = ap_CS_fsm[32'd147];

assign ap_CS_fsm_state149 = ap_CS_fsm[32'd148];

assign ap_CS_fsm_state15 = ap_CS_fsm[32'd14];

assign ap_CS_fsm_state150 = ap_CS_fsm[32'd149];

assign ap_CS_fsm_state151 = ap_CS_fsm[32'd150];

assign ap_CS_fsm_state152 = ap_CS_fsm[32'd151];

assign ap_CS_fsm_state153 = ap_CS_fsm[32'd152];

assign ap_CS_fsm_state154 = ap_CS_fsm[32'd153];

assign ap_CS_fsm_state155 = ap_CS_fsm[32'd154];

assign ap_CS_fsm_state156 = ap_CS_fsm[32'd155];

assign ap_CS_fsm_state157 = ap_CS_fsm[32'd156];

assign ap_CS_fsm_state158 = ap_CS_fsm[32'd157];

assign ap_CS_fsm_state159 = ap_CS_fsm[32'd158];

assign ap_CS_fsm_state16 = ap_CS_fsm[32'd15];

assign ap_CS_fsm_state160 = ap_CS_fsm[32'd159];

assign ap_CS_fsm_state161 = ap_CS_fsm[32'd160];

assign ap_CS_fsm_state162 = ap_CS_fsm[32'd161];

assign ap_CS_fsm_state165 = ap_CS_fsm[32'd163];

assign ap_CS_fsm_state17 = ap_CS_fsm[32'd16];

assign ap_CS_fsm_state18 = ap_CS_fsm[32'd17];

assign ap_CS_fsm_state185 = ap_CS_fsm[32'd168];

assign ap_CS_fsm_state19 = ap_CS_fsm[32'd18];

assign ap_CS_fsm_state193 = ap_CS_fsm[32'd176];

assign ap_CS_fsm_state194 = ap_CS_fsm[32'd177];

assign ap_CS_fsm_state195 = ap_CS_fsm[32'd178];

assign ap_CS_fsm_state196 = ap_CS_fsm[32'd179];

assign ap_CS_fsm_state197 = ap_CS_fsm[32'd180];

assign ap_CS_fsm_state198 = ap_CS_fsm[32'd181];

assign ap_CS_fsm_state199 = ap_CS_fsm[32'd182];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state20 = ap_CS_fsm[32'd19];

assign ap_CS_fsm_state200 = ap_CS_fsm[32'd183];

assign ap_CS_fsm_state201 = ap_CS_fsm[32'd184];

assign ap_CS_fsm_state202 = ap_CS_fsm[32'd185];

assign ap_CS_fsm_state21 = ap_CS_fsm[32'd20];

assign ap_CS_fsm_state22 = ap_CS_fsm[32'd21];

assign ap_CS_fsm_state23 = ap_CS_fsm[32'd22];

assign ap_CS_fsm_state24 = ap_CS_fsm[32'd23];

assign ap_CS_fsm_state25 = ap_CS_fsm[32'd24];

assign ap_CS_fsm_state26 = ap_CS_fsm[32'd25];

assign ap_CS_fsm_state27 = ap_CS_fsm[32'd26];

assign ap_CS_fsm_state28 = ap_CS_fsm[32'd27];

assign ap_CS_fsm_state29 = ap_CS_fsm[32'd28];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state30 = ap_CS_fsm[32'd29];

assign ap_CS_fsm_state31 = ap_CS_fsm[32'd30];

assign ap_CS_fsm_state32 = ap_CS_fsm[32'd31];

assign ap_CS_fsm_state33 = ap_CS_fsm[32'd32];

assign ap_CS_fsm_state34 = ap_CS_fsm[32'd33];

assign ap_CS_fsm_state35 = ap_CS_fsm[32'd34];

assign ap_CS_fsm_state36 = ap_CS_fsm[32'd35];

assign ap_CS_fsm_state37 = ap_CS_fsm[32'd36];

assign ap_CS_fsm_state38 = ap_CS_fsm[32'd37];

assign ap_CS_fsm_state39 = ap_CS_fsm[32'd38];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state40 = ap_CS_fsm[32'd39];

assign ap_CS_fsm_state41 = ap_CS_fsm[32'd40];

assign ap_CS_fsm_state42 = ap_CS_fsm[32'd41];

assign ap_CS_fsm_state43 = ap_CS_fsm[32'd42];

assign ap_CS_fsm_state44 = ap_CS_fsm[32'd43];

assign ap_CS_fsm_state45 = ap_CS_fsm[32'd44];

assign ap_CS_fsm_state46 = ap_CS_fsm[32'd45];

assign ap_CS_fsm_state47 = ap_CS_fsm[32'd46];

assign ap_CS_fsm_state48 = ap_CS_fsm[32'd47];

assign ap_CS_fsm_state49 = ap_CS_fsm[32'd48];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state50 = ap_CS_fsm[32'd49];

assign ap_CS_fsm_state51 = ap_CS_fsm[32'd50];

assign ap_CS_fsm_state52 = ap_CS_fsm[32'd51];

assign ap_CS_fsm_state53 = ap_CS_fsm[32'd52];

assign ap_CS_fsm_state54 = ap_CS_fsm[32'd53];

assign ap_CS_fsm_state55 = ap_CS_fsm[32'd54];

assign ap_CS_fsm_state56 = ap_CS_fsm[32'd55];

assign ap_CS_fsm_state57 = ap_CS_fsm[32'd56];

assign ap_CS_fsm_state58 = ap_CS_fsm[32'd57];

assign ap_CS_fsm_state59 = ap_CS_fsm[32'd58];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state60 = ap_CS_fsm[32'd59];

assign ap_CS_fsm_state61 = ap_CS_fsm[32'd60];

assign ap_CS_fsm_state62 = ap_CS_fsm[32'd61];

assign ap_CS_fsm_state63 = ap_CS_fsm[32'd62];

assign ap_CS_fsm_state64 = ap_CS_fsm[32'd63];

assign ap_CS_fsm_state65 = ap_CS_fsm[32'd64];

assign ap_CS_fsm_state66 = ap_CS_fsm[32'd65];

assign ap_CS_fsm_state67 = ap_CS_fsm[32'd66];

assign ap_CS_fsm_state68 = ap_CS_fsm[32'd67];

assign ap_CS_fsm_state69 = ap_CS_fsm[32'd68];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state70 = ap_CS_fsm[32'd69];

assign ap_CS_fsm_state71 = ap_CS_fsm[32'd70];

assign ap_CS_fsm_state72 = ap_CS_fsm[32'd71];

assign ap_CS_fsm_state73 = ap_CS_fsm[32'd72];

assign ap_CS_fsm_state74 = ap_CS_fsm[32'd73];

assign ap_CS_fsm_state75 = ap_CS_fsm[32'd74];

assign ap_CS_fsm_state76 = ap_CS_fsm[32'd75];

assign ap_CS_fsm_state77 = ap_CS_fsm[32'd76];

assign ap_CS_fsm_state78 = ap_CS_fsm[32'd77];

assign ap_CS_fsm_state79 = ap_CS_fsm[32'd78];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state80 = ap_CS_fsm[32'd79];

assign ap_CS_fsm_state81 = ap_CS_fsm[32'd80];

assign ap_CS_fsm_state82 = ap_CS_fsm[32'd81];

assign ap_CS_fsm_state83 = ap_CS_fsm[32'd82];

assign ap_CS_fsm_state84 = ap_CS_fsm[32'd83];

assign ap_CS_fsm_state85 = ap_CS_fsm[32'd84];

assign ap_CS_fsm_state86 = ap_CS_fsm[32'd85];

assign ap_CS_fsm_state87 = ap_CS_fsm[32'd86];

assign ap_CS_fsm_state88 = ap_CS_fsm[32'd87];

assign ap_CS_fsm_state89 = ap_CS_fsm[32'd88];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign ap_CS_fsm_state90 = ap_CS_fsm[32'd89];

assign ap_CS_fsm_state91 = ap_CS_fsm[32'd90];

assign ap_CS_fsm_state92 = ap_CS_fsm[32'd91];

assign ap_CS_fsm_state93 = ap_CS_fsm[32'd92];

assign ap_CS_fsm_state94 = ap_CS_fsm[32'd93];

assign ap_CS_fsm_state95 = ap_CS_fsm[32'd94];

assign ap_CS_fsm_state96 = ap_CS_fsm[32'd95];

assign ap_CS_fsm_state97 = ap_CS_fsm[32'd96];

assign ap_CS_fsm_state98 = ap_CS_fsm[32'd97];

assign ap_CS_fsm_state99 = ap_CS_fsm[32'd98];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp0_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage0_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage1_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage2_subdone = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_00001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_11001 = ~(1'b1 == 1'b1);

assign ap_block_pp1_stage3_subdone = ~(1'b1 == 1'b1);

assign ap_block_state163_pp0_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state164_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state166_pp1_stage0_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state167_pp1_stage1_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state168_pp1_stage2_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state169_pp1_stage3_iter0 = ~(1'b1 == 1'b1);

assign ap_block_state170_pp1_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state171_pp1_stage1_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state172_pp1_stage2_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state173_pp1_stage3_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state174_pp1_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state175_pp1_stage1_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state176_pp1_stage2_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state177_pp1_stage3_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state178_pp1_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state179_pp1_stage1_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state180_pp1_stage2_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state181_pp1_stage3_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state182_pp1_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state183_pp1_stage1_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state184_pp1_stage2_iter4 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_pp1 = (ap_idle_pp1 ^ 1'b1);

assign dense_input_input_array_address0 = grp_k2c_dense_fu_2374_input_array_address0;

assign dense_input_input_array_ce0 = grp_k2c_dense_fu_2374_input_array_ce0;

assign dense_input_input_shape_address0 = grp_k2c_dense_fu_2374_input_shape_address0;

assign dense_input_input_shape_ce0 = grp_k2c_dense_fu_2374_input_shape_ce0;

assign exitcond1_fu_2800_p2 = ((i_2_reg_2296 == 3'd6) ? 1'b1 : 1'b0);

assign exitcond2_fu_2677_p2 = ((i_cast_fu_2672_p1 == batch_normalization_14_reg_3010) ? 1'b1 : 1'b0);

assign exitcond_fu_2738_p2 = ((i_1_cast_fu_2733_p1 == batch_normalization_20_reg_3083) ? 1'b1 : 1'b0);

assign face_classifier_c_de_address0 = tmp_58_fu_2535_p1;

assign grp_generic_tanh_float_s_fu_2415_ap_start = grp_generic_tanh_float_s_fu_2415_ap_start_reg;

assign grp_k2c_batch_norm_fu_2428_ap_start = grp_k2c_batch_norm_fu_2428_ap_start_reg;

assign grp_k2c_dense2_1_fu_2394_ap_start = grp_k2c_dense2_1_fu_2394_ap_start_reg;

assign grp_k2c_dense2_fu_2351_ap_start = grp_k2c_dense2_fu_2351_ap_start_reg;

assign grp_k2c_dense_fu_2374_ap_start = grp_k2c_dense_fu_2374_ap_start_reg;

assign i_1_cast_fu_2733_p1 = i_1_reg_2263;

assign i_2_cast4_fu_2806_p1 = i_2_reg_2296;

assign i_38_fu_2682_p2 = (i_reg_2230 + 12'd1);

assign i_39_fu_2743_p2 = (i_1_reg_2263 + 12'd1);

assign i_3_cast3_fu_2921_p1 = ap_phi_mux_i_3_phi_fu_2321_p4;

assign i_40_fu_2811_p2 = (3'd1 + i_2_reg_2296);

assign i_41_fu_2915_p2 = (ap_phi_mux_i_3_phi_fu_2321_p4 + 3'd1);

assign i_cast_fu_2672_p1 = i_reg_2230;

assign indvarinc1_fu_2587_p2 = (invdar1_reg_2208 + 11'd1);

assign indvarinc2_fu_2646_p2 = (invdar2_reg_2219 + 7'd1);

assign indvarinc_fu_2546_p2 = (invdar_reg_2197 + 19'd1);

assign j_3_fu_2779_p2 = (j_2_reg_2285 + 12'd1);

assign j_5_fu_2946_p2 = ($signed(j_4_reg_2340) + $signed(32'd1));

assign j_7_fu_2702_p2 = (j_s_reg_2241 + 12'd1);

assign j_9_fu_2718_p2 = (j_8_reg_2252 + 12'd1);

assign j_fu_2763_p2 = (j_1_reg_2274 + 12'd1);

assign notlhs1_fu_2871_p2 = ((tmp_17_fu_2839_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notlhs_fu_2853_p2 = ((tmp_15_fu_2821_p4 != 8'd255) ? 1'b1 : 1'b0);

assign notrhs1_fu_2877_p2 = ((tmp_92_fu_2849_p1 == 23'd0) ? 1'b1 : 1'b0);

assign notrhs_fu_2859_p2 = ((tmp_91_fu_2831_p1 == 23'd0) ? 1'b1 : 1'b0);

assign tmp_15_fu_2821_p4 = {{xmax_2_to_int_fu_2817_p1[30:23]}};

assign tmp_17_fu_2839_p4 = {{xmax1_to_int_fu_2835_p1[30:23]}};

assign tmp_19_fu_2865_p2 = (notrhs_fu_2859_p2 | notlhs_fu_2853_p2);

assign tmp_20_fu_2883_p2 = (notrhs1_fu_2877_p2 | notlhs1_fu_2871_p2);

assign tmp_21_fu_2889_p2 = (tmp_20_fu_2883_p2 & tmp_19_fu_2865_p2);

assign tmp_23_fu_2895_p2 = (tmp_22_fu_2471_p2 & tmp_21_fu_2889_p2);

assign tmp_57_fu_2529_p2 = (tmp_s_reg_2186 + 19'd1);

assign tmp_58_fu_2535_p1 = tmp_s_reg_2186;

assign tmp_59_fu_2540_p2 = ((tmp_s_reg_2186 == 19'd262199) ? 1'b1 : 1'b0);

assign tmp_63_fu_2552_p1 = invdar_reg_2197;

assign tmp_64_fu_2557_p2 = ((invdar_reg_2197 == 19'd264821) ? 1'b1 : 1'b0);

assign tmp_65_fu_2593_p1 = invdar1_reg_2208;

assign tmp_66_fu_2598_p2 = ((invdar1_reg_2208 == 11'd1099) ? 1'b1 : 1'b0);

assign tmp_67_fu_2652_p1 = invdar2_reg_2219;

assign tmp_68_fu_2657_p2 = ((invdar2_reg_2219 == 7'd69) ? 1'b1 : 1'b0);

assign tmp_69_fu_2692_p1 = j_s_reg_2241;

assign tmp_70_fu_2697_p2 = ((tmp_69_fu_2692_p1 < batch_normalization_14_reg_3010) ? 1'b1 : 1'b0);

assign tmp_72_fu_2708_p1 = j_8_reg_2252;

assign tmp_73_fu_2713_p2 = ((tmp_72_fu_2708_p1 < batch_normalization_14_reg_3010) ? 1'b1 : 1'b0);

assign tmp_76_fu_2753_p1 = j_1_reg_2274;

assign tmp_77_fu_2758_p2 = ((tmp_76_fu_2753_p1 < batch_normalization_20_reg_3083) ? 1'b1 : 1'b0);

assign tmp_79_fu_2769_p1 = j_2_reg_2285;

assign tmp_80_fu_2774_p2 = ((tmp_79_fu_2769_p1 < batch_normalization_20_reg_3083) ? 1'b1 : 1'b0);

assign tmp_83_fu_2909_p2 = ((ap_phi_mux_i_3_phi_fu_2321_p4 == 3'd6) ? 1'b1 : 1'b0);

assign tmp_88_fu_2935_p1 = j_4_reg_2340;

assign tmp_89_fu_2940_p2 = ((tmp_88_fu_2935_p1 < reg_2501) ? 1'b1 : 1'b0);

assign tmp_91_fu_2831_p1 = xmax_2_to_int_fu_2817_p1[22:0];

assign tmp_92_fu_2849_p1 = xmax1_to_int_fu_2835_p1[22:0];

assign xmax1_to_int_fu_2835_p1 = xmax1_reg_2307;

assign xmax_1_fu_2901_p3 = ((tmp_23_fu_2895_p2[0:0] === 1'b1) ? dense_2_output_array_q1 : xmax1_reg_2307);

assign xmax_2_to_int_fu_2817_p1 = dense_2_output_array_q1;

always @ (posedge ap_clk) begin
    dense_output_numel[1:0] <= 2'b00;
    dense_output_numel[4:3] <= 2'b00;
    dense_output_numel[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    batch_normalization_2[63:1] <= 63'b000000000000000000000000000000000000000000000000000000000000000;
    batch_normalization_3[1:0] <= 2'b00;
    batch_normalization_3[4:3] <= 2'b00;
    batch_normalization_3[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    dense_1_output_numel[0] <= 1'b0;
    dense_1_output_numel[2:2] <= 1'b0;
    dense_1_output_numel[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    dense_1_bias_numel[0] <= 1'b0;
    dense_1_bias_numel[2:2] <= 1'b0;
    dense_1_bias_numel[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    batch_normalization_8[63:1] <= 63'b000000000000000000000000000000000000000000000000000000000000000;
    batch_normalization_12[0] <= 1'b0;
    batch_normalization_12[2:2] <= 1'b0;
    batch_normalization_12[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    dense_2_output_numel[0] <= 1'b0;
    dense_2_output_numel[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    dense_2_kernel_ndim[0] <= 1'b0;
    dense_2_kernel_ndim[63:2] <= 62'b00000000000000000000000000000000000000000000000000000000000000;
    dense_2_kernel_numel[1:0] <= 2'b00;
    dense_2_kernel_numel[63:6] <= 58'b0000000000000000000000000000000000000000000000000000000000;
    dense_2_bias_numel[0] <= 1'b0;
    dense_2_bias_numel[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    reg_2495[0] <= 1'b0;
    reg_2495[2:2] <= 1'b0;
    reg_2495[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    reg_2501[0] <= 1'b0;
    reg_2501[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    tmp_58_reg_2967[63:19] <= 45'b000000000000000000000000000000000000000000000;
    batch_normalization_14_reg_3010[1:0] <= 2'b00;
    batch_normalization_14_reg_3010[4:3] <= 2'b00;
    batch_normalization_14_reg_3010[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    batch_normalization_17_reg_3032[63:1] <= 63'b000000000000000000000000000000000000000000000000000000000000000;
    tmp_69_reg_3042[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_72_reg_3060[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    batch_normalization_20_reg_3083[0] <= 1'b0;
    batch_normalization_20_reg_3083[2:2] <= 1'b0;
    batch_normalization_20_reg_3083[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    batch_normalization_23_reg_3105[63:1] <= 63'b000000000000000000000000000000000000000000000000000000000000000;
    tmp_76_reg_3115[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    tmp_79_reg_3133[63:12] <= 52'b0000000000000000000000000000000000000000000000000000;
    dense_2_output_array_2_reg_3194[11:3] <= 9'b000000000;
    dense_2_output_array_2_reg_3194_pp1_iter1_reg[11:3] <= 9'b000000000;
    dense_2_output_array_2_reg_3194_pp1_iter2_reg[11:3] <= 9'b000000000;
    dense_2_output_array_2_reg_3194_pp1_iter3_reg[11:3] <= 9'b000000000;
end

endmodule //face_classifier_c
