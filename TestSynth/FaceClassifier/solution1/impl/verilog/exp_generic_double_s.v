// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module exp_generic_double_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        x,
        ap_return
);

parameter    ap_ST_fsm_pp0_stage0 = 1'd1;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
input  [63:0] x;
output  [63:0] ap_return;

reg ap_done;
reg ap_idle;
reg ap_ready;

(* fsm_encoding = "none" *) reg   [0:0] ap_CS_fsm;
wire    ap_CS_fsm_pp0_stage0;
wire    ap_enable_reg_pp0_iter0;
wire    ap_block_pp0_stage0;
reg    ap_enable_reg_pp0_iter1;
reg    ap_enable_reg_pp0_iter2;
reg    ap_enable_reg_pp0_iter3;
reg    ap_enable_reg_pp0_iter4;
reg    ap_enable_reg_pp0_iter5;
reg    ap_enable_reg_pp0_iter6;
reg    ap_enable_reg_pp0_iter7;
reg    ap_enable_reg_pp0_iter8;
reg    ap_enable_reg_pp0_iter9;
reg    ap_idle_pp0;
reg    ap_block_state1_pp0_stage0_iter0;
wire    ap_block_state2_pp0_stage0_iter1;
wire    ap_block_state3_pp0_stage0_iter2;
wire    ap_block_state4_pp0_stage0_iter3;
wire    ap_block_state5_pp0_stage0_iter4;
wire    ap_block_state6_pp0_stage0_iter5;
wire    ap_block_state7_pp0_stage0_iter6;
wire    ap_block_state8_pp0_stage0_iter7;
wire    ap_block_state9_pp0_stage0_iter8;
wire    ap_block_state10_pp0_stage0_iter9;
reg    ap_block_pp0_stage0_11001;
wire   [7:0] table_exp_Z1_array_s_address0;
reg    table_exp_Z1_array_s_ce0;
wire   [57:0] table_exp_Z1_array_s_q0;
wire   [7:0] table_f_Z3_array_V_address0;
reg    table_f_Z3_array_V_ce0;
wire   [25:0] table_f_Z3_array_V_q0;
wire   [7:0] table_f_Z3_array_V_address1;
reg    table_f_Z3_array_V_ce1;
wire   [25:0] table_f_Z3_array_V_q1;
wire   [7:0] table_f_Z2_array_V_address0;
reg    table_f_Z2_array_V_ce0;
wire   [41:0] table_f_Z2_array_V_q0;
wire   [0:0] p_Result_s_fu_263_p3;
reg   [0:0] p_Result_s_reg_1178;
reg   [0:0] p_Result_s_reg_1178_pp0_iter1_reg;
reg   [0:0] p_Result_s_reg_1178_pp0_iter2_reg;
reg   [0:0] p_Result_s_reg_1178_pp0_iter3_reg;
reg   [0:0] p_Result_s_reg_1178_pp0_iter4_reg;
reg   [0:0] p_Result_s_reg_1178_pp0_iter5_reg;
reg   [0:0] p_Result_s_reg_1178_pp0_iter6_reg;
reg   [0:0] p_Result_s_reg_1178_pp0_iter7_reg;
reg   [0:0] p_Result_s_reg_1178_pp0_iter8_reg;
wire   [0:0] not_demorgan_fu_297_p2;
reg   [0:0] not_demorgan_reg_1185;
reg   [0:0] not_demorgan_reg_1185_pp0_iter1_reg;
reg   [0:0] not_demorgan_reg_1185_pp0_iter2_reg;
reg   [0:0] not_demorgan_reg_1185_pp0_iter3_reg;
reg   [0:0] not_demorgan_reg_1185_pp0_iter4_reg;
reg   [0:0] not_demorgan_reg_1185_pp0_iter5_reg;
reg   [0:0] not_demorgan_reg_1185_pp0_iter6_reg;
reg   [0:0] not_demorgan_reg_1185_pp0_iter7_reg;
reg   [0:0] not_demorgan_reg_1185_pp0_iter8_reg;
wire   [0:0] tmp_56_i_fu_309_p2;
reg   [0:0] tmp_56_i_reg_1191;
reg   [0:0] tmp_56_i_reg_1191_pp0_iter1_reg;
reg   [0:0] tmp_56_i_reg_1191_pp0_iter2_reg;
reg   [0:0] tmp_56_i_reg_1191_pp0_iter3_reg;
reg   [0:0] tmp_56_i_reg_1191_pp0_iter4_reg;
reg   [0:0] tmp_56_i_reg_1191_pp0_iter5_reg;
reg   [0:0] tmp_56_i_reg_1191_pp0_iter6_reg;
reg   [0:0] tmp_56_i_reg_1191_pp0_iter7_reg;
reg   [0:0] tmp_56_i_reg_1191_pp0_iter8_reg;
wire   [53:0] p_Val2_1_fu_339_p3;
reg   [53:0] p_Val2_1_reg_1198;
wire   [0:0] isNeg_fu_347_p3;
reg   [0:0] isNeg_reg_1203;
wire   [11:0] sh_assign_1_fu_365_p3;
reg   [11:0] sh_assign_1_reg_1209;
wire   [0:0] tmp_109_fu_373_p2;
reg   [0:0] tmp_109_reg_1214;
reg   [0:0] tmp_109_reg_1214_pp0_iter1_reg;
reg   [0:0] tmp_109_reg_1214_pp0_iter2_reg;
reg   [0:0] tmp_109_reg_1214_pp0_iter3_reg;
reg   [0:0] tmp_109_reg_1214_pp0_iter4_reg;
reg   [0:0] tmp_109_reg_1214_pp0_iter5_reg;
reg   [0:0] tmp_109_reg_1214_pp0_iter6_reg;
reg   [0:0] tmp_109_reg_1214_pp0_iter7_reg;
reg   [0:0] tmp_109_reg_1214_pp0_iter8_reg;
reg   [0:0] tmp_121_reg_1222;
reg   [0:0] tmp_121_reg_1222_pp0_iter1_reg;
reg   [0:0] tmp_121_reg_1222_pp0_iter2_reg;
reg   [0:0] tmp_121_reg_1222_pp0_iter3_reg;
reg   [0:0] tmp_121_reg_1222_pp0_iter4_reg;
reg   [0:0] tmp_121_reg_1222_pp0_iter5_reg;
reg   [0:0] tmp_121_reg_1222_pp0_iter6_reg;
reg   [0:0] tmp_121_reg_1222_pp0_iter7_reg;
reg   [0:0] tmp_121_reg_1222_pp0_iter8_reg;
wire  signed [70:0] p_Val2_3_fu_425_p3;
reg  signed [70:0] p_Val2_3_reg_1228;
reg  signed [70:0] p_Val2_3_reg_1228_pp0_iter2_reg;
wire  signed [12:0] r_exp_V_3_fu_531_p3;
reg  signed [12:0] r_exp_V_3_reg_1233;
reg  signed [12:0] r_exp_V_3_reg_1233_pp0_iter2_reg;
reg  signed [12:0] r_exp_V_3_reg_1233_pp0_iter3_reg;
reg  signed [12:0] r_exp_V_3_reg_1233_pp0_iter4_reg;
reg  signed [12:0] r_exp_V_3_reg_1233_pp0_iter5_reg;
reg  signed [12:0] r_exp_V_3_reg_1233_pp0_iter6_reg;
reg  signed [12:0] r_exp_V_3_reg_1233_pp0_iter7_reg;
reg  signed [12:0] r_exp_V_3_reg_1233_pp0_iter8_reg;
wire   [0:0] tmp_110_fu_554_p2;
reg   [0:0] tmp_110_reg_1240;
reg   [0:0] tmp_110_reg_1240_pp0_iter2_reg;
reg   [0:0] tmp_110_reg_1240_pp0_iter3_reg;
reg   [0:0] tmp_110_reg_1240_pp0_iter4_reg;
reg   [0:0] tmp_110_reg_1240_pp0_iter5_reg;
reg   [0:0] tmp_110_reg_1240_pp0_iter6_reg;
reg   [0:0] tmp_110_reg_1240_pp0_iter7_reg;
reg   [0:0] tmp_110_reg_1240_pp0_iter8_reg;
reg   [70:0] tmp_12_reg_1245;
reg   [7:0] m_diff_hi_V_reg_1250;
reg   [7:0] m_diff_hi_V_reg_1250_pp0_iter4_reg;
reg   [7:0] m_diff_hi_V_reg_1250_pp0_iter5_reg;
reg   [7:0] p_Val2_22_reg_1255;
reg   [7:0] p_Val2_22_reg_1255_pp0_iter4_reg;
reg   [7:0] p_Val2_22_reg_1255_pp0_iter5_reg;
reg   [7:0] p_Val2_22_reg_1255_pp0_iter6_reg;
reg   [7:0] p_Val2_22_reg_1255_pp0_iter7_reg;
reg   [7:0] p_Val2_17_reg_1262;
reg   [7:0] p_Val2_17_reg_1262_pp0_iter4_reg;
wire   [34:0] p_Val2_11_fu_629_p1;
reg   [34:0] p_Val2_11_reg_1268;
wire   [35:0] r_V_1_fu_665_p2;
reg   [35:0] r_V_1_reg_1278;
reg   [35:0] r_V_1_reg_1278_pp0_iter5_reg;
wire   [42:0] tmp_116_i_fu_675_p4;
reg   [42:0] tmp_116_i_reg_1289;
reg   [19:0] tmp_13_reg_1294;
wire   [43:0] p_Val2_20_fu_730_p2;
reg   [43:0] p_Val2_20_reg_1309;
reg   [39:0] tmp_14_reg_1315;
reg   [39:0] tmp_14_reg_1315_pp0_iter7_reg;
reg   [57:0] p_Val2_25_reg_1321;
reg   [57:0] p_Val2_25_reg_1321_pp0_iter8_reg;
wire   [43:0] tmp16_fu_781_p2;
reg   [43:0] tmp16_reg_1326;
reg   [49:0] tmp_106_reg_1331;
wire   [99:0] p_Val2_13_fu_836_p2;
reg   [99:0] p_Val2_13_reg_1336;
reg    ap_block_pp0_stage0_subdone;
wire   [63:0] tmp_131_i_fu_643_p1;
wire   [63:0] tmp_134_i_fu_671_p1;
wire   [63:0] tmp_136_i_fu_707_p1;
wire   [63:0] tmp_105_fu_711_p1;
wire   [63:0] p_Val2_s_fu_259_p1;
wire   [10:0] loc_V_fu_271_p4;
wire   [51:0] loc_V_3_fu_281_p1;
wire   [0:0] tmp_i_fu_285_p2;
wire   [0:0] tmp_i_75_fu_291_p2;
wire   [0:0] tmp_i1_fu_303_p2;
wire   [11:0] tmp_i2_cast_fu_315_p1;
wire   [53:0] p_Result_18_fu_325_p3;
wire   [53:0] p_Val2_s_76_fu_333_p2;
wire   [11:0] m_exp_fu_319_p2;
wire   [10:0] tmp_s_fu_355_p2;
wire  signed [11:0] tmp_108_cast_fu_361_p1;
wire  signed [60:0] p_Val2_2_fu_387_p3;
wire  signed [31:0] sh_assign_1_cast_fu_398_p1;
wire   [60:0] tmp_109_cast_fu_405_p1;
wire   [60:0] tmp_93_fu_409_p2;
wire  signed [70:0] p_Val2_2_cast_fu_394_p1;
wire   [70:0] tmp_92_fu_401_p1;
wire  signed [70:0] tmp_110_cast_fu_415_p1;
wire   [70:0] tmp_94_fu_419_p2;
wire   [63:0] tmp_95_fu_432_p4;
wire   [63:0] tmp_96_fu_442_p1;
wire  signed [15:0] tmp_99_fu_458_p4;
wire   [0:0] tmp_115_fu_468_p3;
wire  signed [18:0] tmp_100_fu_480_p3;
wire  signed [30:0] grp_fu_1167_p3;
wire   [17:0] tmp_117_fu_508_p1;
wire   [12:0] tmp_29_fu_492_p4;
wire   [0:0] tmp_101_fu_511_p2;
wire   [12:0] tmp_30_fu_517_p2;
wire   [0:0] tmp_116_fu_501_p3;
wire   [12:0] tmp_31_fu_523_p3;
wire   [63:0] tmp_97_fu_446_p2;
wire   [63:0] tmp_98_fu_452_p2;
wire   [63:0] tmp_11_fu_539_p3;
wire   [70:0] tmp_102_fu_546_p3;
wire  signed [12:0] p_Val2_9_fu_563_p1;
wire   [83:0] p_Val2_9_fu_563_p2;
wire   [71:0] tmp_104_fu_582_p3;
wire  signed [72:0] tmp_103_fu_579_p1;
wire  signed [72:0] tmp_129_cast_fu_589_p1;
wire   [72:0] p_Val2_7_fu_593_p2;
wire   [7:0] Z4_ind_V_fu_633_p4;
wire   [9:0] p_Val2_15_fu_648_p4;
wire   [35:0] tmp_133_i_fu_661_p1;
wire   [35:0] tmp_132_i_fu_658_p1;
wire   [35:0] p_Val2_18_fu_691_p0;
wire   [42:0] p_Val2_18_fu_691_p1;
wire   [78:0] p_Val2_18_fu_691_p2;
wire   [35:0] tmp_120_i_cast_fu_718_p1;
wire   [35:0] tmp_fu_721_p2;
wire   [43:0] tmp_118_i_fu_715_p1;
wire   [43:0] tmp_cast_fu_726_p1;
wire   [48:0] tmp_137_i_fu_746_p4;
wire   [43:0] p_Val2_23_fu_761_p0;
wire   [48:0] p_Val2_23_fu_761_p1;
wire   [92:0] p_Val2_23_fu_761_p2;
wire   [35:0] tmp_15_fu_767_p4;
wire   [43:0] tmp_142_i_cast_fu_777_p1;
wire   [50:0] tmp_140_i_fu_796_p5;
wire   [51:0] tmp_140_i_cast_fu_806_p1;
wire   [51:0] tmp51_cast_fu_810_p1;
wire   [51:0] p_Val2_24_fu_813_p2;
wire   [49:0] exp_Z1P_m_1_V_fu_819_p4;
wire   [49:0] p_Val2_13_fu_836_p0;
wire   [49:0] p_Val2_13_fu_836_p1;
wire   [58:0] tmp_107_fu_851_p1;
wire   [58:0] p_Val2_12_fu_854_p2;
wire   [107:0] tmp_136_cast_fu_868_p1;
wire   [107:0] tmp_108_fu_860_p3;
wire   [107:0] p_Val2_14_fu_871_p2;
wire   [0:0] tmp_119_fu_877_p3;
wire   [12:0] r_exp_V_fu_885_p2;
wire   [12:0] r_exp_V_2_fu_890_p3;
wire   [2:0] tmp_120_fu_897_p4;
wire   [0:0] icmp_fu_907_p2;
wire   [51:0] tmp_34_fu_924_p4;
wire   [51:0] tmp_35_fu_934_p4;
wire   [10:0] tmp_122_fu_952_p1;
wire   [10:0] out_exp_V_fu_956_p2;
wire   [51:0] loc_V_4_fu_944_p3;
wire   [0:0] not_Result_i4_fu_842_p2;
wire   [0:0] sel_tmp1_fu_972_p2;
wire   [0:0] tmp17_fu_977_p2;
wire   [0:0] x_is_ninf_fu_847_p2;
wire   [0:0] tmp_56_i_not_fu_994_p2;
wire   [0:0] sel_tmp3_fu_1004_p2;
wire   [0:0] tmp18_fu_1010_p2;
wire   [0:0] sel_tmp_fu_999_p2;
wire   [0:0] or_cond_fu_913_p2;
wire   [0:0] sel_tmp8_fu_1032_p2;
wire   [0:0] sel_tmp6_fu_1027_p2;
wire   [0:0] sel_tmp9_fu_1037_p2;
wire   [0:0] sel_tmp10_fu_1043_p2;
wire   [0:0] sel_tmp5_fu_1022_p2;
wire   [0:0] tmp19_fu_1049_p2;
wire   [0:0] sel_tmp4_fu_1016_p2;
wire   [0:0] sel_tmp12_fu_1066_p2;
wire   [0:0] sel_tmp44_demorgan_fu_1077_p2;
wire   [0:0] sel_tmp13_fu_1072_p2;
wire   [0:0] sel_tmp14_fu_1082_p2;
wire   [0:0] tmp_111_fu_918_p2;
wire   [0:0] sel_tmp15_fu_1088_p2;
wire   [63:0] p_Result_19_fu_962_p4;
wire   [0:0] sel_tmp2_fu_983_p2;
wire   [0:0] tmp_44_fu_1112_p2;
wire   [63:0] tmp_43_fu_1104_p3;
wire   [63:0] tmp_42_fu_1100_p1;
wire   [0:0] sel_tmp11_fu_1055_p2;
wire   [0:0] sel_tmp7_fu_988_p2;
wire   [0:0] tmp_47_fu_1133_p2;
wire   [63:0] tmp_46_fu_1125_p3;
wire   [63:0] tmp_45_fu_1117_p3;
wire   [0:0] tmp21_fu_1094_p2;
wire   [0:0] tmp20_fu_1061_p2;
wire   [0:0] sel_tmp16_fu_1147_p2;
wire   [0:0] tmp_49_fu_1153_p2;
wire   [63:0] tmp_48_fu_1139_p3;
wire   [15:0] grp_fu_1167_p0;
reg   [0:0] ap_NS_fsm;
reg    ap_idle_pp0_0to8;
reg    ap_reset_idle_pp0;
wire    ap_enable_pp0;
wire   [99:0] p_Val2_13_fu_836_p00;
wire   [99:0] p_Val2_13_fu_836_p10;
wire   [78:0] p_Val2_18_fu_691_p00;
wire   [78:0] p_Val2_18_fu_691_p10;
wire   [92:0] p_Val2_23_fu_761_p00;
wire   [92:0] p_Val2_23_fu_761_p10;

// power-on initialization
initial begin
#0 ap_CS_fsm = 1'd1;
#0 ap_enable_reg_pp0_iter1 = 1'b0;
#0 ap_enable_reg_pp0_iter2 = 1'b0;
#0 ap_enable_reg_pp0_iter3 = 1'b0;
#0 ap_enable_reg_pp0_iter4 = 1'b0;
#0 ap_enable_reg_pp0_iter5 = 1'b0;
#0 ap_enable_reg_pp0_iter6 = 1'b0;
#0 ap_enable_reg_pp0_iter7 = 1'b0;
#0 ap_enable_reg_pp0_iter8 = 1'b0;
#0 ap_enable_reg_pp0_iter9 = 1'b0;
end

exp_generic_doublncg #(
    .DataWidth( 58 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
table_exp_Z1_array_s_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(table_exp_Z1_array_s_address0),
    .ce0(table_exp_Z1_array_s_ce0),
    .q0(table_exp_Z1_array_s_q0)
);

exp_generic_doublocq #(
    .DataWidth( 26 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
table_f_Z3_array_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(table_f_Z3_array_V_address0),
    .ce0(table_f_Z3_array_V_ce0),
    .q0(table_f_Z3_array_V_q0),
    .address1(table_f_Z3_array_V_address1),
    .ce1(table_f_Z3_array_V_ce1),
    .q1(table_f_Z3_array_V_q1)
);

exp_generic_doublpcA #(
    .DataWidth( 42 ),
    .AddressRange( 256 ),
    .AddressWidth( 8 ))
table_f_Z2_array_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(table_f_Z2_array_V_address0),
    .ce0(table_f_Z2_array_V_ce0),
    .q0(table_f_Z2_array_V_q0)
);

face_classifier_cqcK #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 16 ),
    .din1_WIDTH( 16 ),
    .din2_WIDTH( 19 ),
    .dout_WIDTH( 31 ))
face_classifier_cqcK_U65(
    .din0(grp_fu_1167_p0),
    .din1(tmp_99_fu_458_p4),
    .din2(tmp_100_fu_480_p3),
    .dout(grp_fu_1167_p3)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_pp0_stage0;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter1 <= 1'b0;
    end else begin
        if (((1'b0 == ap_block_pp0_stage0_subdone) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
            ap_enable_reg_pp0_iter1 <= ap_start;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter2 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter3 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter4 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter5 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter6 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter7 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter8 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
        end
    end
end

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_enable_reg_pp0_iter9 <= 1'b0;
    end else begin
        if ((1'b0 == ap_block_pp0_stage0_subdone)) begin
            ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
        end
    end
end

always @ (posedge ap_clk) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        isNeg_reg_1203 <= m_exp_fu_319_p2[32'd11];
        not_demorgan_reg_1185 <= not_demorgan_fu_297_p2;
        not_demorgan_reg_1185_pp0_iter1_reg <= not_demorgan_reg_1185;
        p_Result_s_reg_1178 <= p_Val2_s_fu_259_p1[32'd63];
        p_Result_s_reg_1178_pp0_iter1_reg <= p_Result_s_reg_1178;
        p_Val2_1_reg_1198 <= p_Val2_1_fu_339_p3;
        p_Val2_3_reg_1228 <= p_Val2_3_fu_425_p3;
        r_exp_V_3_reg_1233 <= r_exp_V_3_fu_531_p3;
        sh_assign_1_reg_1209 <= sh_assign_1_fu_365_p3;
        tmp_109_reg_1214 <= tmp_109_fu_373_p2;
        tmp_109_reg_1214_pp0_iter1_reg <= tmp_109_reg_1214;
        tmp_110_reg_1240 <= tmp_110_fu_554_p2;
        tmp_121_reg_1222 <= p_Val2_1_fu_339_p3[32'd53];
        tmp_121_reg_1222_pp0_iter1_reg <= tmp_121_reg_1222;
        tmp_56_i_reg_1191 <= tmp_56_i_fu_309_p2;
        tmp_56_i_reg_1191_pp0_iter1_reg <= tmp_56_i_reg_1191;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b0 == ap_block_pp0_stage0_11001)) begin
        m_diff_hi_V_reg_1250 <= {{p_Val2_7_fu_593_p2[58:51]}};
        m_diff_hi_V_reg_1250_pp0_iter4_reg <= m_diff_hi_V_reg_1250;
        m_diff_hi_V_reg_1250_pp0_iter5_reg <= m_diff_hi_V_reg_1250_pp0_iter4_reg;
        not_demorgan_reg_1185_pp0_iter2_reg <= not_demorgan_reg_1185_pp0_iter1_reg;
        not_demorgan_reg_1185_pp0_iter3_reg <= not_demorgan_reg_1185_pp0_iter2_reg;
        not_demorgan_reg_1185_pp0_iter4_reg <= not_demorgan_reg_1185_pp0_iter3_reg;
        not_demorgan_reg_1185_pp0_iter5_reg <= not_demorgan_reg_1185_pp0_iter4_reg;
        not_demorgan_reg_1185_pp0_iter6_reg <= not_demorgan_reg_1185_pp0_iter5_reg;
        not_demorgan_reg_1185_pp0_iter7_reg <= not_demorgan_reg_1185_pp0_iter6_reg;
        not_demorgan_reg_1185_pp0_iter8_reg <= not_demorgan_reg_1185_pp0_iter7_reg;
        p_Result_s_reg_1178_pp0_iter2_reg <= p_Result_s_reg_1178_pp0_iter1_reg;
        p_Result_s_reg_1178_pp0_iter3_reg <= p_Result_s_reg_1178_pp0_iter2_reg;
        p_Result_s_reg_1178_pp0_iter4_reg <= p_Result_s_reg_1178_pp0_iter3_reg;
        p_Result_s_reg_1178_pp0_iter5_reg <= p_Result_s_reg_1178_pp0_iter4_reg;
        p_Result_s_reg_1178_pp0_iter6_reg <= p_Result_s_reg_1178_pp0_iter5_reg;
        p_Result_s_reg_1178_pp0_iter7_reg <= p_Result_s_reg_1178_pp0_iter6_reg;
        p_Result_s_reg_1178_pp0_iter8_reg <= p_Result_s_reg_1178_pp0_iter7_reg;
        p_Val2_11_reg_1268 <= p_Val2_11_fu_629_p1;
        p_Val2_13_reg_1336 <= p_Val2_13_fu_836_p2;
        p_Val2_17_reg_1262 <= {{p_Val2_7_fu_593_p2[42:35]}};
        p_Val2_17_reg_1262_pp0_iter4_reg <= p_Val2_17_reg_1262;
        p_Val2_20_reg_1309 <= p_Val2_20_fu_730_p2;
        p_Val2_22_reg_1255 <= {{p_Val2_7_fu_593_p2[50:43]}};
        p_Val2_22_reg_1255_pp0_iter4_reg <= p_Val2_22_reg_1255;
        p_Val2_22_reg_1255_pp0_iter5_reg <= p_Val2_22_reg_1255_pp0_iter4_reg;
        p_Val2_22_reg_1255_pp0_iter6_reg <= p_Val2_22_reg_1255_pp0_iter5_reg;
        p_Val2_22_reg_1255_pp0_iter7_reg <= p_Val2_22_reg_1255_pp0_iter6_reg;
        p_Val2_25_reg_1321 <= table_exp_Z1_array_s_q0;
        p_Val2_25_reg_1321_pp0_iter8_reg <= p_Val2_25_reg_1321;
        p_Val2_3_reg_1228_pp0_iter2_reg <= p_Val2_3_reg_1228;
        r_V_1_reg_1278 <= r_V_1_fu_665_p2;
        r_V_1_reg_1278_pp0_iter5_reg <= r_V_1_reg_1278;
        r_exp_V_3_reg_1233_pp0_iter2_reg <= r_exp_V_3_reg_1233;
        r_exp_V_3_reg_1233_pp0_iter3_reg <= r_exp_V_3_reg_1233_pp0_iter2_reg;
        r_exp_V_3_reg_1233_pp0_iter4_reg <= r_exp_V_3_reg_1233_pp0_iter3_reg;
        r_exp_V_3_reg_1233_pp0_iter5_reg <= r_exp_V_3_reg_1233_pp0_iter4_reg;
        r_exp_V_3_reg_1233_pp0_iter6_reg <= r_exp_V_3_reg_1233_pp0_iter5_reg;
        r_exp_V_3_reg_1233_pp0_iter7_reg <= r_exp_V_3_reg_1233_pp0_iter6_reg;
        r_exp_V_3_reg_1233_pp0_iter8_reg <= r_exp_V_3_reg_1233_pp0_iter7_reg;
        tmp16_reg_1326 <= tmp16_fu_781_p2;
        tmp_106_reg_1331 <= {{table_exp_Z1_array_s_q0[57:8]}};
        tmp_109_reg_1214_pp0_iter2_reg <= tmp_109_reg_1214_pp0_iter1_reg;
        tmp_109_reg_1214_pp0_iter3_reg <= tmp_109_reg_1214_pp0_iter2_reg;
        tmp_109_reg_1214_pp0_iter4_reg <= tmp_109_reg_1214_pp0_iter3_reg;
        tmp_109_reg_1214_pp0_iter5_reg <= tmp_109_reg_1214_pp0_iter4_reg;
        tmp_109_reg_1214_pp0_iter6_reg <= tmp_109_reg_1214_pp0_iter5_reg;
        tmp_109_reg_1214_pp0_iter7_reg <= tmp_109_reg_1214_pp0_iter6_reg;
        tmp_109_reg_1214_pp0_iter8_reg <= tmp_109_reg_1214_pp0_iter7_reg;
        tmp_110_reg_1240_pp0_iter2_reg <= tmp_110_reg_1240;
        tmp_110_reg_1240_pp0_iter3_reg <= tmp_110_reg_1240_pp0_iter2_reg;
        tmp_110_reg_1240_pp0_iter4_reg <= tmp_110_reg_1240_pp0_iter3_reg;
        tmp_110_reg_1240_pp0_iter5_reg <= tmp_110_reg_1240_pp0_iter4_reg;
        tmp_110_reg_1240_pp0_iter6_reg <= tmp_110_reg_1240_pp0_iter5_reg;
        tmp_110_reg_1240_pp0_iter7_reg <= tmp_110_reg_1240_pp0_iter6_reg;
        tmp_110_reg_1240_pp0_iter8_reg <= tmp_110_reg_1240_pp0_iter7_reg;
        tmp_116_i_reg_1289[25 : 0] <= tmp_116_i_fu_675_p4[25 : 0];
tmp_116_i_reg_1289[42 : 35] <= tmp_116_i_fu_675_p4[42 : 35];
        tmp_121_reg_1222_pp0_iter2_reg <= tmp_121_reg_1222_pp0_iter1_reg;
        tmp_121_reg_1222_pp0_iter3_reg <= tmp_121_reg_1222_pp0_iter2_reg;
        tmp_121_reg_1222_pp0_iter4_reg <= tmp_121_reg_1222_pp0_iter3_reg;
        tmp_121_reg_1222_pp0_iter5_reg <= tmp_121_reg_1222_pp0_iter4_reg;
        tmp_121_reg_1222_pp0_iter6_reg <= tmp_121_reg_1222_pp0_iter5_reg;
        tmp_121_reg_1222_pp0_iter7_reg <= tmp_121_reg_1222_pp0_iter6_reg;
        tmp_121_reg_1222_pp0_iter8_reg <= tmp_121_reg_1222_pp0_iter7_reg;
        tmp_12_reg_1245 <= {{p_Val2_9_fu_563_p2[83:13]}};
        tmp_13_reg_1294 <= {{p_Val2_18_fu_691_p2[78:59]}};
        tmp_14_reg_1315 <= {{table_f_Z2_array_V_q0[41:2]}};
        tmp_14_reg_1315_pp0_iter7_reg <= tmp_14_reg_1315;
        tmp_56_i_reg_1191_pp0_iter2_reg <= tmp_56_i_reg_1191_pp0_iter1_reg;
        tmp_56_i_reg_1191_pp0_iter3_reg <= tmp_56_i_reg_1191_pp0_iter2_reg;
        tmp_56_i_reg_1191_pp0_iter4_reg <= tmp_56_i_reg_1191_pp0_iter3_reg;
        tmp_56_i_reg_1191_pp0_iter5_reg <= tmp_56_i_reg_1191_pp0_iter4_reg;
        tmp_56_i_reg_1191_pp0_iter6_reg <= tmp_56_i_reg_1191_pp0_iter5_reg;
        tmp_56_i_reg_1191_pp0_iter7_reg <= tmp_56_i_reg_1191_pp0_iter6_reg;
        tmp_56_i_reg_1191_pp0_iter8_reg <= tmp_56_i_reg_1191_pp0_iter7_reg;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b0 == ap_block_pp0_stage0) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0)) | ((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter9 == 1'b1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0 == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter9 == 1'b0) & (ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0 = 1'b1;
    end else begin
        ap_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((ap_enable_reg_pp0_iter8 == 1'b0) & (ap_enable_reg_pp0_iter7 == 1'b0) & (ap_enable_reg_pp0_iter6 == 1'b0) & (ap_enable_reg_pp0_iter5 == 1'b0) & (ap_enable_reg_pp0_iter4 == 1'b0) & (ap_enable_reg_pp0_iter3 == 1'b0) & (ap_enable_reg_pp0_iter2 == 1'b0) & (ap_enable_reg_pp0_iter1 == 1'b0) & (ap_enable_reg_pp0_iter0 == 1'b0))) begin
        ap_idle_pp0_0to8 = 1'b1;
    end else begin
        ap_idle_pp0_0to8 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_start == 1'b1) & (1'b1 == ap_CS_fsm_pp0_stage0))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (ap_idle_pp0_0to8 == 1'b1))) begin
        ap_reset_idle_pp0 = 1'b1;
    end else begin
        ap_reset_idle_pp0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter6 == 1'b1))) begin
        table_exp_Z1_array_s_ce0 = 1'b1;
    end else begin
        table_exp_Z1_array_s_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter5 == 1'b1))) begin
        table_f_Z2_array_V_ce0 = 1'b1;
    end else begin
        table_f_Z2_array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter3 == 1'b1))) begin
        table_f_Z3_array_V_ce0 = 1'b1;
    end else begin
        table_f_Z3_array_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if (((1'b0 == ap_block_pp0_stage0_11001) & (ap_enable_reg_pp0_iter4 == 1'b1))) begin
        table_f_Z3_array_V_ce1 = 1'b1;
    end else begin
        table_f_Z3_array_V_ce1 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_pp0_stage0 : begin
            ap_NS_fsm = ap_ST_fsm_pp0_stage0;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign Z4_ind_V_fu_633_p4 = {{p_Val2_7_fu_593_p2[34:27]}};

assign ap_CS_fsm_pp0_stage0 = ap_CS_fsm[32'd0];

assign ap_block_pp0_stage0 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_pp0_stage0_11001 = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

always @ (*) begin
    ap_block_pp0_stage0_subdone = ((ap_start == 1'b0) & (ap_start == 1'b1));
end

assign ap_block_state10_pp0_stage0_iter9 = ~(1'b1 == 1'b1);

always @ (*) begin
    ap_block_state1_pp0_stage0_iter0 = (ap_start == 1'b0);
end

assign ap_block_state2_pp0_stage0_iter1 = ~(1'b1 == 1'b1);

assign ap_block_state3_pp0_stage0_iter2 = ~(1'b1 == 1'b1);

assign ap_block_state4_pp0_stage0_iter3 = ~(1'b1 == 1'b1);

assign ap_block_state5_pp0_stage0_iter4 = ~(1'b1 == 1'b1);

assign ap_block_state6_pp0_stage0_iter5 = ~(1'b1 == 1'b1);

assign ap_block_state7_pp0_stage0_iter6 = ~(1'b1 == 1'b1);

assign ap_block_state8_pp0_stage0_iter7 = ~(1'b1 == 1'b1);

assign ap_block_state9_pp0_stage0_iter8 = ~(1'b1 == 1'b1);

assign ap_enable_pp0 = (ap_idle_pp0 ^ 1'b1);

assign ap_enable_reg_pp0_iter0 = ap_start;

assign ap_return = ((tmp_49_fu_1153_p2[0:0] === 1'b1) ? 64'd0 : tmp_48_fu_1139_p3);

assign exp_Z1P_m_1_V_fu_819_p4 = {{p_Val2_24_fu_813_p2[51:2]}};

assign grp_fu_1167_p0 = 31'd23637;

assign icmp_fu_907_p2 = (($signed(tmp_120_fu_897_p4) > $signed(3'd0)) ? 1'b1 : 1'b0);

assign isNeg_fu_347_p3 = m_exp_fu_319_p2[32'd11];

assign loc_V_3_fu_281_p1 = p_Val2_s_fu_259_p1[51:0];

assign loc_V_4_fu_944_p3 = ((tmp_119_fu_877_p3[0:0] === 1'b1) ? tmp_34_fu_924_p4 : tmp_35_fu_934_p4);

assign loc_V_fu_271_p4 = {{p_Val2_s_fu_259_p1[62:52]}};

assign m_exp_fu_319_p2 = ($signed(12'd3073) + $signed(tmp_i2_cast_fu_315_p1));

assign not_Result_i4_fu_842_p2 = (p_Result_s_reg_1178_pp0_iter8_reg ^ 1'd1);

assign not_demorgan_fu_297_p2 = (tmp_i_fu_285_p2 & tmp_i_75_fu_291_p2);

assign or_cond_fu_913_p2 = (tmp_110_reg_1240_pp0_iter8_reg | icmp_fu_907_p2);

assign out_exp_V_fu_956_p2 = (11'd1023 + tmp_122_fu_952_p1);

assign p_Result_18_fu_325_p3 = {{2'd1}, {loc_V_3_fu_281_p1}};

assign p_Result_19_fu_962_p4 = {{{{1'd0}, {out_exp_V_fu_956_p2}}}, {loc_V_4_fu_944_p3}};

assign p_Result_s_fu_263_p3 = p_Val2_s_fu_259_p1[32'd63];

assign p_Val2_11_fu_629_p1 = p_Val2_7_fu_593_p2[34:0];

assign p_Val2_12_fu_854_p2 = (59'd16 + tmp_107_fu_851_p1);

assign p_Val2_13_fu_836_p0 = p_Val2_13_fu_836_p00;

assign p_Val2_13_fu_836_p00 = tmp_106_reg_1331;

assign p_Val2_13_fu_836_p1 = p_Val2_13_fu_836_p10;

assign p_Val2_13_fu_836_p10 = exp_Z1P_m_1_V_fu_819_p4;

assign p_Val2_13_fu_836_p2 = (p_Val2_13_fu_836_p0 * p_Val2_13_fu_836_p1);

assign p_Val2_14_fu_871_p2 = (tmp_136_cast_fu_868_p1 + tmp_108_fu_860_p3);

assign p_Val2_15_fu_648_p4 = {{table_f_Z3_array_V_q0[25:16]}};

assign p_Val2_18_fu_691_p0 = p_Val2_18_fu_691_p00;

assign p_Val2_18_fu_691_p00 = r_V_1_reg_1278;

assign p_Val2_18_fu_691_p1 = p_Val2_18_fu_691_p10;

assign p_Val2_18_fu_691_p10 = tmp_116_i_fu_675_p4;

assign p_Val2_18_fu_691_p2 = (p_Val2_18_fu_691_p0 * p_Val2_18_fu_691_p1);

assign p_Val2_1_fu_339_p3 = ((p_Result_s_fu_263_p3[0:0] === 1'b1) ? p_Val2_s_76_fu_333_p2 : p_Result_18_fu_325_p3);

assign p_Val2_20_fu_730_p2 = (tmp_118_i_fu_715_p1 + tmp_cast_fu_726_p1);

assign p_Val2_23_fu_761_p0 = p_Val2_23_fu_761_p00;

assign p_Val2_23_fu_761_p00 = p_Val2_20_reg_1309;

assign p_Val2_23_fu_761_p1 = p_Val2_23_fu_761_p10;

assign p_Val2_23_fu_761_p10 = tmp_137_i_fu_746_p4;

assign p_Val2_23_fu_761_p2 = (p_Val2_23_fu_761_p0 * p_Val2_23_fu_761_p1);

assign p_Val2_24_fu_813_p2 = (tmp_140_i_cast_fu_806_p1 + tmp51_cast_fu_810_p1);

assign p_Val2_2_cast_fu_394_p1 = p_Val2_2_fu_387_p3;

assign p_Val2_2_fu_387_p3 = {{p_Val2_1_reg_1198}, {7'd0}};

assign p_Val2_3_fu_425_p3 = ((isNeg_reg_1203[0:0] === 1'b1) ? tmp_110_cast_fu_415_p1 : tmp_94_fu_419_p2);

assign p_Val2_7_fu_593_p2 = ($signed(tmp_103_fu_579_p1) - $signed(tmp_129_cast_fu_589_p1));

assign p_Val2_9_fu_563_p1 = r_exp_V_3_reg_1233;

assign p_Val2_9_fu_563_p2 = ($signed({{1'b0}, {84'd1636647506585939924452}}) * $signed(p_Val2_9_fu_563_p1));

assign p_Val2_s_76_fu_333_p2 = (54'd0 - p_Result_18_fu_325_p3);

assign p_Val2_s_fu_259_p1 = x;

assign r_V_1_fu_665_p2 = (tmp_133_i_fu_661_p1 + tmp_132_i_fu_658_p1);

assign r_exp_V_2_fu_890_p3 = ((tmp_119_fu_877_p3[0:0] === 1'b1) ? r_exp_V_3_reg_1233_pp0_iter8_reg : r_exp_V_fu_885_p2);

assign r_exp_V_3_fu_531_p3 = ((tmp_116_fu_501_p3[0:0] === 1'b1) ? tmp_31_fu_523_p3 : tmp_29_fu_492_p4);

assign r_exp_V_fu_885_p2 = ($signed(13'd8191) + $signed(r_exp_V_3_reg_1233_pp0_iter8_reg));

assign sel_tmp10_fu_1043_p2 = (sel_tmp9_fu_1037_p2 | sel_tmp6_fu_1027_p2);

assign sel_tmp11_fu_1055_p2 = (tmp19_fu_1049_p2 & sel_tmp4_fu_1016_p2);

assign sel_tmp12_fu_1066_p2 = (or_cond_fu_913_p2 ^ 1'd1);

assign sel_tmp13_fu_1072_p2 = (tmp_109_reg_1214_pp0_iter8_reg & sel_tmp12_fu_1066_p2);

assign sel_tmp14_fu_1082_p2 = (sel_tmp44_demorgan_fu_1077_p2 ^ 1'd1);

assign sel_tmp15_fu_1088_p2 = (sel_tmp14_fu_1082_p2 | sel_tmp13_fu_1072_p2);

assign sel_tmp16_fu_1147_p2 = (tmp21_fu_1094_p2 | tmp20_fu_1061_p2);

assign sel_tmp1_fu_972_p2 = (not_demorgan_reg_1185_pp0_iter8_reg ^ 1'd1);

assign sel_tmp2_fu_983_p2 = (tmp_56_i_reg_1191_pp0_iter8_reg & tmp17_fu_977_p2);

assign sel_tmp3_fu_1004_p2 = (x_is_ninf_fu_847_p2 ^ 1'd1);

assign sel_tmp44_demorgan_fu_1077_p2 = (tmp_109_reg_1214_pp0_iter8_reg | icmp_fu_907_p2);

assign sel_tmp4_fu_1016_p2 = (tmp18_fu_1010_p2 & sel_tmp_fu_999_p2);

assign sel_tmp5_fu_1022_p2 = (tmp_121_reg_1222_pp0_iter8_reg ^ 1'd1);

assign sel_tmp6_fu_1027_p2 = (tmp_109_reg_1214_pp0_iter8_reg & or_cond_fu_913_p2);

assign sel_tmp7_fu_988_p2 = (x_is_ninf_fu_847_p2 & sel_tmp1_fu_972_p2);

assign sel_tmp8_fu_1032_p2 = (tmp_109_reg_1214_pp0_iter8_reg ^ 1'd1);

assign sel_tmp9_fu_1037_p2 = (sel_tmp8_fu_1032_p2 & icmp_fu_907_p2);

assign sel_tmp_fu_999_p2 = (tmp_56_i_not_fu_994_p2 | p_Result_s_reg_1178_pp0_iter8_reg);

assign sh_assign_1_cast_fu_398_p1 = $signed(sh_assign_1_reg_1209);

assign sh_assign_1_fu_365_p3 = ((isNeg_fu_347_p3[0:0] === 1'b1) ? tmp_108_cast_fu_361_p1 : m_exp_fu_319_p2);

assign table_exp_Z1_array_s_address0 = tmp_105_fu_711_p1;

assign table_f_Z2_array_V_address0 = tmp_136_i_fu_707_p1;

assign table_f_Z3_array_V_address0 = tmp_131_i_fu_643_p1;

assign table_f_Z3_array_V_address1 = tmp_134_i_fu_671_p1;

assign tmp16_fu_781_p2 = (tmp_142_i_cast_fu_777_p1 + p_Val2_20_reg_1309);

assign tmp17_fu_977_p2 = (sel_tmp1_fu_972_p2 & not_Result_i4_fu_842_p2);

assign tmp18_fu_1010_p2 = (sel_tmp3_fu_1004_p2 & sel_tmp1_fu_972_p2);

assign tmp19_fu_1049_p2 = (sel_tmp5_fu_1022_p2 & sel_tmp10_fu_1043_p2);

assign tmp20_fu_1061_p2 = (tmp_121_reg_1222_pp0_iter8_reg & sel_tmp10_fu_1043_p2);

assign tmp21_fu_1094_p2 = (tmp_111_fu_918_p2 & sel_tmp15_fu_1088_p2);

assign tmp51_cast_fu_810_p1 = tmp16_reg_1326;

assign tmp_100_fu_480_p3 = {{tmp_115_fu_468_p3}, {18'd131072}};

assign tmp_101_fu_511_p2 = ((tmp_117_fu_508_p1 == 18'd0) ? 1'b1 : 1'b0);

assign tmp_102_fu_546_p3 = {{tmp_11_fu_539_p3}, {7'd0}};

assign tmp_103_fu_579_p1 = p_Val2_3_reg_1228_pp0_iter2_reg;

assign tmp_104_fu_582_p3 = {{tmp_12_reg_1245}, {1'd0}};

assign tmp_105_fu_711_p1 = m_diff_hi_V_reg_1250_pp0_iter5_reg;

assign tmp_107_fu_851_p1 = p_Val2_25_reg_1321_pp0_iter8_reg;

assign tmp_108_cast_fu_361_p1 = $signed(tmp_s_fu_355_p2);

assign tmp_108_fu_860_p3 = {{p_Val2_12_fu_854_p2}, {49'd0}};

assign tmp_109_cast_fu_405_p1 = $unsigned(sh_assign_1_cast_fu_398_p1);

assign tmp_109_fu_373_p2 = (($signed(m_exp_fu_319_p2) > $signed(12'd0)) ? 1'b1 : 1'b0);

assign tmp_110_cast_fu_415_p1 = $signed(tmp_93_fu_409_p2);

assign tmp_110_fu_554_p2 = ((tmp_102_fu_546_p3 != p_Val2_2_cast_fu_394_p1) ? 1'b1 : 1'b0);

assign tmp_111_fu_918_p2 = (($signed(r_exp_V_2_fu_890_p3) < $signed(13'd7170)) ? 1'b1 : 1'b0);

assign tmp_115_fu_468_p3 = p_Val2_3_fu_425_p3[32'd70];

assign tmp_116_fu_501_p3 = grp_fu_1167_p3[32'd30];

assign tmp_116_i_fu_675_p4 = {{{p_Val2_17_reg_1262_pp0_iter4_reg}, {9'd0}}, {table_f_Z3_array_V_q1}};

assign tmp_117_fu_508_p1 = grp_fu_1167_p3[17:0];

assign tmp_118_i_fu_715_p1 = tmp_116_i_reg_1289;

assign tmp_119_fu_877_p3 = p_Val2_14_fu_871_p2[32'd106];

assign tmp_11_fu_539_p3 = ((isNeg_reg_1203[0:0] === 1'b1) ? tmp_97_fu_446_p2 : tmp_98_fu_452_p2);

assign tmp_120_fu_897_p4 = {{r_exp_V_2_fu_890_p3[12:10]}};

assign tmp_120_i_cast_fu_718_p1 = tmp_13_reg_1294;

assign tmp_122_fu_952_p1 = r_exp_V_2_fu_890_p3[10:0];

assign tmp_129_cast_fu_589_p1 = $signed(tmp_104_fu_582_p3);

assign tmp_131_i_fu_643_p1 = Z4_ind_V_fu_633_p4;

assign tmp_132_i_fu_658_p1 = p_Val2_11_reg_1268;

assign tmp_133_i_fu_661_p1 = p_Val2_15_fu_648_p4;

assign tmp_134_i_fu_671_p1 = p_Val2_17_reg_1262;

assign tmp_136_cast_fu_868_p1 = p_Val2_13_reg_1336;

assign tmp_136_i_fu_707_p1 = p_Val2_22_reg_1255_pp0_iter4_reg;

assign tmp_137_i_fu_746_p4 = {{{p_Val2_22_reg_1255_pp0_iter6_reg}, {1'd0}}, {tmp_14_reg_1315}};

assign tmp_140_i_cast_fu_806_p1 = tmp_140_i_fu_796_p5;

assign tmp_140_i_fu_796_p5 = {{{{p_Val2_22_reg_1255_pp0_iter7_reg}, {1'd0}}, {tmp_14_reg_1315_pp0_iter7_reg}}, {2'd0}};

assign tmp_142_i_cast_fu_777_p1 = tmp_15_fu_767_p4;

assign tmp_15_fu_767_p4 = {{p_Val2_23_fu_761_p2[92:57]}};

assign tmp_29_fu_492_p4 = {{grp_fu_1167_p3[30:18]}};

assign tmp_30_fu_517_p2 = (13'd1 + tmp_29_fu_492_p4);

assign tmp_31_fu_523_p3 = ((tmp_101_fu_511_p2[0:0] === 1'b1) ? tmp_29_fu_492_p4 : tmp_30_fu_517_p2);

assign tmp_34_fu_924_p4 = {{p_Val2_14_fu_871_p2[105:54]}};

assign tmp_35_fu_934_p4 = {{p_Val2_14_fu_871_p2[104:53]}};

assign tmp_42_fu_1100_p1 = p_Result_19_fu_962_p4;

assign tmp_43_fu_1104_p3 = ((sel_tmp2_fu_983_p2[0:0] === 1'b1) ? 64'd9218868437227405312 : 64'd9223372036854775807);

assign tmp_44_fu_1112_p2 = (sel_tmp2_fu_983_p2 | not_demorgan_reg_1185_pp0_iter8_reg);

assign tmp_45_fu_1117_p3 = ((tmp_44_fu_1112_p2[0:0] === 1'b1) ? tmp_43_fu_1104_p3 : tmp_42_fu_1100_p1);

assign tmp_46_fu_1125_p3 = ((sel_tmp11_fu_1055_p2[0:0] === 1'b1) ? 64'd9218868437227405312 : 64'd0);

assign tmp_47_fu_1133_p2 = (sel_tmp7_fu_988_p2 | sel_tmp11_fu_1055_p2);

assign tmp_48_fu_1139_p3 = ((tmp_47_fu_1133_p2[0:0] === 1'b1) ? tmp_46_fu_1125_p3 : tmp_45_fu_1117_p3);

assign tmp_49_fu_1153_p2 = (sel_tmp4_fu_1016_p2 & sel_tmp16_fu_1147_p2);

assign tmp_56_i_fu_309_p2 = (tmp_i_fu_285_p2 & tmp_i1_fu_303_p2);

assign tmp_56_i_not_fu_994_p2 = (tmp_56_i_reg_1191_pp0_iter8_reg ^ 1'd1);

assign tmp_92_fu_401_p1 = $unsigned(sh_assign_1_cast_fu_398_p1);

assign tmp_93_fu_409_p2 = $signed(p_Val2_2_fu_387_p3) >>> tmp_109_cast_fu_405_p1;

assign tmp_94_fu_419_p2 = p_Val2_2_cast_fu_394_p1 << tmp_92_fu_401_p1;

assign tmp_95_fu_432_p4 = {{p_Val2_3_fu_425_p3[70:7]}};

assign tmp_96_fu_442_p1 = $unsigned(sh_assign_1_cast_fu_398_p1);

assign tmp_97_fu_446_p2 = tmp_95_fu_432_p4 << tmp_96_fu_442_p1;

assign tmp_98_fu_452_p2 = $signed(tmp_95_fu_432_p4) >>> tmp_96_fu_442_p1;

assign tmp_99_fu_458_p4 = {{p_Val2_3_fu_425_p3[70:55]}};

assign tmp_cast_fu_726_p1 = tmp_fu_721_p2;

assign tmp_fu_721_p2 = (tmp_120_i_cast_fu_718_p1 + r_V_1_reg_1278_pp0_iter5_reg);

assign tmp_i1_fu_303_p2 = ((loc_V_3_fu_281_p1 == 52'd0) ? 1'b1 : 1'b0);

assign tmp_i2_cast_fu_315_p1 = loc_V_fu_271_p4;

assign tmp_i_75_fu_291_p2 = ((loc_V_3_fu_281_p1 != 52'd0) ? 1'b1 : 1'b0);

assign tmp_i_fu_285_p2 = ((loc_V_fu_271_p4 == 11'd2047) ? 1'b1 : 1'b0);

assign tmp_s_fu_355_p2 = (11'd1023 - loc_V_fu_271_p4);

assign x_is_ninf_fu_847_p2 = (tmp_56_i_reg_1191_pp0_iter8_reg & p_Result_s_reg_1178_pp0_iter8_reg);

always @ (posedge ap_clk) begin
    tmp_116_i_reg_1289[34:26] <= 9'b000000000;
end

endmodule //exp_generic_double_s
