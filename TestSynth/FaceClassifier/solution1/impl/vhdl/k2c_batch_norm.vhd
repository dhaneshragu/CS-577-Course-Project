-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k2c_batch_norm is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    outputs_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    outputs_array_ce0 : OUT STD_LOGIC;
    outputs_array_we0 : OUT STD_LOGIC;
    outputs_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    inputs_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    inputs_array_ce0 : OUT STD_LOGIC;
    inputs_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    inputs_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    inputs_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    inputs_shape_ce0 : OUT STD_LOGIC;
    inputs_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    mean_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    mean_array_ce0 : OUT STD_LOGIC;
    mean_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    stdev_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    stdev_array_ce0 : OUT STD_LOGIC;
    stdev_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    gamma_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    gamma_array_ce0 : OUT STD_LOGIC;
    gamma_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    beta_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    beta_array_ce0 : OUT STD_LOGIC;
    beta_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of k2c_batch_norm is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (3 downto 0) := "0010";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (3 downto 0) := "0100";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (3 downto 0) := "1000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_reg_144 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal step_reg_205 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_fu_174_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state3_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state4_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_state5_pp0_stage0_iter2 : BOOLEAN;
    signal ap_block_state6_pp0_stage0_iter3 : BOOLEAN;
    signal ap_block_state7_pp0_stage0_iter4 : BOOLEAN;
    signal ap_block_state8_pp0_stage0_iter5 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter6 : BOOLEAN;
    signal ap_block_state10_pp0_stage0_iter7 : BOOLEAN;
    signal ap_block_state11_pp0_stage0_iter8 : BOOLEAN;
    signal ap_block_state12_pp0_stage0_iter9 : BOOLEAN;
    signal ap_block_state13_pp0_stage0_iter10 : BOOLEAN;
    signal ap_block_state14_pp0_stage0_iter11 : BOOLEAN;
    signal ap_block_state15_pp0_stage0_iter12 : BOOLEAN;
    signal ap_block_state16_pp0_stage0_iter13 : BOOLEAN;
    signal ap_block_state17_pp0_stage0_iter14 : BOOLEAN;
    signal ap_block_state18_pp0_stage0_iter15 : BOOLEAN;
    signal ap_block_state19_pp0_stage0_iter16 : BOOLEAN;
    signal ap_block_state20_pp0_stage0_iter17 : BOOLEAN;
    signal ap_block_state21_pp0_stage0_iter18 : BOOLEAN;
    signal ap_block_state22_pp0_stage0_iter19 : BOOLEAN;
    signal ap_block_state23_pp0_stage0_iter20 : BOOLEAN;
    signal ap_block_state24_pp0_stage0_iter21 : BOOLEAN;
    signal ap_block_state25_pp0_stage0_iter22 : BOOLEAN;
    signal ap_block_state26_pp0_stage0_iter23 : BOOLEAN;
    signal ap_block_state27_pp0_stage0_iter24 : BOOLEAN;
    signal ap_block_state28_pp0_stage0_iter25 : BOOLEAN;
    signal ap_block_state29_pp0_stage0_iter26 : BOOLEAN;
    signal ap_block_state30_pp0_stage0_iter27 : BOOLEAN;
    signal ap_block_state31_pp0_stage0_iter28 : BOOLEAN;
    signal ap_block_state32_pp0_stage0_iter29 : BOOLEAN;
    signal ap_block_state33_pp0_stage0_iter30 : BOOLEAN;
    signal ap_block_state34_pp0_stage0_iter31 : BOOLEAN;
    signal ap_block_state35_pp0_stage0_iter32 : BOOLEAN;
    signal ap_block_state36_pp0_stage0_iter33 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_cast_reg_210_pp0_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter2_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter3_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter4_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter5_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter6_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter7_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter8_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter9_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter10_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter11_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter12_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter13_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter14_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter15_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter26_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter27_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter28_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter29_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter30_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter31_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_reg_210_pp0_iter32_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_178_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter5_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter6_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter7_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter8_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter9_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter10_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter11_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter12_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter13_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter14_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter15_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter16_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter17_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter18_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter19_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter20_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter21_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter22_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter23_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter24_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter25_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter26_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter27_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter28_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter29_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter30_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter31_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_217_pp0_iter32_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_39_fu_183_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal grp_fu_189_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal idx_reg_226 : STD_LOGIC_VECTOR (63 downto 0);
    signal idx_reg_226_pp0_iter16_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal idx_reg_226_pp0_iter17_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal idx_reg_226_pp0_iter18_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal idx_reg_226_pp0_iter19_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal idx_reg_226_pp0_iter20_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal idx_reg_226_pp0_iter21_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal idx_reg_226_pp0_iter22_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal idx_reg_226_pp0_iter23_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal idx_reg_226_pp0_iter24_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal idx_reg_226_pp0_iter25_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_155_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_reg_258 : STD_LOGIC_VECTOR (31 downto 0);
    signal stdev_array_load_reg_263 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_170_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal temp_reg_278 : STD_LOGIC_VECTOR (31 downto 0);
    signal gamma_array_load_reg_283 : STD_LOGIC_VECTOR (31 downto 0);
    signal beta_array_load_reg_288 : STD_LOGIC_VECTOR (31 downto 0);
    signal beta_array_load_reg_288_pp0_iter28_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal beta_array_load_reg_288_pp0_iter29_reg : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_166_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_293 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state3 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter3 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter4 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter5 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter6 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter7 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter8 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter9 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter10 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter11 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter12 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter13 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter14 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter15 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter16 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter17 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter18 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter19 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter20 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter21 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter22 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter23 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter24 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter25 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter26 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter27 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter28 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter29 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter30 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter31 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter32 : STD_LOGIC := '0';
    signal ap_enable_reg_pp0_iter33 : STD_LOGIC := '0';
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal grp_fu_161_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_189_p0 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;

    component face_classifier_cjbC IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_cdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_ceOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_ckbM IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_clbW IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (11 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;



begin
    face_classifier_cjbC_U52 : component face_classifier_cjbC
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => inputs_array_q0,
        din1 => mean_array_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_155_p2);

    face_classifier_cdEe_U53 : component face_classifier_cdEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_s_reg_293,
        din1 => beta_array_load_reg_288_pp0_iter29_reg,
        ce => ap_const_logic_1,
        dout => grp_fu_161_p2);

    face_classifier_ceOg_U54 : component face_classifier_ceOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => temp_reg_278,
        din1 => gamma_array_load_reg_283,
        ce => ap_const_logic_1,
        dout => grp_fu_166_p2);

    face_classifier_ckbM_U55 : component face_classifier_ckbM
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_reg_258,
        din1 => stdev_array_load_reg_263,
        ce => ap_const_logic_1,
        dout => grp_fu_170_p2);

    face_classifier_clbW_U56 : component face_classifier_clbW
    generic map (
        ID => 1,
        NUM_STAGE => 16,
        din0_WIDTH => 12,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_189_p0,
        din1 => step_reg_205,
        ce => ap_const_logic_1,
        dout => grp_fu_189_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp0_exit_iter0_state3)) then 
                        ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state3);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter10_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter10 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter10 <= ap_enable_reg_pp0_iter9;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter11_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter11 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter11 <= ap_enable_reg_pp0_iter10;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter12_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter12 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter12 <= ap_enable_reg_pp0_iter11;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter13_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter13 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter13 <= ap_enable_reg_pp0_iter12;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter14_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter14 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter14 <= ap_enable_reg_pp0_iter13;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter15_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter15 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter15 <= ap_enable_reg_pp0_iter14;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter16_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter16 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter16 <= ap_enable_reg_pp0_iter15;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter17_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter17 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter17 <= ap_enable_reg_pp0_iter16;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter18_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter18 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter18 <= ap_enable_reg_pp0_iter17;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter19_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter19 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter19 <= ap_enable_reg_pp0_iter18;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter2 <= ap_enable_reg_pp0_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter20_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter20 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter20 <= ap_enable_reg_pp0_iter19;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter21_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter21 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter21 <= ap_enable_reg_pp0_iter20;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter22_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter22 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter22 <= ap_enable_reg_pp0_iter21;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter23_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter23 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter23 <= ap_enable_reg_pp0_iter22;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter24_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter24 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter24 <= ap_enable_reg_pp0_iter23;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter25_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter25 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter25 <= ap_enable_reg_pp0_iter24;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter26_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter26 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter26 <= ap_enable_reg_pp0_iter25;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter27_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter27 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter27 <= ap_enable_reg_pp0_iter26;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter28_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter28 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter28 <= ap_enable_reg_pp0_iter27;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter29_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter29 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter29 <= ap_enable_reg_pp0_iter28;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter3 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter3 <= ap_enable_reg_pp0_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter30_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter30 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter30 <= ap_enable_reg_pp0_iter29;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter31_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter31 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter31 <= ap_enable_reg_pp0_iter30;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter32_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter32 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter32 <= ap_enable_reg_pp0_iter31;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter33_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter33 <= ap_enable_reg_pp0_iter32;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                    ap_enable_reg_pp0_iter33 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter4 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter4 <= ap_enable_reg_pp0_iter3;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter5_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter5 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter5 <= ap_enable_reg_pp0_iter4;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter6_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter6 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter6 <= ap_enable_reg_pp0_iter5;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter7_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter7 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter7 <= ap_enable_reg_pp0_iter6;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter8_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter8 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter8 <= ap_enable_reg_pp0_iter7;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter9_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter9 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter9 <= ap_enable_reg_pp0_iter8;
                end if; 
            end if;
        end if;
    end process;


    i_reg_144_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_178_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
                i_reg_144 <= i_39_fu_183_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_144 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_217_pp0_iter26_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                beta_array_load_reg_288 <= beta_array_q0;
                gamma_array_load_reg_283 <= gamma_array_q0;
                temp_reg_278 <= grp_fu_170_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_boolean_0 = ap_block_pp0_stage0_11001)) then
                beta_array_load_reg_288_pp0_iter28_reg <= beta_array_load_reg_288;
                beta_array_load_reg_288_pp0_iter29_reg <= beta_array_load_reg_288_pp0_iter28_reg;
                exitcond_reg_217_pp0_iter10_reg <= exitcond_reg_217_pp0_iter9_reg;
                exitcond_reg_217_pp0_iter11_reg <= exitcond_reg_217_pp0_iter10_reg;
                exitcond_reg_217_pp0_iter12_reg <= exitcond_reg_217_pp0_iter11_reg;
                exitcond_reg_217_pp0_iter13_reg <= exitcond_reg_217_pp0_iter12_reg;
                exitcond_reg_217_pp0_iter14_reg <= exitcond_reg_217_pp0_iter13_reg;
                exitcond_reg_217_pp0_iter15_reg <= exitcond_reg_217_pp0_iter14_reg;
                exitcond_reg_217_pp0_iter16_reg <= exitcond_reg_217_pp0_iter15_reg;
                exitcond_reg_217_pp0_iter17_reg <= exitcond_reg_217_pp0_iter16_reg;
                exitcond_reg_217_pp0_iter18_reg <= exitcond_reg_217_pp0_iter17_reg;
                exitcond_reg_217_pp0_iter19_reg <= exitcond_reg_217_pp0_iter18_reg;
                exitcond_reg_217_pp0_iter20_reg <= exitcond_reg_217_pp0_iter19_reg;
                exitcond_reg_217_pp0_iter21_reg <= exitcond_reg_217_pp0_iter20_reg;
                exitcond_reg_217_pp0_iter22_reg <= exitcond_reg_217_pp0_iter21_reg;
                exitcond_reg_217_pp0_iter23_reg <= exitcond_reg_217_pp0_iter22_reg;
                exitcond_reg_217_pp0_iter24_reg <= exitcond_reg_217_pp0_iter23_reg;
                exitcond_reg_217_pp0_iter25_reg <= exitcond_reg_217_pp0_iter24_reg;
                exitcond_reg_217_pp0_iter26_reg <= exitcond_reg_217_pp0_iter25_reg;
                exitcond_reg_217_pp0_iter27_reg <= exitcond_reg_217_pp0_iter26_reg;
                exitcond_reg_217_pp0_iter28_reg <= exitcond_reg_217_pp0_iter27_reg;
                exitcond_reg_217_pp0_iter29_reg <= exitcond_reg_217_pp0_iter28_reg;
                exitcond_reg_217_pp0_iter2_reg <= exitcond_reg_217_pp0_iter1_reg;
                exitcond_reg_217_pp0_iter30_reg <= exitcond_reg_217_pp0_iter29_reg;
                exitcond_reg_217_pp0_iter31_reg <= exitcond_reg_217_pp0_iter30_reg;
                exitcond_reg_217_pp0_iter32_reg <= exitcond_reg_217_pp0_iter31_reg;
                exitcond_reg_217_pp0_iter3_reg <= exitcond_reg_217_pp0_iter2_reg;
                exitcond_reg_217_pp0_iter4_reg <= exitcond_reg_217_pp0_iter3_reg;
                exitcond_reg_217_pp0_iter5_reg <= exitcond_reg_217_pp0_iter4_reg;
                exitcond_reg_217_pp0_iter6_reg <= exitcond_reg_217_pp0_iter5_reg;
                exitcond_reg_217_pp0_iter7_reg <= exitcond_reg_217_pp0_iter6_reg;
                exitcond_reg_217_pp0_iter8_reg <= exitcond_reg_217_pp0_iter7_reg;
                exitcond_reg_217_pp0_iter9_reg <= exitcond_reg_217_pp0_iter8_reg;
                    i_cast_reg_210_pp0_iter10_reg(11 downto 0) <= i_cast_reg_210_pp0_iter9_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter11_reg(11 downto 0) <= i_cast_reg_210_pp0_iter10_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter12_reg(11 downto 0) <= i_cast_reg_210_pp0_iter11_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter13_reg(11 downto 0) <= i_cast_reg_210_pp0_iter12_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter14_reg(11 downto 0) <= i_cast_reg_210_pp0_iter13_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter15_reg(11 downto 0) <= i_cast_reg_210_pp0_iter14_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter16_reg(11 downto 0) <= i_cast_reg_210_pp0_iter15_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter17_reg(11 downto 0) <= i_cast_reg_210_pp0_iter16_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter18_reg(11 downto 0) <= i_cast_reg_210_pp0_iter17_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter19_reg(11 downto 0) <= i_cast_reg_210_pp0_iter18_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter20_reg(11 downto 0) <= i_cast_reg_210_pp0_iter19_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter21_reg(11 downto 0) <= i_cast_reg_210_pp0_iter20_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter22_reg(11 downto 0) <= i_cast_reg_210_pp0_iter21_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter23_reg(11 downto 0) <= i_cast_reg_210_pp0_iter22_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter24_reg(11 downto 0) <= i_cast_reg_210_pp0_iter23_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter25_reg(11 downto 0) <= i_cast_reg_210_pp0_iter24_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter26_reg(11 downto 0) <= i_cast_reg_210_pp0_iter25_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter27_reg(11 downto 0) <= i_cast_reg_210_pp0_iter26_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter28_reg(11 downto 0) <= i_cast_reg_210_pp0_iter27_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter29_reg(11 downto 0) <= i_cast_reg_210_pp0_iter28_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter2_reg(11 downto 0) <= i_cast_reg_210_pp0_iter1_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter30_reg(11 downto 0) <= i_cast_reg_210_pp0_iter29_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter31_reg(11 downto 0) <= i_cast_reg_210_pp0_iter30_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter32_reg(11 downto 0) <= i_cast_reg_210_pp0_iter31_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter3_reg(11 downto 0) <= i_cast_reg_210_pp0_iter2_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter4_reg(11 downto 0) <= i_cast_reg_210_pp0_iter3_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter5_reg(11 downto 0) <= i_cast_reg_210_pp0_iter4_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter6_reg(11 downto 0) <= i_cast_reg_210_pp0_iter5_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter7_reg(11 downto 0) <= i_cast_reg_210_pp0_iter6_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter8_reg(11 downto 0) <= i_cast_reg_210_pp0_iter7_reg(11 downto 0);
                    i_cast_reg_210_pp0_iter9_reg(11 downto 0) <= i_cast_reg_210_pp0_iter8_reg(11 downto 0);
                idx_reg_226_pp0_iter16_reg <= idx_reg_226;
                idx_reg_226_pp0_iter17_reg <= idx_reg_226_pp0_iter16_reg;
                idx_reg_226_pp0_iter18_reg <= idx_reg_226_pp0_iter17_reg;
                idx_reg_226_pp0_iter19_reg <= idx_reg_226_pp0_iter18_reg;
                idx_reg_226_pp0_iter20_reg <= idx_reg_226_pp0_iter19_reg;
                idx_reg_226_pp0_iter21_reg <= idx_reg_226_pp0_iter20_reg;
                idx_reg_226_pp0_iter22_reg <= idx_reg_226_pp0_iter21_reg;
                idx_reg_226_pp0_iter23_reg <= idx_reg_226_pp0_iter22_reg;
                idx_reg_226_pp0_iter24_reg <= idx_reg_226_pp0_iter23_reg;
                idx_reg_226_pp0_iter25_reg <= idx_reg_226_pp0_iter24_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_reg_217 <= exitcond_fu_178_p2;
                exitcond_reg_217_pp0_iter1_reg <= exitcond_reg_217;
                    i_cast_reg_210(11 downto 0) <= i_cast_fu_174_p1(11 downto 0);
                    i_cast_reg_210_pp0_iter1_reg(11 downto 0) <= i_cast_reg_210(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_217_pp0_iter14_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                idx_reg_226 <= grp_fu_189_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_217_pp0_iter18_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                stdev_array_load_reg_263 <= stdev_array_q0;
                tmp_reg_258 <= grp_fu_155_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                step_reg_205 <= inputs_shape_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_reg_217_pp0_iter28_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                tmp_s_reg_293 <= grp_fu_166_p2;
            end if;
        end if;
    end process;
    i_cast_reg_210(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter1_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter2_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter3_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter4_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter5_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter6_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter7_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter8_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter9_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter10_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter11_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter12_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter13_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter14_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter15_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter16_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter17_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter18_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter19_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter20_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter21_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter22_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter23_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter24_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter25_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter26_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter27_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter28_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter29_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter30_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter31_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    i_cast_reg_210_pp0_iter32_reg(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, exitcond_fu_178_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if ((not(((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_178_p2 = ap_const_lv1_1))) and not(((ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter33 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif ((((ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter33 = ap_const_logic_1)) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_178_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state37;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state1;
            when others =>  
                ap_NS_fsm <= "XXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(2);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state37 <= ap_CS_fsm(3);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state10_pp0_stage0_iter7 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state11_pp0_stage0_iter8 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state12_pp0_stage0_iter9 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state13_pp0_stage0_iter10 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state14_pp0_stage0_iter11 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state15_pp0_stage0_iter12 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state16_pp0_stage0_iter13 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state17_pp0_stage0_iter14 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state18_pp0_stage0_iter15 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state19_pp0_stage0_iter16 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state20_pp0_stage0_iter17 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state21_pp0_stage0_iter18 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state22_pp0_stage0_iter19 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state23_pp0_stage0_iter20 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state24_pp0_stage0_iter21 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state25_pp0_stage0_iter22 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state26_pp0_stage0_iter23 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state27_pp0_stage0_iter24 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state28_pp0_stage0_iter25 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state29_pp0_stage0_iter26 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state30_pp0_stage0_iter27 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state31_pp0_stage0_iter28 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state32_pp0_stage0_iter29 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state33_pp0_stage0_iter30 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state34_pp0_stage0_iter31 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state35_pp0_stage0_iter32 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state36_pp0_stage0_iter33 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state3_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state4_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state5_pp0_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state6_pp0_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state7_pp0_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter5 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter6 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state3_assign_proc : process(exitcond_fu_178_p2)
    begin
        if ((exitcond_fu_178_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state37)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state37) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp0_iter2, ap_enable_reg_pp0_iter3, ap_enable_reg_pp0_iter4, ap_enable_reg_pp0_iter5, ap_enable_reg_pp0_iter6, ap_enable_reg_pp0_iter7, ap_enable_reg_pp0_iter8, ap_enable_reg_pp0_iter9, ap_enable_reg_pp0_iter10, ap_enable_reg_pp0_iter11, ap_enable_reg_pp0_iter12, ap_enable_reg_pp0_iter13, ap_enable_reg_pp0_iter14, ap_enable_reg_pp0_iter15, ap_enable_reg_pp0_iter16, ap_enable_reg_pp0_iter17, ap_enable_reg_pp0_iter18, ap_enable_reg_pp0_iter19, ap_enable_reg_pp0_iter20, ap_enable_reg_pp0_iter21, ap_enable_reg_pp0_iter22, ap_enable_reg_pp0_iter23, ap_enable_reg_pp0_iter24, ap_enable_reg_pp0_iter25, ap_enable_reg_pp0_iter26, ap_enable_reg_pp0_iter27, ap_enable_reg_pp0_iter28, ap_enable_reg_pp0_iter29, ap_enable_reg_pp0_iter30, ap_enable_reg_pp0_iter31, ap_enable_reg_pp0_iter32, ap_enable_reg_pp0_iter33)
    begin
        if (((ap_enable_reg_pp0_iter33 = ap_const_logic_0) and (ap_enable_reg_pp0_iter32 = ap_const_logic_0) and (ap_enable_reg_pp0_iter31 = ap_const_logic_0) and (ap_enable_reg_pp0_iter30 = ap_const_logic_0) and (ap_enable_reg_pp0_iter29 = ap_const_logic_0) and (ap_enable_reg_pp0_iter28 = ap_const_logic_0) and (ap_enable_reg_pp0_iter27 = ap_const_logic_0) and (ap_enable_reg_pp0_iter26 = ap_const_logic_0) and (ap_enable_reg_pp0_iter25 = ap_const_logic_0) and (ap_enable_reg_pp0_iter24 = ap_const_logic_0) and (ap_enable_reg_pp0_iter23 = ap_const_logic_0) and (ap_enable_reg_pp0_iter22 = ap_const_logic_0) and (ap_enable_reg_pp0_iter21 = ap_const_logic_0) and (ap_enable_reg_pp0_iter20 = ap_const_logic_0) and (ap_enable_reg_pp0_iter19 = ap_const_logic_0) and (ap_enable_reg_pp0_iter18 = ap_const_logic_0) and (ap_enable_reg_pp0_iter17 = ap_const_logic_0) and (ap_enable_reg_pp0_iter16 = ap_const_logic_0) and (ap_enable_reg_pp0_iter15 = ap_const_logic_0) and (ap_enable_reg_pp0_iter14 = ap_const_logic_0) and (ap_enable_reg_pp0_iter13 = ap_const_logic_0) and (ap_enable_reg_pp0_iter12 = ap_const_logic_0) and (ap_enable_reg_pp0_iter11 = ap_const_logic_0) and (ap_enable_reg_pp0_iter10 = ap_const_logic_0) and (ap_enable_reg_pp0_iter9 = ap_const_logic_0) and (ap_enable_reg_pp0_iter8 = ap_const_logic_0) and (ap_enable_reg_pp0_iter7 = ap_const_logic_0) and (ap_enable_reg_pp0_iter6 = ap_const_logic_0) and (ap_enable_reg_pp0_iter5 = ap_const_logic_0) and (ap_enable_reg_pp0_iter4 = ap_const_logic_0) and (ap_enable_reg_pp0_iter3 = ap_const_logic_0) and (ap_enable_reg_pp0_iter2 = ap_const_logic_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state37)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    beta_array_address0 <= idx_reg_226_pp0_iter25_reg(12 - 1 downto 0);

    beta_array_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter26)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            beta_array_ce0 <= ap_const_logic_1;
        else 
            beta_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond_fu_178_p2 <= "1" when (i_cast_fu_174_p1 = inputs_numel_read) else "0";
    gamma_array_address0 <= idx_reg_226_pp0_iter25_reg(12 - 1 downto 0);

    gamma_array_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter26)
    begin
        if (((ap_enable_reg_pp0_iter26 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            gamma_array_ce0 <= ap_const_logic_1;
        else 
            gamma_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_189_p0 <= i_cast_fu_174_p1(12 - 1 downto 0);
    i_39_fu_183_p2 <= std_logic_vector(unsigned(i_reg_144) + unsigned(ap_const_lv12_1));
    i_cast_fu_174_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_144),64));
    inputs_array_address0 <= i_cast_reg_210_pp0_iter14_reg(12 - 1 downto 0);

    inputs_array_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            inputs_array_ce0 <= ap_const_logic_1;
        else 
            inputs_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    inputs_shape_address0 <= ap_const_lv64_0(3 - 1 downto 0);

    inputs_shape_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            inputs_shape_ce0 <= ap_const_logic_1;
        else 
            inputs_shape_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    mean_array_address0 <= grp_fu_189_p2(12 - 1 downto 0);

    mean_array_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter15)
    begin
        if (((ap_enable_reg_pp0_iter15 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            mean_array_ce0 <= ap_const_logic_1;
        else 
            mean_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outputs_array_address0 <= i_cast_reg_210_pp0_iter32_reg(12 - 1 downto 0);

    outputs_array_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter33)
    begin
        if (((ap_enable_reg_pp0_iter33 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            outputs_array_ce0 <= ap_const_logic_1;
        else 
            outputs_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    outputs_array_d0 <= grp_fu_161_p2;

    outputs_array_we0_assign_proc : process(ap_block_pp0_stage0_11001, exitcond_reg_217_pp0_iter32_reg, ap_enable_reg_pp0_iter33)
    begin
        if (((ap_enable_reg_pp0_iter33 = ap_const_logic_1) and (exitcond_reg_217_pp0_iter32_reg = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            outputs_array_we0 <= ap_const_logic_1;
        else 
            outputs_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    stdev_array_address0 <= idx_reg_226_pp0_iter17_reg(12 - 1 downto 0);

    stdev_array_ce0_assign_proc : process(ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter18)
    begin
        if (((ap_enable_reg_pp0_iter18 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            stdev_array_ce0 <= ap_const_logic_1;
        else 
            stdev_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
