-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity face_classifier_cHfu_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of face_classifier_cHfu_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111001000100011110001001111010", 
    1 => "10111010010100101001011001011110", 
    2 => "10111011101010001011100100100101", 
    3 => "00111011111010000101110111000101", 
    4 => "10111011100011010101101000110101", 
    5 => "00111011100000101011100110110100", 
    6 => "10111011111011011010001000001000", 
    7 => "00111100011101101011010101010111", 
    8 => "10111001110000110101101000101101", 
    9 => "10111011011101111111010001111000", 
    10 => "00111011101111100110000000101110", 
    11 => "10111011011000000111011101111100", 
    12 => "10111011011000000110010000110110", 
    13 => "10111011110110001001000110101101", 
    14 => "10111001110001111010000100001001", 
    15 => "00111100100011011110110011010011", 
    16 => "00111011100100001001011101001011", 
    17 => "10111100000000011100011100000100", 
    18 => "10111010000001010000111111010011", 
    19 => "10111011110101001000000001101110", 
    20 => "00111011101000010010101111100000", 
    21 => "10111011101101111100111110110111", 
    22 => "10111100100000100000111010001101", 
    23 => "00111011111101000110000100101100", 
    24 => "00111100010011101001100000100111", 
    25 => "10111011000011000111111000101011", 
    26 => "10111011111011111101010111000100", 
    27 => "00111011110101000011000000011110", 
    28 => "00111100001011110100111010011000", 
    29 => "10111100011101110110001001110111", 
    30 => "10111001101011101111000110101010", 
    31 => "00111011010101111110111011100110", 
    32 => "00111011000010000001101010011000", 
    33 => "00111100011001011011001011001001", 
    34 => "10111011110111101110001110001111", 
    35 => "00111100000100101001000110100010", 
    36 => "10111011100111001000101111010100", 
    37 => "00111010100100010000001001011100", 
    38 => "10111100100000010011101011000110", 
    39 => "10111100100010010110001011111000", 
    40 => "10111010101000110010100101000000", 
    41 => "10111100011011101011011100111110", 
    42 => "10111011100000110011110110011100", 
    43 => "10111011100000111111001001100110", 
    44 => "10111011010011000111101011000011", 
    45 => "10111100101111100001010110001100", 
    46 => "00111000010110010010111010111000", 
    47 => "00111001001110000101100101100100", 
    48 => "10111010100101100110010001011011", 
    49 => "00111010101011000001100101000010", 
    50 => "10111011000000001110010010101100", 
    51 => "00111000011111001110101101011100", 
    52 => "10111011110110110110100111011001", 
    53 => "00111011000111110010011011000101", 
    54 => "00111011010100001101111010101111", 
    55 => "10111011110000001110100000100010", 
    56 => "10111100011010000111010000001110", 
    57 => "10111011010111011001010101111100", 
    58 => "00111100000111001100010100101110", 
    59 => "00111100001000000010000101101111", 
    60 => "00111100100100100000110010100100", 
    61 => "10111010110010011011000001100001", 
    62 => "10111100110000110100110100010111", 
    63 => "10111100001000011011100100010001", 
    64 => "00111010000100110011100000101000", 
    65 => "00111011100000110111111010111100", 
    66 => "00111010101111110101000010111010", 
    67 => "00111011111010000101101111101010", 
    68 => "10111010011110110100011000111100", 
    69 => "00111011010011110010010011010111", 
    70 => "00111010101101011011111100110010", 
    71 => "00111011100001010011001100110110", 
    72 => "00111100100000111101100111101000", 
    73 => "10111000110110000100100100111000", 
    74 => "10111011000100111110011100011110", 
    75 => "10111011110001011011011000110001", 
    76 => "10111011011110011000100110111000", 
    77 => "10111100000000100111011000100011", 
    78 => "10111011101101100000111111101000", 
    79 => "10111011010010101110001011010100", 
    80 => "10111011100101000011111000000101", 
    81 => "00111100000010010001101000001100", 
    82 => "00111011001011111011011010111101", 
    83 => "10111010001000111101110000010111", 
    84 => "10111100100010000111000010000011", 
    85 => "00111011100101010001001000010011", 
    86 => "10111001011100011010000110000111", 
    87 => "10111011110101111001101111010001", 
    88 => "00111011101100101001010100001000", 
    89 => "10111011011000101111110000010111", 
    90 => "10111011111101111100110100010010", 
    91 => "10111011101000001001101000110001", 
    92 => "10111011011111000100111110100000", 
    93 => "10111010001101001110111010010101", 
    94 => "00111011011000111101111001001011", 
    95 => "10111100000110010010010010001010", 
    96 => "10111100000001001101101010000000", 
    97 => "00111100010010000111011101110100", 
    98 => "10111011011100101010101100101111", 
    99 => "00111011000111010010001100001100" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity face_classifier_cHfu is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of face_classifier_cHfu is
    component face_classifier_cHfu_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    face_classifier_cHfu_rom_U :  component face_classifier_cHfu_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


