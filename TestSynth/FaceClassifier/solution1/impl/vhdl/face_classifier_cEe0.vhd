-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity face_classifier_cEe0_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of face_classifier_cEe0_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "01000000011111111001001101011001", 
    1 => "01000000100000100110001101000000", 
    2 => "01000000100100010001111110100010", 
    3 => "01000000101011101110010110101110", 
    4 => "01000000110000001000010001100000", 
    5 => "01000000100000101100010111101110", 
    6 => "01000000011101010000000000110011", 
    7 => "01000000101000000110010101100111", 
    8 => "01000000100010001001000010000000", 
    9 => "01000000101101101011011001111111", 
    10 => "01000000100001100110110101100010", 
    11 => "01000000100111000110011010101100", 
    12 => "01000000100011000101111100001010", 
    13 => "01000000100101001010111011000110", 
    14 => "01000000100001000001100010010111", 
    15 => "01000000100000010110000011101000", 
    16 => "01000000100010011001001100000101", 
    17 => "01000000100001100011011011000010", 
    18 => "01000000100011001011100101010000", 
    19 => "01000000100110001100011110101011", 
    20 => "01000000100101011010001111101110", 
    21 => "01000000100110001000101110010100", 
    22 => "01000000101011110111110100100110", 
    23 => "01000000101101011110000110010011", 
    24 => "01000000100010000001101101010001", 
    25 => "01000000100100100010100010110110", 
    26 => "01000000100011001111110101101000", 
    27 => "01000000100011101110001000110100", 
    28 => "01000000100010001000111010011110", 
    29 => "01000000100100011110001011110101", 
    30 => "01000000011000101011010101100010", 
    31 => "01000000100001011000011000010000", 
    32 => "01000000100111101100100100110000", 
    33 => "01000000011010101111011010110111", 
    34 => "01000000101000100010110110010101", 
    35 => "01000000110101111110111100010111", 
    36 => "01000000100000110110011011010100", 
    37 => "01000000011110001101000101100001", 
    38 => "01000000100100111010011101011000", 
    39 => "01000000110010010111101110000100", 
    40 => "01000000100011001100000001110100", 
    41 => "01000000100101001101100101011110", 
    42 => "01000000100111011001011101000001", 
    43 => "01000000100011000100110100011110", 
    44 => "01000000101000111011111010111111", 
    45 => "01000000011101111111101001001010", 
    46 => "01000000011101000111111111010101", 
    47 => "01000000100010000110111011100000", 
    48 => "01000000100101111101001001010010", 
    49 => "01000000100110100001001001100000", 
    50 => "01000000011001100101100010011001", 
    51 => "01000000111000110110111101000101", 
    52 => "01000000101011000110101011110101", 
    53 => "01000000100000100101001101110110", 
    54 => "01000000011101111011111101110011", 
    55 => "01000000100101101010010000011100", 
    56 => "01000000100110000110011000011100", 
    57 => "01000000100101101010001001111000", 
    58 => "01000000100111000000110000100110", 
    59 => "01000000100100110110110011110100", 
    60 => "01000000101001101100110010111010", 
    61 => "01000000100100110110101101011100", 
    62 => "01000000100101010111010001111100", 
    63 => "01000000100010010000011111011010", 
    64 => "01000000100001111000011011110100", 
    65 => "01000000101101101000001110111100", 
    66 => "01000000110010101110010001011111", 
    67 => "01000000101010011000000011000000", 
    68 => "01000000100000101110001000010011", 
    69 => "01000000100001000101011011001011", 
    70 => "01000000011111001110110011100001", 
    71 => "01000000100100101100001011001110", 
    72 => "01000000100111001001010011011010", 
    73 => "01000000011110000111000010101010", 
    74 => "01000000011111001100011000110011", 
    75 => "01000000100001000001011101110010", 
    76 => "01000000100011111100001010110111", 
    77 => "01000000100000111011101100000001", 
    78 => "01000000011011000001000100001100", 
    79 => "01000000100100110000100110011111", 
    80 => "01000000100001110110001010101000", 
    81 => "01000000011101100111101110010100", 
    82 => "01000000011101110101001111011110", 
    83 => "01000000100000011111000000001011", 
    84 => "01000000100110100000101010010001", 
    85 => "01000000100000110100001100000011", 
    86 => "01000000010101110011101110111000", 
    87 => "01000000100011001010010011011000", 
    88 => "01000000100110010100100001001000", 
    89 => "01000000100101000111100110010010", 
    90 => "01000000100101100000111001100101", 
    91 => "01000000010101100010101111000000", 
    92 => "01000000100000000101010111101110", 
    93 => "01000000100010001011110101001010", 
    94 => "01000000100000010000001001010101", 
    95 => "01000000011010100000011001101010", 
    96 => "01000000100101011011110111110100", 
    97 => "01000000100000011001101110001111", 
    98 => "01000000100001100000110010010001", 
    99 => "01000000011010110010110110010110" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity face_classifier_cEe0 is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of face_classifier_cEe0 is
    component face_classifier_cEe0_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    face_classifier_cEe0_rom_U :  component face_classifier_cEe0_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


