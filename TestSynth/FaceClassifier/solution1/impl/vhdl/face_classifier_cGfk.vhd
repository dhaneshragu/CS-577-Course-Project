-- ==============================================================
-- File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ==============================================================

library ieee; 
use ieee.std_logic_1164.all; 
use ieee.std_logic_unsigned.all;

entity face_classifier_cGfk_rom is 
    generic(
             DWIDTH     : integer := 32; 
             AWIDTH     : integer := 7; 
             MEM_SIZE    : integer := 100
    ); 
    port (
          addr0      : in std_logic_vector(AWIDTH-1 downto 0); 
          ce0       : in std_logic; 
          q0         : out std_logic_vector(DWIDTH-1 downto 0);
          clk       : in std_logic
    ); 
end entity; 


architecture rtl of face_classifier_cGfk_rom is 

signal addr0_tmp : std_logic_vector(AWIDTH-1 downto 0); 
type mem_array is array (0 to MEM_SIZE-1) of std_logic_vector (DWIDTH-1 downto 0); 
signal mem : mem_array := (
    0 => "00111111100000000000110111001111", 
    1 => "00111111011110111011000010000010", 
    2 => "00111111100000011000110101000100", 
    3 => "00111111100000001000011110111101", 
    4 => "00111111011111110011001101110001", 
    5 => "00111111100000010000110100100110", 
    6 => "00111111011111101011010111011011", 
    7 => "00111111100000000011001000010000", 
    8 => "00111111100001000110110001100001", 
    9 => "00111111011111101001110000110111", 
    10 => "00111111100000010111100110111101", 
    11 => "00111111100000101010100000111011", 
    12 => "00111111011111100000000110110010", 
    13 => "00111111011111111000001001110101", 
    14 => "00111111100000010110101110001010", 
    15 => "00111111100000010111101101010011", 
    16 => "00111111100001010011011011001101", 
    17 => "00111111011111111100000110110111", 
    18 => "00111111011111011111001011000000", 
    19 => "00111111100000000100010110101000", 
    20 => "00111111011111111100111100110001", 
    21 => "00111111100000000011010000100101", 
    22 => "00111111100000000100001010110101", 
    23 => "00111111100000010011100010100110", 
    24 => "00111111100000010111100110100011", 
    25 => "00111111100000100111000001110110", 
    26 => "00111111011110100000011010101111", 
    27 => "00111111100000000110011110100011", 
    28 => "00111111100000011100001111100111", 
    29 => "00111111011111100111110101101011", 
    30 => "00111111100000110110000110101101", 
    31 => "00111111100000001101110010111100", 
    32 => "00111111100000000001100001100010", 
    33 => "00111111100000000100001111011010", 
    34 => "00111111100000001001101100001010", 
    35 => "00111111011110100100101011000100", 
    36 => "00111111011110010011010011111000", 
    37 => "00111111011101110101010010001000", 
    38 => "00111111100000000111111011010101", 
    39 => "00111111011111100101000111110001", 
    40 => "00111111100000001100111111001011", 
    41 => "00111111100000010110010111000110", 
    42 => "00111111100000010100110111011110", 
    43 => "00111111011111111110100111110011", 
    44 => "00111111100000100111101010110111", 
    45 => "00111111100000111110111110001010", 
    46 => "00111111100000000100100001111011", 
    47 => "00111111100000011110001100111100", 
    48 => "00111111011110110111000101010111", 
    49 => "00111111100000001010011001011011", 
    50 => "00111111100000010110111101000010", 
    51 => "00111111100000000001000011011000", 
    52 => "00111111011110001100101110000001", 
    53 => "00111111011111100110011001010001", 
    54 => "00111111011111111101111111001100", 
    55 => "00111111100000101101111000001101", 
    56 => "00111111100000010110011110010010", 
    57 => "00111111011111110000000000100110", 
    58 => "00111111100000011101000110010011", 
    59 => "00111111011111010100000011100010", 
    60 => "00111111011111011011010001000101", 
    61 => "00111111100000010100011001010000", 
    62 => "00111111011111100110111001101101", 
    63 => "00111111011111110001010110000101", 
    64 => "00111111100000101101010110101011", 
    65 => "00111111011111110011000001000100", 
    66 => "00111111100000000011011101011111", 
    67 => "00111111100000001000100110111110", 
    68 => "00111111011111101100110000010011", 
    69 => "00111111011111101100011101101010", 
    70 => "00111111100000000110001101111010", 
    71 => "00111111100000010100110101101010", 
    72 => "00111111100000001001010100100111", 
    73 => "00111111100000100010100101010000", 
    74 => "00111111100000000001001010010101", 
    75 => "00111111100000010010100100011111", 
    76 => "00111111011111001011100101000111", 
    77 => "00111111100000000111011010110011", 
    78 => "00111111100000010110001100101010", 
    79 => "00111111100000010000000100100001", 
    80 => "00111111100000011010100001010101", 
    81 => "00111111100000000100110110111011", 
    82 => "00111111100000000011110011100100", 
    83 => "00111111011111111010110000011111", 
    84 => "00111111100000111100110010000010", 
    85 => "00111111100000110100010110111011", 
    86 => "00111111011110100000010001110011", 
    87 => "00111111011111111100100110011100", 
    88 => "00111111011111111001001111100100", 
    89 => "00111111100000011010111001111101", 
    90 => "00111111100000000101101101100101", 
    91 => "00111111011111111110100000100111", 
    92 => "00111111100001001011000001011110", 
    93 => "00111111011110100110011110001100", 
    94 => "00111111011110100101010110101010", 
    95 => "00111111100000101111010101111100", 
    96 => "00111111011111001101010001000100", 
    97 => "00111111100000000000101011001100", 
    98 => "00111111100000001100100101011011", 
    99 => "00111111011111100111010000010101" );


begin 


memory_access_guard_0: process (addr0) 
begin
      addr0_tmp <= addr0;
--synthesis translate_off
      if (CONV_INTEGER(addr0) > mem_size-1) then
           addr0_tmp <= (others => '0');
      else 
           addr0_tmp <= addr0;
      end if;
--synthesis translate_on
end process;

p_rom_access: process (clk)  
begin 
    if (clk'event and clk = '1') then
        if (ce0 = '1') then 
            q0 <= mem(CONV_INTEGER(addr0_tmp)); 
        end if;
    end if;
end process;

end rtl;


Library IEEE;
use IEEE.std_logic_1164.all;

entity face_classifier_cGfk is
    generic (
        DataWidth : INTEGER := 32;
        AddressRange : INTEGER := 100;
        AddressWidth : INTEGER := 7);
    port (
        reset : IN STD_LOGIC;
        clk : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR(AddressWidth - 1 DOWNTO 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR(DataWidth - 1 DOWNTO 0));
end entity;

architecture arch of face_classifier_cGfk is
    component face_classifier_cGfk_rom is
        port (
            clk : IN STD_LOGIC;
            addr0 : IN STD_LOGIC_VECTOR;
            ce0 : IN STD_LOGIC;
            q0 : OUT STD_LOGIC_VECTOR);
    end component;



begin
    face_classifier_cGfk_rom_U :  component face_classifier_cGfk_rom
    port map (
        clk => clk,
        addr0 => address0,
        ce0 => ce0,
        q0 => q0);

end architecture;


