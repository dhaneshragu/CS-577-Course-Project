-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity face_classifier_c is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    dense_input_input_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    dense_input_input_array_ce0 : OUT STD_LOGIC;
    dense_input_input_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    dense_input_input_ndim : IN STD_LOGIC_VECTOR (63 downto 0);
    dense_input_input_numel : IN STD_LOGIC_VECTOR (63 downto 0);
    dense_input_input_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    dense_input_input_shape_ce0 : OUT STD_LOGIC;
    dense_input_input_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    activation_3_output_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    activation_3_output_array_ce0 : OUT STD_LOGIC;
    activation_3_output_array_we0 : OUT STD_LOGIC;
    activation_3_output_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    activation_3_output_ndim : OUT STD_LOGIC_VECTOR (63 downto 0);
    activation_3_output_ndim_ap_vld : OUT STD_LOGIC;
    activation_3_output_numel : OUT STD_LOGIC_VECTOR (63 downto 0);
    activation_3_output_numel_ap_vld : OUT STD_LOGIC;
    activation_3_output_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    activation_3_output_shape_ce0 : OUT STD_LOGIC;
    activation_3_output_shape_we0 : OUT STD_LOGIC;
    activation_3_output_shape_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
    activation_3_output_shape_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    activation_3_output_shape_ce1 : OUT STD_LOGIC;
    activation_3_output_shape_we1 : OUT STD_LOGIC;
    activation_3_output_shape_d1 : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of face_classifier_c is 
    attribute CORE_GENERATION_INFO : STRING;
    attribute CORE_GENERATION_INFO of behav : architecture is
    "face_classifier_c,hls_ip_2018_2,{HLS_INPUT_TYPE=c,HLS_INPUT_FLOAT=0,HLS_INPUT_FIXED=0,HLS_INPUT_PART=xcvu190-flgb2104-1-i,HLS_INPUT_CLOCK=10.000000,HLS_INPUT_ARCH=others,HLS_SYN_CLOCK=9.033400,HLS_SYN_LAT=-1,HLS_SYN_TPT=none,HLS_SYN_MEM=1584,HLS_SYN_DSP=202,HLS_SYN_FF=79305,HLS_SYN_LUT=73683,HLS_VERSION=2018_2}";
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state73 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state74 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state76 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state77 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state79 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state80 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state82 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state83 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state84 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state86 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state87 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state88 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state92 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state93 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state94 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state105 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state106 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state107 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state108 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state109 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state110 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state111 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state112 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state114 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state115 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state116 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state117 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state118 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state119 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state120 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state121 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state122 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state123 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state124 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state125 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state126 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state127 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state128 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state129 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state130 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state131 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state132 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state133 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state134 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state135 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state136 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state137 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state138 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state139 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state140 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state141 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state142 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state143 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state144 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state145 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state146 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state147 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state148 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state149 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state150 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state151 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state152 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state153 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state154 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state155 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state156 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state157 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state158 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state159 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state160 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state161 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state162 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state165 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage1 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage2 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage3 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state185 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state186 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state187 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state188 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state189 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state190 : STD_LOGIC_VECTOR (185 downto 0) := "000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state191 : STD_LOGIC_VECTOR (185 downto 0) := "000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state192 : STD_LOGIC_VECTOR (185 downto 0) := "000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state193 : STD_LOGIC_VECTOR (185 downto 0) := "000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state194 : STD_LOGIC_VECTOR (185 downto 0) := "000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state195 : STD_LOGIC_VECTOR (185 downto 0) := "000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state196 : STD_LOGIC_VECTOR (185 downto 0) := "000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state197 : STD_LOGIC_VECTOR (185 downto 0) := "000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state198 : STD_LOGIC_VECTOR (185 downto 0) := "000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state199 : STD_LOGIC_VECTOR (185 downto 0) := "000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state200 : STD_LOGIC_VECTOR (185 downto 0) := "001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state201 : STD_LOGIC_VECTOR (185 downto 0) := "010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state202 : STD_LOGIC_VECTOR (185 downto 0) := "100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_90 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010000";
    constant ap_const_lv32_93 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010011";
    constant ap_const_lv32_9D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011101";
    constant ap_const_lv32_B7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110111";
    constant ap_const_lv32_A1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100001";
    constant ap_const_lv32_A5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100101";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_B1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110001";
    constant ap_const_lv32_B4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110100";
    constant ap_const_lv32_B5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110101";
    constant ap_const_lv32_B6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110110";
    constant ap_const_lv32_31 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110001";
    constant ap_const_lv32_32 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110010";
    constant ap_const_lv32_34 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110100";
    constant ap_const_lv32_66 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100110";
    constant ap_const_lv32_84 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000100";
    constant ap_const_lv32_86 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000110";
    constant ap_const_lv32_87 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000111";
    constant ap_const_lv32_88 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001000";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_89 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001001";
    constant ap_const_lv32_8C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001100";
    constant ap_const_lv32_94 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010100";
    constant ap_const_lv32_95 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010101";
    constant ap_const_lv32_96 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010110";
    constant ap_const_lv32_99 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011001";
    constant ap_const_lv32_A2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100010";
    constant ap_const_lv32_A4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100100";
    constant ap_const_lv32_A6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100110";
    constant ap_const_lv32_B2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110010";
    constant ap_const_lv32_B3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110011";
    constant ap_const_lv32_B8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111000";
    constant ap_const_lv32_A3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100011";
    constant ap_const_lv32_A7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100111";
    constant ap_const_lv32_33 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110011";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv11_0 : STD_LOGIC_VECTOR (10 downto 0) := "00000000000";
    constant ap_const_lv32_65 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100101";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_83 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000011";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv32_8B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001011";
    constant ap_const_lv32_8D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001101";
    constant ap_const_lv32_91 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010001";
    constant ap_const_lv32_8F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001111";
    constant ap_const_lv32_98 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011000";
    constant ap_const_lv32_9A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011010";
    constant ap_const_lv32_9E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011110";
    constant ap_const_lv32_9C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011100";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_B9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010111001";
    constant ap_const_lv32_9F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011111";
    constant ap_const_lv32_85 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000101";
    constant ap_const_lv32_92 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010010";
    constant ap_const_lv32_8A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001010";
    constant ap_const_lv32_97 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010010111";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_4 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100";
    constant ap_const_lv64_64 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000001100100";
    constant ap_const_lv64_A : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000001010";
    constant ap_const_lv64_6 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000110";
    constant ap_const_lv64_3C : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000111100";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv12_2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_const_lv12_3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000011";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv12_4 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_const_lv12_5 : STD_LOGIC_VECTOR (11 downto 0) := "000000000101";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv12_6 : STD_LOGIC_VECTOR (11 downto 0) := "000000000110";
    constant ap_const_lv12_7 : STD_LOGIC_VECTOR (11 downto 0) := "000000000111";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv12_8 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_const_lv12_9 : STD_LOGIC_VECTOR (11 downto 0) := "000000001001";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv12_A : STD_LOGIC_VECTOR (11 downto 0) := "000000001010";
    constant ap_const_lv12_B : STD_LOGIC_VECTOR (11 downto 0) := "000000001011";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv12_C : STD_LOGIC_VECTOR (11 downto 0) := "000000001100";
    constant ap_const_lv12_D : STD_LOGIC_VECTOR (11 downto 0) := "000000001101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv12_E : STD_LOGIC_VECTOR (11 downto 0) := "000000001110";
    constant ap_const_lv12_F : STD_LOGIC_VECTOR (11 downto 0) := "000000001111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv12_10 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_const_lv12_11 : STD_LOGIC_VECTOR (11 downto 0) := "000000010001";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv12_12 : STD_LOGIC_VECTOR (11 downto 0) := "000000010010";
    constant ap_const_lv12_13 : STD_LOGIC_VECTOR (11 downto 0) := "000000010011";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv12_14 : STD_LOGIC_VECTOR (11 downto 0) := "000000010100";
    constant ap_const_lv12_15 : STD_LOGIC_VECTOR (11 downto 0) := "000000010101";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv12_16 : STD_LOGIC_VECTOR (11 downto 0) := "000000010110";
    constant ap_const_lv12_17 : STD_LOGIC_VECTOR (11 downto 0) := "000000010111";
    constant ap_const_lv32_C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001100";
    constant ap_const_lv12_18 : STD_LOGIC_VECTOR (11 downto 0) := "000000011000";
    constant ap_const_lv12_19 : STD_LOGIC_VECTOR (11 downto 0) := "000000011001";
    constant ap_const_lv32_D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001101";
    constant ap_const_lv12_1A : STD_LOGIC_VECTOR (11 downto 0) := "000000011010";
    constant ap_const_lv12_1B : STD_LOGIC_VECTOR (11 downto 0) := "000000011011";
    constant ap_const_lv32_E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001110";
    constant ap_const_lv12_1C : STD_LOGIC_VECTOR (11 downto 0) := "000000011100";
    constant ap_const_lv12_1D : STD_LOGIC_VECTOR (11 downto 0) := "000000011101";
    constant ap_const_lv32_F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001111";
    constant ap_const_lv12_1E : STD_LOGIC_VECTOR (11 downto 0) := "000000011110";
    constant ap_const_lv12_1F : STD_LOGIC_VECTOR (11 downto 0) := "000000011111";
    constant ap_const_lv32_10 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010000";
    constant ap_const_lv12_20 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_const_lv12_21 : STD_LOGIC_VECTOR (11 downto 0) := "000000100001";
    constant ap_const_lv32_11 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010001";
    constant ap_const_lv12_22 : STD_LOGIC_VECTOR (11 downto 0) := "000000100010";
    constant ap_const_lv12_23 : STD_LOGIC_VECTOR (11 downto 0) := "000000100011";
    constant ap_const_lv32_12 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010010";
    constant ap_const_lv12_24 : STD_LOGIC_VECTOR (11 downto 0) := "000000100100";
    constant ap_const_lv12_25 : STD_LOGIC_VECTOR (11 downto 0) := "000000100101";
    constant ap_const_lv32_13 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010011";
    constant ap_const_lv12_26 : STD_LOGIC_VECTOR (11 downto 0) := "000000100110";
    constant ap_const_lv12_27 : STD_LOGIC_VECTOR (11 downto 0) := "000000100111";
    constant ap_const_lv32_14 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010100";
    constant ap_const_lv12_28 : STD_LOGIC_VECTOR (11 downto 0) := "000000101000";
    constant ap_const_lv12_29 : STD_LOGIC_VECTOR (11 downto 0) := "000000101001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_lv12_2A : STD_LOGIC_VECTOR (11 downto 0) := "000000101010";
    constant ap_const_lv12_2B : STD_LOGIC_VECTOR (11 downto 0) := "000000101011";
    constant ap_const_lv32_16 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010110";
    constant ap_const_lv12_2C : STD_LOGIC_VECTOR (11 downto 0) := "000000101100";
    constant ap_const_lv12_2D : STD_LOGIC_VECTOR (11 downto 0) := "000000101101";
    constant ap_const_lv32_17 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010111";
    constant ap_const_lv12_2E : STD_LOGIC_VECTOR (11 downto 0) := "000000101110";
    constant ap_const_lv12_2F : STD_LOGIC_VECTOR (11 downto 0) := "000000101111";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_lv12_30 : STD_LOGIC_VECTOR (11 downto 0) := "000000110000";
    constant ap_const_lv12_31 : STD_LOGIC_VECTOR (11 downto 0) := "000000110001";
    constant ap_const_lv32_19 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011001";
    constant ap_const_lv12_32 : STD_LOGIC_VECTOR (11 downto 0) := "000000110010";
    constant ap_const_lv12_33 : STD_LOGIC_VECTOR (11 downto 0) := "000000110011";
    constant ap_const_lv32_1A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011010";
    constant ap_const_lv12_34 : STD_LOGIC_VECTOR (11 downto 0) := "000000110100";
    constant ap_const_lv12_35 : STD_LOGIC_VECTOR (11 downto 0) := "000000110101";
    constant ap_const_lv32_1B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011011";
    constant ap_const_lv12_36 : STD_LOGIC_VECTOR (11 downto 0) := "000000110110";
    constant ap_const_lv12_37 : STD_LOGIC_VECTOR (11 downto 0) := "000000110111";
    constant ap_const_lv32_1C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011100";
    constant ap_const_lv12_38 : STD_LOGIC_VECTOR (11 downto 0) := "000000111000";
    constant ap_const_lv12_39 : STD_LOGIC_VECTOR (11 downto 0) := "000000111001";
    constant ap_const_lv32_1D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011101";
    constant ap_const_lv12_3A : STD_LOGIC_VECTOR (11 downto 0) := "000000111010";
    constant ap_const_lv12_3B : STD_LOGIC_VECTOR (11 downto 0) := "000000111011";
    constant ap_const_lv32_1E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011110";
    constant ap_const_lv12_3C : STD_LOGIC_VECTOR (11 downto 0) := "000000111100";
    constant ap_const_lv12_3D : STD_LOGIC_VECTOR (11 downto 0) := "000000111101";
    constant ap_const_lv32_1F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011111";
    constant ap_const_lv12_3E : STD_LOGIC_VECTOR (11 downto 0) := "000000111110";
    constant ap_const_lv12_3F : STD_LOGIC_VECTOR (11 downto 0) := "000000111111";
    constant ap_const_lv32_20 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100000";
    constant ap_const_lv12_40 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_const_lv12_41 : STD_LOGIC_VECTOR (11 downto 0) := "000001000001";
    constant ap_const_lv32_21 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100001";
    constant ap_const_lv12_42 : STD_LOGIC_VECTOR (11 downto 0) := "000001000010";
    constant ap_const_lv12_43 : STD_LOGIC_VECTOR (11 downto 0) := "000001000011";
    constant ap_const_lv32_22 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100010";
    constant ap_const_lv12_44 : STD_LOGIC_VECTOR (11 downto 0) := "000001000100";
    constant ap_const_lv12_45 : STD_LOGIC_VECTOR (11 downto 0) := "000001000101";
    constant ap_const_lv32_23 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100011";
    constant ap_const_lv12_46 : STD_LOGIC_VECTOR (11 downto 0) := "000001000110";
    constant ap_const_lv12_47 : STD_LOGIC_VECTOR (11 downto 0) := "000001000111";
    constant ap_const_lv32_24 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100100";
    constant ap_const_lv12_48 : STD_LOGIC_VECTOR (11 downto 0) := "000001001000";
    constant ap_const_lv12_49 : STD_LOGIC_VECTOR (11 downto 0) := "000001001001";
    constant ap_const_lv32_25 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100101";
    constant ap_const_lv12_4A : STD_LOGIC_VECTOR (11 downto 0) := "000001001010";
    constant ap_const_lv12_4B : STD_LOGIC_VECTOR (11 downto 0) := "000001001011";
    constant ap_const_lv32_26 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100110";
    constant ap_const_lv12_4C : STD_LOGIC_VECTOR (11 downto 0) := "000001001100";
    constant ap_const_lv12_4D : STD_LOGIC_VECTOR (11 downto 0) := "000001001101";
    constant ap_const_lv32_27 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000100111";
    constant ap_const_lv12_4E : STD_LOGIC_VECTOR (11 downto 0) := "000001001110";
    constant ap_const_lv12_4F : STD_LOGIC_VECTOR (11 downto 0) := "000001001111";
    constant ap_const_lv32_28 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101000";
    constant ap_const_lv12_50 : STD_LOGIC_VECTOR (11 downto 0) := "000001010000";
    constant ap_const_lv12_51 : STD_LOGIC_VECTOR (11 downto 0) := "000001010001";
    constant ap_const_lv32_29 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101001";
    constant ap_const_lv12_52 : STD_LOGIC_VECTOR (11 downto 0) := "000001010010";
    constant ap_const_lv12_53 : STD_LOGIC_VECTOR (11 downto 0) := "000001010011";
    constant ap_const_lv32_2A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101010";
    constant ap_const_lv12_54 : STD_LOGIC_VECTOR (11 downto 0) := "000001010100";
    constant ap_const_lv12_55 : STD_LOGIC_VECTOR (11 downto 0) := "000001010101";
    constant ap_const_lv32_2B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101011";
    constant ap_const_lv12_56 : STD_LOGIC_VECTOR (11 downto 0) := "000001010110";
    constant ap_const_lv12_57 : STD_LOGIC_VECTOR (11 downto 0) := "000001010111";
    constant ap_const_lv32_2C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101100";
    constant ap_const_lv12_58 : STD_LOGIC_VECTOR (11 downto 0) := "000001011000";
    constant ap_const_lv12_59 : STD_LOGIC_VECTOR (11 downto 0) := "000001011001";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv12_5A : STD_LOGIC_VECTOR (11 downto 0) := "000001011010";
    constant ap_const_lv12_5B : STD_LOGIC_VECTOR (11 downto 0) := "000001011011";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv12_5C : STD_LOGIC_VECTOR (11 downto 0) := "000001011100";
    constant ap_const_lv12_5D : STD_LOGIC_VECTOR (11 downto 0) := "000001011101";
    constant ap_const_lv32_2F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101111";
    constant ap_const_lv12_5E : STD_LOGIC_VECTOR (11 downto 0) := "000001011110";
    constant ap_const_lv12_5F : STD_LOGIC_VECTOR (11 downto 0) := "000001011111";
    constant ap_const_lv32_30 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110000";
    constant ap_const_lv12_60 : STD_LOGIC_VECTOR (11 downto 0) := "000001100000";
    constant ap_const_lv12_61 : STD_LOGIC_VECTOR (11 downto 0) := "000001100001";
    constant ap_const_lv12_62 : STD_LOGIC_VECTOR (11 downto 0) := "000001100010";
    constant ap_const_lv12_63 : STD_LOGIC_VECTOR (11 downto 0) := "000001100011";
    constant ap_const_lv3_2 : STD_LOGIC_VECTOR (2 downto 0) := "010";
    constant ap_const_lv3_3 : STD_LOGIC_VECTOR (2 downto 0) := "011";
    constant ap_const_lv3_4 : STD_LOGIC_VECTOR (2 downto 0) := "100";
    constant ap_const_lv32_35 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110101";
    constant ap_const_lv32_36 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110110";
    constant ap_const_lv32_37 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000110111";
    constant ap_const_lv32_38 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111000";
    constant ap_const_lv32_39 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111001";
    constant ap_const_lv32_3A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111010";
    constant ap_const_lv32_3B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111011";
    constant ap_const_lv32_3C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111100";
    constant ap_const_lv32_3D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111101";
    constant ap_const_lv32_3E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111110";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv32_40 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000000";
    constant ap_const_lv32_41 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000001";
    constant ap_const_lv32_42 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000010";
    constant ap_const_lv32_43 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000011";
    constant ap_const_lv32_44 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000100";
    constant ap_const_lv32_45 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000101";
    constant ap_const_lv32_46 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_64 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100100";
    constant ap_const_lv32_B84A34AE : STD_LOGIC_VECTOR (31 downto 0) := "10111000010010100011010010101110";
    constant ap_const_lv32_3832CB7D : STD_LOGIC_VECTOR (31 downto 0) := "00111000001100101100101101111101";
    constant ap_const_lv32_38F434D2 : STD_LOGIC_VECTOR (31 downto 0) := "00111000111101000011010011010010";
    constant ap_const_lv32_398A9330 : STD_LOGIC_VECTOR (31 downto 0) := "00111001100010101001001100110000";
    constant ap_const_lv32_B8EE38A9 : STD_LOGIC_VECTOR (31 downto 0) := "10111000111011100011100010101001";
    constant ap_const_lv32_B91AEC55 : STD_LOGIC_VECTOR (31 downto 0) := "10111001000110101110110001010101";
    constant ap_const_lv32_B4D5C860 : STD_LOGIC_VECTOR (31 downto 0) := "10110100110101011100100001100000";
    constant ap_const_lv32_3841DAC9 : STD_LOGIC_VECTOR (31 downto 0) := "00111000010000011101101011001001";
    constant ap_const_lv32_B8B82363 : STD_LOGIC_VECTOR (31 downto 0) := "10111000101110000010001101100011";
    constant ap_const_lv32_38DA7B7A : STD_LOGIC_VECTOR (31 downto 0) := "00111000110110100111101101111010";
    constant ap_const_lv32_BCF04E2B : STD_LOGIC_VECTOR (31 downto 0) := "10111100111100000100111000101011";
    constant ap_const_lv32_3F585EED : STD_LOGIC_VECTOR (31 downto 0) := "00111111010110000101111011101101";
    constant ap_const_lv32_67 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100111";
    constant ap_const_lv32_BF51EE87 : STD_LOGIC_VECTOR (31 downto 0) := "10111111010100011110111010000111";
    constant ap_const_lv32_BE0A82C1 : STD_LOGIC_VECTOR (31 downto 0) := "10111110000010101000001011000001";
    constant ap_const_lv32_68 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101000";
    constant ap_const_lv32_BE1B193D : STD_LOGIC_VECTOR (31 downto 0) := "10111110000110110001100100111101";
    constant ap_const_lv32_BF52EA41 : STD_LOGIC_VECTOR (31 downto 0) := "10111111010100101110101001000001";
    constant ap_const_lv32_69 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101001";
    constant ap_const_lv32_BF311716 : STD_LOGIC_VECTOR (31 downto 0) := "10111111001100010001011100010110";
    constant ap_const_lv32_3DBB441F : STD_LOGIC_VECTOR (31 downto 0) := "00111101101110110100010000011111";
    constant ap_const_lv32_6A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101010";
    constant ap_const_lv32_BF321DA0 : STD_LOGIC_VECTOR (31 downto 0) := "10111111001100100001110110100000";
    constant ap_const_lv32_BD90198E : STD_LOGIC_VECTOR (31 downto 0) := "10111101100100000001100110001110";
    constant ap_const_lv32_6B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101011";
    constant ap_const_lv32_BF19E7DF : STD_LOGIC_VECTOR (31 downto 0) := "10111111000110011110011111011111";
    constant ap_const_lv32_3ECB7F98 : STD_LOGIC_VECTOR (31 downto 0) := "00111110110010110111111110011000";
    constant ap_const_lv32_6C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101100";
    constant ap_const_lv32_3F32C33B : STD_LOGIC_VECTOR (31 downto 0) := "00111111001100101100001100111011";
    constant ap_const_lv32_BE4B1884 : STD_LOGIC_VECTOR (31 downto 0) := "10111110010010110001100010000100";
    constant ap_const_lv32_6D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101101";
    constant ap_const_lv32_BF1650FA : STD_LOGIC_VECTOR (31 downto 0) := "10111111000101100101000011111010";
    constant ap_const_lv32_BE3A4BE3 : STD_LOGIC_VECTOR (31 downto 0) := "10111110001110100100101111100011";
    constant ap_const_lv32_6E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101110";
    constant ap_const_lv32_3F3E8C8E : STD_LOGIC_VECTOR (31 downto 0) := "00111111001111101000110010001110";
    constant ap_const_lv32_3F5E536A : STD_LOGIC_VECTOR (31 downto 0) := "00111111010111100101001101101010";
    constant ap_const_lv32_6F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001101111";
    constant ap_const_lv32_BE3B5C57 : STD_LOGIC_VECTOR (31 downto 0) := "10111110001110110101110001010111";
    constant ap_const_lv32_BF4D2C27 : STD_LOGIC_VECTOR (31 downto 0) := "10111111010011010010110000100111";
    constant ap_const_lv32_70 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110000";
    constant ap_const_lv32_3EFBAC7E : STD_LOGIC_VECTOR (31 downto 0) := "00111110111110111010110001111110";
    constant ap_const_lv32_3F21ED80 : STD_LOGIC_VECTOR (31 downto 0) := "00111111001000011110110110000000";
    constant ap_const_lv32_71 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110001";
    constant ap_const_lv32_3F59B383 : STD_LOGIC_VECTOR (31 downto 0) := "00111111010110011011001110000011";
    constant ap_const_lv32_BE11F314 : STD_LOGIC_VECTOR (31 downto 0) := "10111110000100011111001100010100";
    constant ap_const_lv32_72 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110010";
    constant ap_const_lv32_BF67C755 : STD_LOGIC_VECTOR (31 downto 0) := "10111111011001111100011101010101";
    constant ap_const_lv32_BF429050 : STD_LOGIC_VECTOR (31 downto 0) := "10111111010000101001000001010000";
    constant ap_const_lv32_73 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110011";
    constant ap_const_lv32_BF2E498A : STD_LOGIC_VECTOR (31 downto 0) := "10111111001011100100100110001010";
    constant ap_const_lv32_3F528877 : STD_LOGIC_VECTOR (31 downto 0) := "00111111010100101000100001110111";
    constant ap_const_lv32_74 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110100";
    constant ap_const_lv32_3DF9A4BD : STD_LOGIC_VECTOR (31 downto 0) := "00111101111110011010010010111101";
    constant ap_const_lv32_BE995919 : STD_LOGIC_VECTOR (31 downto 0) := "10111110100110010101100100011001";
    constant ap_const_lv32_75 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110101";
    constant ap_const_lv32_BF583B0B : STD_LOGIC_VECTOR (31 downto 0) := "10111111010110000011101100001011";
    constant ap_const_lv32_BF188B9E : STD_LOGIC_VECTOR (31 downto 0) := "10111111000110001000101110011110";
    constant ap_const_lv32_76 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110110";
    constant ap_const_lv32_3EE13AC1 : STD_LOGIC_VECTOR (31 downto 0) := "00111110111000010011101011000001";
    constant ap_const_lv32_BF6821EC : STD_LOGIC_VECTOR (31 downto 0) := "10111111011010000010000111101100";
    constant ap_const_lv32_77 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001110111";
    constant ap_const_lv32_BD2427BD : STD_LOGIC_VECTOR (31 downto 0) := "10111101001001000010011110111101";
    constant ap_const_lv32_BF10E5B8 : STD_LOGIC_VECTOR (31 downto 0) := "10111111000100001110010110111000";
    constant ap_const_lv32_78 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111000";
    constant ap_const_lv32_3EE08C10 : STD_LOGIC_VECTOR (31 downto 0) := "00111110111000001000110000010000";
    constant ap_const_lv32_3D7B000C : STD_LOGIC_VECTOR (31 downto 0) := "00111101011110110000000000001100";
    constant ap_const_lv32_79 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111001";
    constant ap_const_lv32_BEBC51F4 : STD_LOGIC_VECTOR (31 downto 0) := "10111110101111000101000111110100";
    constant ap_const_lv32_3D1E3DD3 : STD_LOGIC_VECTOR (31 downto 0) := "00111101000111100011110111010011";
    constant ap_const_lv32_7A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111010";
    constant ap_const_lv32_BEA0780F : STD_LOGIC_VECTOR (31 downto 0) := "10111110101000000111100000001111";
    constant ap_const_lv32_3EA85A9B : STD_LOGIC_VECTOR (31 downto 0) := "00111110101010000101101010011011";
    constant ap_const_lv32_7B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111011";
    constant ap_const_lv32_3E2C1FA1 : STD_LOGIC_VECTOR (31 downto 0) := "00111110001011000001111110100001";
    constant ap_const_lv32_3F5D2126 : STD_LOGIC_VECTOR (31 downto 0) := "00111111010111010010000100100110";
    constant ap_const_lv32_7C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111100";
    constant ap_const_lv32_3E9CC011 : STD_LOGIC_VECTOR (31 downto 0) := "00111110100111001100000000010001";
    constant ap_const_lv32_BED295A3 : STD_LOGIC_VECTOR (31 downto 0) := "10111110110100101001010110100011";
    constant ap_const_lv32_7D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111101";
    constant ap_const_lv32_3F573452 : STD_LOGIC_VECTOR (31 downto 0) := "00111111010101110011010001010010";
    constant ap_const_lv32_BF213E7D : STD_LOGIC_VECTOR (31 downto 0) := "10111111001000010011111001111101";
    constant ap_const_lv32_7E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111110";
    constant ap_const_lv32_BF3AE895 : STD_LOGIC_VECTOR (31 downto 0) := "10111111001110101110100010010101";
    constant ap_const_lv32_BE4C781F : STD_LOGIC_VECTOR (31 downto 0) := "10111110010011000111100000011111";
    constant ap_const_lv32_7F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001111111";
    constant ap_const_lv32_3F0F7430 : STD_LOGIC_VECTOR (31 downto 0) := "00111111000011110111010000110000";
    constant ap_const_lv32_3F488B87 : STD_LOGIC_VECTOR (31 downto 0) := "00111111010010001000101110000111";
    constant ap_const_lv32_80 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000000";
    constant ap_const_lv32_BF4053D3 : STD_LOGIC_VECTOR (31 downto 0) := "10111111010000000101001111010011";
    constant ap_const_lv32_3E046F38 : STD_LOGIC_VECTOR (31 downto 0) := "00111110000001000110111100111000";
    constant ap_const_lv32_81 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000001";
    constant ap_const_lv32_BF04AE67 : STD_LOGIC_VECTOR (31 downto 0) := "10111111000001001010111001100111";
    constant ap_const_lv32_3DCD7374 : STD_LOGIC_VECTOR (31 downto 0) := "00111101110011010111001101110100";
    constant ap_const_lv32_82 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010000010";
    constant ap_const_lv32_3E8CBAEA : STD_LOGIC_VECTOR (31 downto 0) := "00111110100011001011101011101010";
    constant ap_const_lv32_BEE2A44B : STD_LOGIC_VECTOR (31 downto 0) := "10111110111000101010010001001011";
    constant ap_const_lv32_BED77531 : STD_LOGIC_VECTOR (31 downto 0) := "10111110110101110111010100110001";
    constant ap_const_lv32_3F5A4165 : STD_LOGIC_VECTOR (31 downto 0) := "00111111010110100100000101100101";
    constant ap_const_lv32_BC3D52D4 : STD_LOGIC_VECTOR (31 downto 0) := "10111100001111010101001011010100";
    constant ap_const_lv32_3C8A528A : STD_LOGIC_VECTOR (31 downto 0) := "00111100100010100101001010001010";
    constant ap_const_lv32_3D19BEA1 : STD_LOGIC_VECTOR (31 downto 0) := "00111101000110011011111010100001";
    constant ap_const_lv32_BA3DAB8C : STD_LOGIC_VECTOR (31 downto 0) := "10111010001111011010101110001100";
    constant ap_const_lv32_3DA280D0 : STD_LOGIC_VECTOR (31 downto 0) := "00111101101000101000000011010000";
    constant ap_const_lv32_3CE1CD97 : STD_LOGIC_VECTOR (31 downto 0) := "00111100111000011100110110010111";
    constant ap_const_lv32_BBCAE198 : STD_LOGIC_VECTOR (31 downto 0) := "10111011110010101110000110011000";
    constant ap_const_lv32_BD920BD0 : STD_LOGIC_VECTOR (31 downto 0) := "10111101100100100000101111010000";
    constant ap_const_lv32_BCE38DE3 : STD_LOGIC_VECTOR (31 downto 0) := "10111100111000111000110111100011";
    constant ap_const_lv32_BD38965D : STD_LOGIC_VECTOR (31 downto 0) := "10111101001110001001011001011101";
    constant ap_const_lv32_4019C90D : STD_LOGIC_VECTOR (31 downto 0) := "01000000000110011100100100001101";
    constant ap_const_lv32_400B555D : STD_LOGIC_VECTOR (31 downto 0) := "01000000000010110101010101011101";
    constant ap_const_lv32_401FBD38 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000111111011110100111000";
    constant ap_const_lv32_402777A3 : STD_LOGIC_VECTOR (31 downto 0) := "01000000001001110111011110100011";
    constant ap_const_lv32_401F672F : STD_LOGIC_VECTOR (31 downto 0) := "01000000000111110110011100101111";
    constant ap_const_lv32_402A7A78 : STD_LOGIC_VECTOR (31 downto 0) := "01000000001010100111101001111000";
    constant ap_const_lv32_4011FB04 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000100011111101100000100";
    constant ap_const_lv32_402D0F22 : STD_LOGIC_VECTOR (31 downto 0) := "01000000001011010000111100100010";
    constant ap_const_lv32_401B1447 : STD_LOGIC_VECTOR (31 downto 0) := "01000000000110110001010001000111";
    constant ap_const_lv32_402981EC : STD_LOGIC_VECTOR (31 downto 0) := "01000000001010011000000111101100";
    constant ap_const_lv32_3F91BC92 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100100011011110010010010";
    constant ap_const_lv32_3F941376 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100101000001001101110110";
    constant ap_const_lv32_3F93C2B0 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100100111100001010110000";
    constant ap_const_lv32_3F8EED3A : STD_LOGIC_VECTOR (31 downto 0) := "00111111100011101110110100111010";
    constant ap_const_lv32_3F916303 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100100010110001100000011";
    constant ap_const_lv32_3F923E51 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100100100011111001010001";
    constant ap_const_lv32_3F93A498 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100100111010010010011000";
    constant ap_const_lv32_3F92461C : STD_LOGIC_VECTOR (31 downto 0) := "00111111100100100100011000011100";
    constant ap_const_lv32_3F916033 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100100010110000000110011";
    constant ap_const_lv32_3F931201 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100100110001001000000001";
    constant ap_const_lv32_BCB57EFF : STD_LOGIC_VECTOR (31 downto 0) := "10111100101101010111111011111111";
    constant ap_const_lv32_BC97B45D : STD_LOGIC_VECTOR (31 downto 0) := "10111100100101111011010001011101";
    constant ap_const_lv32_3CA58DD0 : STD_LOGIC_VECTOR (31 downto 0) := "00111100101001011000110111010000";
    constant ap_const_lv32_3CE39D1F : STD_LOGIC_VECTOR (31 downto 0) := "00111100111000111001110100011111";
    constant ap_const_lv32_BD8CD877 : STD_LOGIC_VECTOR (31 downto 0) := "10111101100011001101100001110111";
    constant ap_const_lv32_BD94401B : STD_LOGIC_VECTOR (31 downto 0) := "10111101100101000100000000011011";
    constant ap_const_lv32_3CCC7E1F : STD_LOGIC_VECTOR (31 downto 0) := "00111100110011000111111000011111";
    constant ap_const_lv32_3B3D6F28 : STD_LOGIC_VECTOR (31 downto 0) := "00111011001111010110111100101000";
    constant ap_const_lv32_BCA6B1AA : STD_LOGIC_VECTOR (31 downto 0) := "10111100101001101011000110101010";
    constant ap_const_lv32_BD6E1A88 : STD_LOGIC_VECTOR (31 downto 0) := "10111101011011100001101010001000";
    constant ap_const_lv32_A0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010100000";
    constant ap_const_lv32_B0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010110000";
    constant ap_const_lv32_3D67F4DF : STD_LOGIC_VECTOR (31 downto 0) := "00111101011001111111010011011111";
    constant ap_const_lv32_BC5D1D7F : STD_LOGIC_VECTOR (31 downto 0) := "10111100010111010001110101111111";
    constant ap_const_lv32_BD01708E : STD_LOGIC_VECTOR (31 downto 0) := "10111101000000010111000010001110";
    constant ap_const_lv32_BB42435F : STD_LOGIC_VECTOR (31 downto 0) := "10111011010000100100001101011111";
    constant ap_const_lv32_3CD9CBB9 : STD_LOGIC_VECTOR (31 downto 0) := "00111100110110011100101110111001";
    constant ap_const_lv32_BCFA5777 : STD_LOGIC_VECTOR (31 downto 0) := "10111100111110100101011101110111";
    constant ap_const_lv32_8E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010001110";
    constant ap_const_lv32_9B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010011011";
    constant ap_const_lv32_3F800000 : STD_LOGIC_VECTOR (31 downto 0) := "00111111100000000000000000000000";
    constant ap_const_lv32_A8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000010101000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv19_40037 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000110111";
    constant ap_const_lv19_40A75 : STD_LOGIC_VECTOR (18 downto 0) := "1000000101001110101";
    constant ap_const_lv11_1 : STD_LOGIC_VECTOR (10 downto 0) := "00000000001";
    constant ap_const_lv11_44B : STD_LOGIC_VECTOR (10 downto 0) := "10001001011";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv7_45 : STD_LOGIC_VECTOR (6 downto 0) := "1000101";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv8_FF : STD_LOGIC_VECTOR (7 downto 0) := "11111111";
    constant ap_const_lv23_0 : STD_LOGIC_VECTOR (22 downto 0) := "00000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv5_2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (185 downto 0) := "000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal dense_output_numel : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal face_classifier_c_de_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal face_classifier_c_de_ce0 : STD_LOGIC;
    signal face_classifier_c_de_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal batch_normalization_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal dense_1_output_numel : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal dense_1_bias_numel : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal batch_normalization_8 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal batch_normalization_12 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal dense_2_output_ndim : STD_LOGIC_VECTOR (0 downto 0) := "0";
    signal dense_2_output_numel : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal dense_2_kernel_ndim : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal dense_2_kernel_numel : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal dense_2_bias_numel : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal dense_output_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal dense_output_array_ce0 : STD_LOGIC;
    signal dense_output_array_we0 : STD_LOGIC;
    signal dense_output_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_output_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_output_array_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal dense_output_array_ce1 : STD_LOGIC;
    signal dense_output_array_we1 : STD_LOGIC;
    signal batch_normalization_1_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal batch_normalization_1_ce0 : STD_LOGIC;
    signal batch_normalization_1_we0 : STD_LOGIC;
    signal batch_normalization_1_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_1_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_1_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal batch_normalization_1_ce1 : STD_LOGIC;
    signal batch_normalization_1_we1 : STD_LOGIC;
    signal batch_normalization_1_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_9_ce0 : STD_LOGIC;
    signal batch_normalization_9_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_s_ce0 : STD_LOGIC;
    signal batch_normalization_s_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_10_ce0 : STD_LOGIC;
    signal batch_normalization_10_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_11_ce0 : STD_LOGIC;
    signal batch_normalization_11_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal activation_1_output_s_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal activation_1_output_s_ce0 : STD_LOGIC;
    signal activation_1_output_s_we0 : STD_LOGIC;
    signal activation_1_output_s_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dropout_2_output_arr_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal dropout_2_output_arr_ce0 : STD_LOGIC;
    signal dropout_2_output_arr_we0 : STD_LOGIC;
    signal dropout_2_output_arr_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_1_output_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal dense_1_output_array_ce0 : STD_LOGIC;
    signal dense_1_output_array_we0 : STD_LOGIC;
    signal dense_1_output_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_1_output_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_1_output_array_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal dense_1_output_array_ce1 : STD_LOGIC;
    signal dense_1_output_array_we1 : STD_LOGIC;
    signal dropout_2_output_sha_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dropout_2_output_sha_ce0 : STD_LOGIC;
    signal dropout_2_output_sha_we0 : STD_LOGIC;
    signal dropout_2_output_sha_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dropout_2_output_sha_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dropout_2_output_sha_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal dropout_2_output_sha_ce1 : STD_LOGIC;
    signal dropout_2_output_sha_we1 : STD_LOGIC;
    signal dense_1_bias_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal dense_1_bias_array_ce0 : STD_LOGIC;
    signal dense_1_bias_array_we0 : STD_LOGIC;
    signal dense_1_bias_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_1_bias_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_1_bias_array_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal dense_1_bias_array_ce1 : STD_LOGIC;
    signal dense_1_bias_array_we1 : STD_LOGIC;
    signal dense_1_bias_array_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_7_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal batch_normalization_7_ce0 : STD_LOGIC;
    signal batch_normalization_7_we0 : STD_LOGIC;
    signal batch_normalization_7_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_7_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_7_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal batch_normalization_7_ce1 : STD_LOGIC;
    signal batch_normalization_7_we1 : STD_LOGIC;
    signal batch_normalization_7_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_6_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal batch_normalization_6_ce0 : STD_LOGIC;
    signal batch_normalization_6_we0 : STD_LOGIC;
    signal batch_normalization_6_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_6_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_6_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal batch_normalization_6_ce1 : STD_LOGIC;
    signal batch_normalization_6_we1 : STD_LOGIC;
    signal batch_normalization_6_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_13_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal batch_normalization_13_ce0 : STD_LOGIC;
    signal batch_normalization_13_we0 : STD_LOGIC;
    signal batch_normalization_13_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_13_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_13_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal batch_normalization_13_ce1 : STD_LOGIC;
    signal batch_normalization_13_we1 : STD_LOGIC;
    signal batch_normalization_13_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_5_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal batch_normalization_5_ce0 : STD_LOGIC;
    signal batch_normalization_5_we0 : STD_LOGIC;
    signal batch_normalization_5_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_5_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_5_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal batch_normalization_5_ce1 : STD_LOGIC;
    signal batch_normalization_5_we1 : STD_LOGIC;
    signal batch_normalization_5_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_4_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal batch_normalization_4_ce0 : STD_LOGIC;
    signal batch_normalization_4_we0 : STD_LOGIC;
    signal batch_normalization_4_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_4_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal batch_normalization_4_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal batch_normalization_4_ce1 : STD_LOGIC;
    signal batch_normalization_4_we1 : STD_LOGIC;
    signal batch_normalization_4_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal activation_2_output_s_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal activation_2_output_s_ce0 : STD_LOGIC;
    signal activation_2_output_s_we0 : STD_LOGIC;
    signal activation_2_output_s_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dropout_3_output_arr_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal dropout_3_output_arr_ce0 : STD_LOGIC;
    signal dropout_3_output_arr_we0 : STD_LOGIC;
    signal dropout_3_output_arr_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_output_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal dense_2_output_array_ce0 : STD_LOGIC;
    signal dense_2_output_array_we0 : STD_LOGIC;
    signal dense_2_output_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_output_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_output_array_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal dense_2_output_array_ce1 : STD_LOGIC;
    signal dense_2_output_array_we1 : STD_LOGIC;
    signal dense_2_output_array_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_output_array_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dropout_3_output_sha_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dropout_3_output_sha_ce0 : STD_LOGIC;
    signal dropout_3_output_sha_we0 : STD_LOGIC;
    signal dropout_3_output_sha_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dropout_3_output_sha_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dropout_3_output_sha_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal dropout_3_output_sha_ce1 : STD_LOGIC;
    signal dropout_3_output_sha_we1 : STD_LOGIC;
    signal dense_2_kernel_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal dense_2_kernel_array_ce0 : STD_LOGIC;
    signal dense_2_kernel_array_we0 : STD_LOGIC;
    signal dense_2_kernel_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_kernel_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_kernel_array_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal dense_2_kernel_array_ce1 : STD_LOGIC;
    signal dense_2_kernel_array_we1 : STD_LOGIC;
    signal dense_2_kernel_array_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_kernel_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dense_2_kernel_shape_ce0 : STD_LOGIC;
    signal dense_2_kernel_shape_we0 : STD_LOGIC;
    signal dense_2_kernel_shape_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dense_2_kernel_shape_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dense_2_kernel_shape_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal dense_2_kernel_shape_ce1 : STD_LOGIC;
    signal dense_2_kernel_shape_we1 : STD_LOGIC;
    signal dense_2_bias_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal dense_2_bias_array_ce0 : STD_LOGIC;
    signal dense_2_bias_array_we0 : STD_LOGIC;
    signal dense_2_bias_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_bias_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_bias_array_address1 : STD_LOGIC_VECTOR (11 downto 0);
    signal dense_2_bias_array_ce1 : STD_LOGIC;
    signal dense_2_bias_array_we1 : STD_LOGIC;
    signal dense_2_bias_array_d1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_output_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dense_output_shape_ce0 : STD_LOGIC;
    signal dense_output_shape_we0 : STD_LOGIC;
    signal dense_output_shape_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dense_output_shape_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal dense_output_shape_ce1 : STD_LOGIC;
    signal dense_output_shape_we1 : STD_LOGIC;
    signal dense_1_output_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal dense_1_output_shape_ce0 : STD_LOGIC;
    signal dense_1_output_shape_we0 : STD_LOGIC;
    signal dense_1_output_shape_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal dense_1_output_shape_address1 : STD_LOGIC_VECTOR (2 downto 0);
    signal dense_1_output_shape_ce1 : STD_LOGIC;
    signal dense_1_output_shape_we1 : STD_LOGIC;
    signal i_2_reg_2296 : STD_LOGIC_VECTOR (2 downto 0);
    signal xmax1_reg_2307 : STD_LOGIC_VECTOR (31 downto 0);
    signal i_3_reg_2317 : STD_LOGIC_VECTOR (2 downto 0);
    signal sum_reg_2328 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_2495 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state145 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state145 : signal is "none";
    signal tmp_74_fu_2713_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state148 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state148 : signal is "none";
    signal reg_2501 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state158 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state158 : signal is "none";
    signal tmp_81_fu_2774_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state200 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state200 : signal is "none";
    signal reg_2506 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state162 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state162 : signal is "none";
    signal ap_CS_fsm_pp1_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage1 : signal is "none";
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal ap_block_state167_pp1_stage1_iter0 : BOOLEAN;
    signal ap_block_state171_pp1_stage1_iter1 : BOOLEAN;
    signal ap_block_state175_pp1_stage1_iter2 : BOOLEAN;
    signal ap_block_state179_pp1_stage1_iter3 : BOOLEAN;
    signal ap_block_state183_pp1_stage1_iter4 : BOOLEAN;
    signal ap_block_pp1_stage1_11001 : BOOLEAN;
    signal tmp_84_reg_3185 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state194 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state194 : signal is "none";
    signal grp_fu_2457_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_2513 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state197 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state197 : signal is "none";
    signal ap_CS_fsm_state198 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state198 : signal is "none";
    signal ap_CS_fsm_state199 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state199 : signal is "none";
    signal grp_fu_2461_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal reg_2518 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state50 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state50 : signal is "none";
    signal tmp_57_fu_2529_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_57_reg_2962 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state51 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state51 : signal is "none";
    signal tmp_58_fu_2535_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_58_reg_2967 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_59_fu_2540_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_59_reg_2977 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvarinc_fu_2546_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state53 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state53 : signal is "none";
    signal indvarinc1_fu_2587_p2 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal indvarinc2_fu_2646_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state133 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state133 : signal is "none";
    signal ap_CS_fsm_state135 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state135 : signal is "none";
    signal batch_normalization_14_reg_3010 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state136 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state136 : signal is "none";
    signal grp_k2c_batch_norm_fu_2428_ap_idle : STD_LOGIC;
    signal grp_k2c_batch_norm_fu_2428_ap_ready : STD_LOGIC;
    signal grp_k2c_batch_norm_fu_2428_ap_done : STD_LOGIC;
    signal i_36_fu_2682_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_36_reg_3021 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state137 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state137 : signal is "none";
    signal batch_normalization_15_reg_3026 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond2_fu_2677_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal batch_normalization_17_reg_3032 : STD_LOGIC_VECTOR (63 downto 0);
    signal batch_normalization_16_reg_3037 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state138 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state138 : signal is "none";
    signal tmp_70_fu_2692_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_70_reg_3042 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state141 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state141 : signal is "none";
    signal j_7_fu_2702_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_7_reg_3050 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_71_fu_2697_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_73_fu_2708_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_73_reg_3060 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_9_fu_2718_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_9_reg_3068 : STD_LOGIC_VECTOR (11 downto 0);
    signal batch_normalization_20_reg_3083 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state149 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state149 : signal is "none";
    signal i_37_fu_2743_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_37_reg_3094 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state150 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state150 : signal is "none";
    signal batch_normalization_21_reg_3099 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_2738_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal batch_normalization_23_reg_3105 : STD_LOGIC_VECTOR (63 downto 0);
    signal batch_normalization_22_reg_3110 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state151 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state151 : signal is "none";
    signal tmp_77_fu_2753_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_77_reg_3115 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state154 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state154 : signal is "none";
    signal j_fu_2763_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_reg_3123 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_78_fu_2758_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_80_fu_2769_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_80_reg_3133 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_3_fu_2779_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_3_reg_3141 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond1_fu_2800_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_3166 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state163_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state164_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal i_38_fu_2811_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal xmax_1_fu_2901_p3 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal tmp_84_fu_2909_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state166_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state170_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_state174_pp1_stage0_iter2 : BOOLEAN;
    signal ap_block_state178_pp1_stage0_iter3 : BOOLEAN;
    signal ap_block_state182_pp1_stage0_iter4 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal tmp_84_reg_3185_pp1_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_reg_3185_pp1_iter2_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_reg_3185_pp1_iter3_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_84_reg_3185_pp1_iter4_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_39_fu_2915_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_39_reg_3189 : STD_LOGIC_VECTOR (2 downto 0);
    signal dense_2_output_array_2_reg_3194 : STD_LOGIC_VECTOR (11 downto 0);
    signal dense_2_output_array_2_reg_3194_pp1_iter1_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal dense_2_output_array_2_reg_3194_pp1_iter2_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal dense_2_output_array_2_reg_3194_pp1_iter3_reg : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_fu_2451_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_87_reg_3200 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal grp_fu_2477_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_88_reg_3205 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp1_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage2 : signal is "none";
    signal ap_enable_reg_pp1_iter4 : STD_LOGIC := '0';
    signal ap_block_state168_pp1_stage2_iter0 : BOOLEAN;
    signal ap_block_state172_pp1_stage2_iter1 : BOOLEAN;
    signal ap_block_state176_pp1_stage2_iter2 : BOOLEAN;
    signal ap_block_state180_pp1_stage2_iter3 : BOOLEAN;
    signal ap_block_state184_pp1_stage2_iter4 : BOOLEAN;
    signal ap_block_pp1_stage2_11001 : BOOLEAN;
    signal grp_fu_2465_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal sum_1_reg_3215 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_output_array_5_reg_3221 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_output_array_6_reg_3226 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state195 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state195 : signal is "none";
    signal dense_2_output_array_7_reg_3231 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_output_array_8_reg_3236 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state196 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state196 : signal is "none";
    signal dense_2_output_array_9_reg_3241 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_89_fu_2935_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_89_reg_3246 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state201 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state201 : signal is "none";
    signal j_5_fu_2946_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal j_5_reg_3254 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_90_fu_2940_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state163 : STD_LOGIC;
    signal ap_CS_fsm_state165 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state165 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state166 : STD_LOGIC;
    signal ap_block_state169_pp1_stage3_iter0 : BOOLEAN;
    signal ap_block_state173_pp1_stage3_iter1 : BOOLEAN;
    signal ap_block_state177_pp1_stage3_iter2 : BOOLEAN;
    signal ap_block_state181_pp1_stage3_iter3 : BOOLEAN;
    signal ap_block_pp1_stage3_subdone : BOOLEAN;
    signal ap_CS_fsm_pp1_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage3 : signal is "none";
    signal ap_block_pp1_stage2_subdone : BOOLEAN;
    signal ap_enable_reg_pp1_iter2 : STD_LOGIC := '0';
    signal ap_enable_reg_pp1_iter3 : STD_LOGIC := '0';
    signal dense_kernel_array_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal dense_kernel_array_ce0 : STD_LOGIC;
    signal dense_kernel_array_we0 : STD_LOGIC;
    signal dense_kernel_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_fwork_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal dense_fwork_ce0 : STD_LOGIC;
    signal dense_fwork_we0 : STD_LOGIC;
    signal dense_fwork_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_fwork_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_fwork_ce1 : STD_LOGIC;
    signal dense_fwork_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_1_fwork_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal dense_1_fwork_ce0 : STD_LOGIC;
    signal dense_1_fwork_we0 : STD_LOGIC;
    signal dense_1_fwork_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_1_fwork_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_1_fwork_ce1 : STD_LOGIC;
    signal dense_1_fwork_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_fwork_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal dense_2_fwork_ce0 : STD_LOGIC;
    signal dense_2_fwork_we0 : STD_LOGIC;
    signal dense_2_fwork_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_fwork_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal dense_2_fwork_ce1 : STD_LOGIC;
    signal dense_2_fwork_q1 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_dense2_fu_2351_ap_start : STD_LOGIC;
    signal grp_k2c_dense2_fu_2351_ap_done : STD_LOGIC;
    signal grp_k2c_dense2_fu_2351_ap_idle : STD_LOGIC;
    signal grp_k2c_dense2_fu_2351_ap_ready : STD_LOGIC;
    signal grp_k2c_dense2_fu_2351_output_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_k2c_dense2_fu_2351_output_array_ce0 : STD_LOGIC;
    signal grp_k2c_dense2_fu_2351_output_array_we0 : STD_LOGIC;
    signal grp_k2c_dense2_fu_2351_output_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_dense2_fu_2351_input_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_k2c_dense2_fu_2351_input_array_ce0 : STD_LOGIC;
    signal grp_k2c_dense2_fu_2351_input_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_dense2_fu_2351_input_shape_ce0 : STD_LOGIC;
    signal grp_k2c_dense2_fu_2351_kernel_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_k2c_dense2_fu_2351_kernel_array_ce0 : STD_LOGIC;
    signal grp_k2c_dense2_fu_2351_kernel_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_dense2_fu_2351_kernel_shape_ce0 : STD_LOGIC;
    signal grp_k2c_dense2_fu_2351_bias_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_k2c_dense2_fu_2351_bias_array_ce0 : STD_LOGIC;
    signal grp_k2c_dense2_fu_2351_fwork_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_k2c_dense2_fu_2351_fwork_ce0 : STD_LOGIC;
    signal grp_k2c_dense2_fu_2351_fwork_we0 : STD_LOGIC;
    signal grp_k2c_dense2_fu_2351_fwork_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_dense2_fu_2351_fwork_address1 : STD_LOGIC_VECTOR (6 downto 0);
    signal grp_k2c_dense2_fu_2351_fwork_ce1 : STD_LOGIC;
    signal grp_k2c_dense_fu_2374_ap_start : STD_LOGIC;
    signal grp_k2c_dense_fu_2374_ap_done : STD_LOGIC;
    signal grp_k2c_dense_fu_2374_ap_idle : STD_LOGIC;
    signal grp_k2c_dense_fu_2374_ap_ready : STD_LOGIC;
    signal grp_k2c_dense_fu_2374_input_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_k2c_dense_fu_2374_input_array_ce0 : STD_LOGIC;
    signal grp_k2c_dense_fu_2374_input_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_dense_fu_2374_input_shape_ce0 : STD_LOGIC;
    signal grp_k2c_dense_fu_2374_kernel_array_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_k2c_dense_fu_2374_kernel_array_ce0 : STD_LOGIC;
    signal grp_k2c_dense_fu_2374_fwork_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_k2c_dense_fu_2374_fwork_ce0 : STD_LOGIC;
    signal grp_k2c_dense_fu_2374_fwork_we0 : STD_LOGIC;
    signal grp_k2c_dense_fu_2374_fwork_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_dense_fu_2374_fwork_address1 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_k2c_dense_fu_2374_fwork_ce1 : STD_LOGIC;
    signal grp_k2c_dense_fu_2374_dense_output_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_k2c_dense_fu_2374_dense_output_array_ce0 : STD_LOGIC;
    signal grp_k2c_dense_fu_2374_dense_output_array_we0 : STD_LOGIC;
    signal grp_k2c_dense_fu_2374_dense_output_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_dense2_1_fu_2394_ap_start : STD_LOGIC;
    signal grp_k2c_dense2_1_fu_2394_ap_done : STD_LOGIC;
    signal grp_k2c_dense2_1_fu_2394_ap_idle : STD_LOGIC;
    signal grp_k2c_dense2_1_fu_2394_ap_ready : STD_LOGIC;
    signal grp_k2c_dense2_1_fu_2394_output_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_k2c_dense2_1_fu_2394_output_array_ce0 : STD_LOGIC;
    signal grp_k2c_dense2_1_fu_2394_output_array_we0 : STD_LOGIC;
    signal grp_k2c_dense2_1_fu_2394_output_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_dense2_1_fu_2394_input_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_k2c_dense2_1_fu_2394_input_array_ce0 : STD_LOGIC;
    signal grp_k2c_dense2_1_fu_2394_input_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_dense2_1_fu_2394_input_shape_ce0 : STD_LOGIC;
    signal grp_k2c_dense2_1_fu_2394_bias_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_k2c_dense2_1_fu_2394_bias_array_ce0 : STD_LOGIC;
    signal grp_k2c_dense2_1_fu_2394_fwork_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_k2c_dense2_1_fu_2394_fwork_ce0 : STD_LOGIC;
    signal grp_k2c_dense2_1_fu_2394_fwork_we0 : STD_LOGIC;
    signal grp_k2c_dense2_1_fu_2394_fwork_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_dense2_1_fu_2394_fwork_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_k2c_dense2_1_fu_2394_fwork_ce1 : STD_LOGIC;
    signal grp_generic_tanh_float_s_fu_2415_ap_start : STD_LOGIC;
    signal grp_generic_tanh_float_s_fu_2415_ap_done : STD_LOGIC;
    signal grp_generic_tanh_float_s_fu_2415_ap_idle : STD_LOGIC;
    signal grp_generic_tanh_float_s_fu_2415_ap_ready : STD_LOGIC;
    signal grp_generic_tanh_float_s_fu_2415_t_in : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_generic_tanh_float_s_fu_2415_ap_return : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_batch_norm_fu_2428_ap_start : STD_LOGIC;
    signal grp_k2c_batch_norm_fu_2428_outputs_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_k2c_batch_norm_fu_2428_outputs_array_ce0 : STD_LOGIC;
    signal grp_k2c_batch_norm_fu_2428_outputs_array_we0 : STD_LOGIC;
    signal grp_k2c_batch_norm_fu_2428_outputs_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_batch_norm_fu_2428_inputs_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_k2c_batch_norm_fu_2428_inputs_array_ce0 : STD_LOGIC;
    signal grp_k2c_batch_norm_fu_2428_inputs_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_batch_norm_fu_2428_inputs_numel_read : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_batch_norm_fu_2428_mean_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_k2c_batch_norm_fu_2428_mean_array_ce0 : STD_LOGIC;
    signal grp_k2c_batch_norm_fu_2428_mean_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_batch_norm_fu_2428_stdev_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_k2c_batch_norm_fu_2428_stdev_array_ce0 : STD_LOGIC;
    signal grp_k2c_batch_norm_fu_2428_stdev_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_batch_norm_fu_2428_gamma_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_k2c_batch_norm_fu_2428_gamma_array_ce0 : STD_LOGIC;
    signal grp_k2c_batch_norm_fu_2428_gamma_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_batch_norm_fu_2428_beta_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_k2c_batch_norm_fu_2428_beta_array_ce0 : STD_LOGIC;
    signal grp_k2c_batch_norm_fu_2428_beta_array_q0 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_s_reg_2186 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state52 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state52 : signal is "none";
    signal invdar_reg_2197 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_65_fu_2557_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal invdar1_reg_2208 : STD_LOGIC_VECTOR (10 downto 0);
    signal tmp_67_fu_2598_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal invdar2_reg_2219 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_69_fu_2657_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state132 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state132 : signal is "none";
    signal i_reg_2230 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state140 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state140 : signal is "none";
    signal j_s_reg_2241 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state142 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state142 : signal is "none";
    signal j_8_reg_2252 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state146 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state146 : signal is "none";
    signal ap_CS_fsm_state144 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state144 : signal is "none";
    signal i_1_reg_2263 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state153 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state153 : signal is "none";
    signal j_1_reg_2274 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state155 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state155 : signal is "none";
    signal j_2_reg_2285 : STD_LOGIC_VECTOR (11 downto 0);
    signal ap_CS_fsm_state159 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state159 : signal is "none";
    signal ap_CS_fsm_state157 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state157 : signal is "none";
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_phi_mux_i_3_phi_fu_2321_p4 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal j_4_reg_2340 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state202 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state202 : signal is "none";
    signal grp_k2c_dense2_fu_2351_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state160 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state160 : signal is "none";
    signal grp_k2c_dense_fu_2374_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state134 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state134 : signal is "none";
    signal grp_k2c_dense2_1_fu_2394_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state147 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state147 : signal is "none";
    signal grp_generic_tanh_float_s_fu_2415_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state139 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state139 : signal is "none";
    signal ap_CS_fsm_state152 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state152 : signal is "none";
    signal grp_k2c_batch_norm_fu_2428_ap_start_reg : STD_LOGIC := '0';
    signal tmp_64_fu_2552_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_66_fu_2593_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_68_fu_2652_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_fu_2672_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_1_cast_fu_2733_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_2_cast4_fu_2806_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_3_cast3_fu_2921_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal ap_CS_fsm_state13 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state13 : signal is "none";
    signal ap_CS_fsm_state14 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state14 : signal is "none";
    signal ap_CS_fsm_state15 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state15 : signal is "none";
    signal ap_CS_fsm_state16 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state16 : signal is "none";
    signal ap_CS_fsm_state17 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state17 : signal is "none";
    signal ap_CS_fsm_state18 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state18 : signal is "none";
    signal ap_CS_fsm_state19 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state19 : signal is "none";
    signal ap_CS_fsm_state20 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state20 : signal is "none";
    signal ap_CS_fsm_state21 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state21 : signal is "none";
    signal ap_CS_fsm_state22 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state22 : signal is "none";
    signal ap_CS_fsm_state23 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state23 : signal is "none";
    signal ap_CS_fsm_state24 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state24 : signal is "none";
    signal ap_CS_fsm_state25 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state25 : signal is "none";
    signal ap_CS_fsm_state26 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state26 : signal is "none";
    signal ap_CS_fsm_state27 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state27 : signal is "none";
    signal ap_CS_fsm_state28 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state28 : signal is "none";
    signal ap_CS_fsm_state29 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state29 : signal is "none";
    signal ap_CS_fsm_state30 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state30 : signal is "none";
    signal ap_CS_fsm_state31 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state31 : signal is "none";
    signal ap_CS_fsm_state32 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state32 : signal is "none";
    signal ap_CS_fsm_state33 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state33 : signal is "none";
    signal ap_CS_fsm_state34 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state34 : signal is "none";
    signal ap_CS_fsm_state35 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state35 : signal is "none";
    signal ap_CS_fsm_state36 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state36 : signal is "none";
    signal ap_CS_fsm_state37 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state37 : signal is "none";
    signal ap_CS_fsm_state38 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state38 : signal is "none";
    signal ap_CS_fsm_state39 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state39 : signal is "none";
    signal ap_CS_fsm_state40 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state40 : signal is "none";
    signal ap_CS_fsm_state41 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state41 : signal is "none";
    signal ap_CS_fsm_state42 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state42 : signal is "none";
    signal ap_CS_fsm_state43 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state43 : signal is "none";
    signal ap_CS_fsm_state44 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state44 : signal is "none";
    signal ap_CS_fsm_state45 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state45 : signal is "none";
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal ap_CS_fsm_state48 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state48 : signal is "none";
    signal ap_CS_fsm_state49 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state49 : signal is "none";
    signal ap_CS_fsm_state54 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state54 : signal is "none";
    signal ap_CS_fsm_state55 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state55 : signal is "none";
    signal ap_CS_fsm_state56 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state56 : signal is "none";
    signal ap_CS_fsm_state57 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state57 : signal is "none";
    signal ap_CS_fsm_state58 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state58 : signal is "none";
    signal ap_CS_fsm_state59 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state59 : signal is "none";
    signal ap_CS_fsm_state60 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state60 : signal is "none";
    signal ap_CS_fsm_state61 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state61 : signal is "none";
    signal ap_CS_fsm_state62 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state62 : signal is "none";
    signal ap_CS_fsm_state63 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state63 : signal is "none";
    signal ap_CS_fsm_state64 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state64 : signal is "none";
    signal ap_CS_fsm_state65 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state65 : signal is "none";
    signal ap_CS_fsm_state66 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state66 : signal is "none";
    signal ap_CS_fsm_state67 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state67 : signal is "none";
    signal ap_CS_fsm_state68 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state68 : signal is "none";
    signal ap_CS_fsm_state69 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state69 : signal is "none";
    signal ap_CS_fsm_state70 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state70 : signal is "none";
    signal ap_CS_fsm_state71 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state71 : signal is "none";
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal ap_CS_fsm_state73 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state73 : signal is "none";
    signal ap_CS_fsm_state74 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state74 : signal is "none";
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_CS_fsm_state76 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state76 : signal is "none";
    signal ap_CS_fsm_state77 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state77 : signal is "none";
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_CS_fsm_state79 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state79 : signal is "none";
    signal ap_CS_fsm_state80 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state80 : signal is "none";
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_CS_fsm_state82 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state82 : signal is "none";
    signal ap_CS_fsm_state83 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state83 : signal is "none";
    signal ap_CS_fsm_state84 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state84 : signal is "none";
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_CS_fsm_state86 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state86 : signal is "none";
    signal ap_CS_fsm_state87 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state87 : signal is "none";
    signal ap_CS_fsm_state88 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state88 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal ap_CS_fsm_state92 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state92 : signal is "none";
    signal ap_CS_fsm_state93 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state93 : signal is "none";
    signal ap_CS_fsm_state94 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state94 : signal is "none";
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal ap_CS_fsm_state105 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state105 : signal is "none";
    signal ap_CS_fsm_state106 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state106 : signal is "none";
    signal ap_CS_fsm_state107 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state107 : signal is "none";
    signal ap_CS_fsm_state108 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state108 : signal is "none";
    signal ap_CS_fsm_state109 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state109 : signal is "none";
    signal ap_CS_fsm_state110 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state110 : signal is "none";
    signal ap_CS_fsm_state111 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state111 : signal is "none";
    signal ap_CS_fsm_state112 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state112 : signal is "none";
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal ap_CS_fsm_state114 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state114 : signal is "none";
    signal ap_CS_fsm_state115 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state115 : signal is "none";
    signal ap_CS_fsm_state116 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state116 : signal is "none";
    signal ap_CS_fsm_state117 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state117 : signal is "none";
    signal ap_CS_fsm_state118 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state118 : signal is "none";
    signal ap_CS_fsm_state119 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state119 : signal is "none";
    signal ap_CS_fsm_state120 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state120 : signal is "none";
    signal ap_CS_fsm_state121 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state121 : signal is "none";
    signal ap_CS_fsm_state122 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state122 : signal is "none";
    signal ap_CS_fsm_state123 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state123 : signal is "none";
    signal ap_CS_fsm_state124 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state124 : signal is "none";
    signal ap_CS_fsm_state125 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state125 : signal is "none";
    signal ap_CS_fsm_state126 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state126 : signal is "none";
    signal ap_CS_fsm_state127 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state127 : signal is "none";
    signal ap_CS_fsm_state128 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state128 : signal is "none";
    signal ap_CS_fsm_state129 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state129 : signal is "none";
    signal ap_CS_fsm_state130 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state130 : signal is "none";
    signal ap_CS_fsm_state131 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state131 : signal is "none";
    signal ap_CS_fsm_state161 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state161 : signal is "none";
    signal ap_block_pp1_stage1 : BOOLEAN;
    signal ap_CS_fsm_state193 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state193 : signal is "none";
    signal ap_CS_fsm_state143 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state143 : signal is "none";
    signal ap_CS_fsm_state156 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state156 : signal is "none";
    signal grp_fu_2451_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2451_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_block_pp1_stage2 : BOOLEAN;
    signal ap_block_pp1_stage3 : BOOLEAN;
    signal grp_fu_2457_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_2461_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state185 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state185 : signal is "none";
    signal xmax_2_to_int_fu_2817_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal xmax1_to_int_fu_2835_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_15_fu_2821_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_92_fu_2831_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs_fu_2859_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs_fu_2853_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_17_fu_2839_p4 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_93_fu_2849_p1 : STD_LOGIC_VECTOR (22 downto 0);
    signal notrhs1_fu_2877_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal notlhs1_fu_2871_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_19_fu_2865_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_20_fu_2883_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_21_fu_2889_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_22_fu_2471_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_23_fu_2895_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_2451_opcode : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp1_stage3_00001 : BOOLEAN;
    signal ap_block_pp1_stage2_00001 : BOOLEAN;
    signal ap_block_pp0_stage0_00001 : BOOLEAN;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (185 downto 0);
    signal ap_block_pp1_stage1_subdone : BOOLEAN;
    signal ap_block_pp1_stage3_11001 : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;

    component k2c_dense2 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        output_array_ce0 : OUT STD_LOGIC;
        output_array_we0 : OUT STD_LOGIC;
        output_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
        input_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input_array_ce0 : OUT STD_LOGIC;
        input_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
        input_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
        input_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        input_shape_ce0 : OUT STD_LOGIC;
        input_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        kernel_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        kernel_array_ce0 : OUT STD_LOGIC;
        kernel_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        kernel_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
        kernel_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
        kernel_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        kernel_shape_ce0 : OUT STD_LOGIC;
        kernel_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        bias_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        bias_array_ce0 : OUT STD_LOGIC;
        bias_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
        fwork_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
        fwork_ce0 : OUT STD_LOGIC;
        fwork_we0 : OUT STD_LOGIC;
        fwork_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fwork_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fwork_address1 : OUT STD_LOGIC_VECTOR (6 downto 0);
        fwork_ce1 : OUT STD_LOGIC;
        fwork_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component k2c_dense IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        input_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input_array_ce0 : OUT STD_LOGIC;
        input_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
        input_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
        input_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        input_shape_ce0 : OUT STD_LOGIC;
        input_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        kernel_array_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        kernel_array_ce0 : OUT STD_LOGIC;
        kernel_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fwork_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        fwork_ce0 : OUT STD_LOGIC;
        fwork_we0 : OUT STD_LOGIC;
        fwork_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fwork_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fwork_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
        fwork_ce1 : OUT STD_LOGIC;
        fwork_q1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dense_output_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        dense_output_array_ce0 : OUT STD_LOGIC;
        dense_output_array_we0 : OUT STD_LOGIC;
        dense_output_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        dense_output_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        dense_output_numel : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component k2c_dense2_1 IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        output_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        output_array_ce0 : OUT STD_LOGIC;
        output_array_we0 : OUT STD_LOGIC;
        output_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        output_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        output_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
        input_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        input_array_ce0 : OUT STD_LOGIC;
        input_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        input_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
        input_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
        input_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        input_shape_ce0 : OUT STD_LOGIC;
        input_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        bias_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        bias_array_ce0 : OUT STD_LOGIC;
        bias_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        bias_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
        fwork_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        fwork_ce0 : OUT STD_LOGIC;
        fwork_we0 : OUT STD_LOGIC;
        fwork_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fwork_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fwork_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        fwork_ce1 : OUT STD_LOGIC;
        fwork_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component generic_tanh_float_s IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        t_in : IN STD_LOGIC_VECTOR (31 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component k2c_batch_norm IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        outputs_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        outputs_array_ce0 : OUT STD_LOGIC;
        outputs_array_we0 : OUT STD_LOGIC;
        outputs_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        inputs_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        inputs_array_ce0 : OUT STD_LOGIC;
        inputs_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        inputs_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
        mean_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        mean_array_ce0 : OUT STD_LOGIC;
        mean_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        stdev_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        stdev_array_ce0 : OUT STD_LOGIC;
        stdev_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        gamma_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        gamma_array_ce0 : OUT STD_LOGIC;
        gamma_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        beta_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        beta_array_ce0 : OUT STD_LOGIC;
        beta_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_crcU IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (1 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_cfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_cmb6 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_cudo IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        opcode : IN STD_LOGIC_VECTOR (4 downto 0);
        dout : OUT STD_LOGIC_VECTOR (0 downto 0) );
    end component;


    component face_classifier_c8jQ IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_cEe0 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_cFfa IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_cHfu IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_cIfE IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_cJfO IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_cKfY IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_cLf8 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_cOgC IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_classifier_cXh4 IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (11 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (31 downto 0);
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_c2iS IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        address1 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce1 : IN STD_LOGIC;
        we1 : IN STD_LOGIC;
        d1 : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_classifier_c4jc IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_c5jm IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_c6jw IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (10 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_c7jG IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (31 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        address1 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce1 : IN STD_LOGIC;
        q1 : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    face_classifier_c_de_U : component face_classifier_cEe0
    generic map (
        DataWidth => 32,
        AddressRange => 262200,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => face_classifier_c_de_address0,
        ce0 => face_classifier_c_de_ce0,
        q0 => face_classifier_c_de_q0);

    dense_output_array_U : component face_classifier_cFfa
    generic map (
        DataWidth => 32,
        AddressRange => 2622,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_output_array_address0,
        ce0 => dense_output_array_ce0,
        we0 => dense_output_array_we0,
        d0 => dense_output_array_d0,
        q0 => dense_output_array_q0,
        address1 => dense_output_array_address1,
        ce1 => dense_output_array_ce1,
        we1 => dense_output_array_we1,
        d1 => ap_const_lv32_0);

    batch_normalization_1_U : component face_classifier_cFfa
    generic map (
        DataWidth => 32,
        AddressRange => 2622,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => batch_normalization_1_address0,
        ce0 => batch_normalization_1_ce0,
        we0 => batch_normalization_1_we0,
        d0 => batch_normalization_1_d0,
        q0 => batch_normalization_1_q0,
        address1 => batch_normalization_1_address1,
        ce1 => batch_normalization_1_ce1,
        we1 => batch_normalization_1_we1,
        d1 => batch_normalization_1_d1);

    batch_normalization_9_U : component face_classifier_cHfu
    generic map (
        DataWidth => 32,
        AddressRange => 2622,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_k2c_batch_norm_fu_2428_mean_array_address0,
        ce0 => batch_normalization_9_ce0,
        q0 => batch_normalization_9_q0);

    batch_normalization_s_U : component face_classifier_cIfE
    generic map (
        DataWidth => 32,
        AddressRange => 2622,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_k2c_batch_norm_fu_2428_stdev_array_address0,
        ce0 => batch_normalization_s_ce0,
        q0 => batch_normalization_s_q0);

    batch_normalization_10_U : component face_classifier_cJfO
    generic map (
        DataWidth => 32,
        AddressRange => 2622,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_k2c_batch_norm_fu_2428_gamma_array_address0,
        ce0 => batch_normalization_10_ce0,
        q0 => batch_normalization_10_q0);

    batch_normalization_11_U : component face_classifier_cKfY
    generic map (
        DataWidth => 32,
        AddressRange => 2622,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => grp_k2c_batch_norm_fu_2428_beta_array_address0,
        ce0 => batch_normalization_11_ce0,
        q0 => batch_normalization_11_q0);

    activation_1_output_s_U : component face_classifier_cLf8
    generic map (
        DataWidth => 32,
        AddressRange => 2622,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => activation_1_output_s_address0,
        ce0 => activation_1_output_s_ce0,
        we0 => activation_1_output_s_we0,
        d0 => batch_normalization_1_q0,
        q0 => activation_1_output_s_q0);

    dropout_2_output_arr_U : component face_classifier_cLf8
    generic map (
        DataWidth => 32,
        AddressRange => 2622,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dropout_2_output_arr_address0,
        ce0 => dropout_2_output_arr_ce0,
        we0 => dropout_2_output_arr_we0,
        d0 => activation_1_output_s_q0,
        q0 => dropout_2_output_arr_q0);

    dense_1_output_array_U : component face_classifier_cFfa
    generic map (
        DataWidth => 32,
        AddressRange => 2622,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_output_array_address0,
        ce0 => dense_1_output_array_ce0,
        we0 => dense_1_output_array_we0,
        d0 => dense_1_output_array_d0,
        q0 => dense_1_output_array_q0,
        address1 => dense_1_output_array_address1,
        ce1 => dense_1_output_array_ce1,
        we1 => dense_1_output_array_we1,
        d1 => ap_const_lv32_0);

    dropout_2_output_sha_U : component face_classifier_cOgC
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dropout_2_output_sha_address0,
        ce0 => dropout_2_output_sha_ce0,
        we0 => dropout_2_output_sha_we0,
        d0 => dropout_2_output_sha_d0,
        q0 => dropout_2_output_sha_q0,
        address1 => dropout_2_output_sha_address1,
        ce1 => dropout_2_output_sha_ce1,
        we1 => dropout_2_output_sha_we1,
        d1 => ap_const_lv64_1);

    dense_1_bias_array_U : component face_classifier_cFfa
    generic map (
        DataWidth => 32,
        AddressRange => 2622,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_bias_array_address0,
        ce0 => dense_1_bias_array_ce0,
        we0 => dense_1_bias_array_we0,
        d0 => dense_1_bias_array_d0,
        q0 => dense_1_bias_array_q0,
        address1 => dense_1_bias_array_address1,
        ce1 => dense_1_bias_array_ce1,
        we1 => dense_1_bias_array_we1,
        d1 => dense_1_bias_array_d1);

    batch_normalization_7_U : component face_classifier_cFfa
    generic map (
        DataWidth => 32,
        AddressRange => 2622,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => batch_normalization_7_address0,
        ce0 => batch_normalization_7_ce0,
        we0 => batch_normalization_7_we0,
        d0 => batch_normalization_7_d0,
        q0 => batch_normalization_7_q0,
        address1 => batch_normalization_7_address1,
        ce1 => batch_normalization_7_ce1,
        we1 => batch_normalization_7_we1,
        d1 => batch_normalization_7_d1);

    batch_normalization_6_U : component face_classifier_cFfa
    generic map (
        DataWidth => 32,
        AddressRange => 2622,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => batch_normalization_6_address0,
        ce0 => batch_normalization_6_ce0,
        we0 => batch_normalization_6_we0,
        d0 => batch_normalization_6_d0,
        q0 => batch_normalization_6_q0,
        address1 => batch_normalization_6_address1,
        ce1 => batch_normalization_6_ce1,
        we1 => batch_normalization_6_we1,
        d1 => batch_normalization_6_d1);

    batch_normalization_13_U : component face_classifier_cFfa
    generic map (
        DataWidth => 32,
        AddressRange => 2622,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => batch_normalization_13_address0,
        ce0 => batch_normalization_13_ce0,
        we0 => batch_normalization_13_we0,
        d0 => batch_normalization_13_d0,
        q0 => batch_normalization_13_q0,
        address1 => batch_normalization_13_address1,
        ce1 => batch_normalization_13_ce1,
        we1 => batch_normalization_13_we1,
        d1 => batch_normalization_13_d1);

    batch_normalization_5_U : component face_classifier_cFfa
    generic map (
        DataWidth => 32,
        AddressRange => 2622,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => batch_normalization_5_address0,
        ce0 => batch_normalization_5_ce0,
        we0 => batch_normalization_5_we0,
        d0 => batch_normalization_5_d0,
        q0 => batch_normalization_5_q0,
        address1 => batch_normalization_5_address1,
        ce1 => batch_normalization_5_ce1,
        we1 => batch_normalization_5_we1,
        d1 => batch_normalization_5_d1);

    batch_normalization_4_U : component face_classifier_cFfa
    generic map (
        DataWidth => 32,
        AddressRange => 2622,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => batch_normalization_4_address0,
        ce0 => batch_normalization_4_ce0,
        we0 => batch_normalization_4_we0,
        d0 => batch_normalization_4_d0,
        q0 => batch_normalization_4_q0,
        address1 => batch_normalization_4_address1,
        ce1 => batch_normalization_4_ce1,
        we1 => batch_normalization_4_we1,
        d1 => batch_normalization_4_d1);

    activation_2_output_s_U : component face_classifier_cLf8
    generic map (
        DataWidth => 32,
        AddressRange => 2622,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => activation_2_output_s_address0,
        ce0 => activation_2_output_s_ce0,
        we0 => activation_2_output_s_we0,
        d0 => batch_normalization_7_q0,
        q0 => activation_2_output_s_q0);

    dropout_3_output_arr_U : component face_classifier_cLf8
    generic map (
        DataWidth => 32,
        AddressRange => 2622,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dropout_3_output_arr_address0,
        ce0 => dropout_3_output_arr_ce0,
        we0 => dropout_3_output_arr_we0,
        d0 => activation_2_output_s_q0,
        q0 => dropout_3_output_arr_q0);

    dense_2_output_array_U : component face_classifier_cXh4
    generic map (
        DataWidth => 32,
        AddressRange => 2622,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_2_output_array_address0,
        ce0 => dense_2_output_array_ce0,
        we0 => dense_2_output_array_we0,
        d0 => dense_2_output_array_d0,
        q0 => dense_2_output_array_q0,
        address1 => dense_2_output_array_address1,
        ce1 => dense_2_output_array_ce1,
        we1 => dense_2_output_array_we1,
        d1 => dense_2_output_array_d1,
        q1 => dense_2_output_array_q1);

    dropout_3_output_sha_U : component face_classifier_cOgC
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dropout_3_output_sha_address0,
        ce0 => dropout_3_output_sha_ce0,
        we0 => dropout_3_output_sha_we0,
        d0 => dropout_3_output_sha_d0,
        q0 => dropout_3_output_sha_q0,
        address1 => dropout_3_output_sha_address1,
        ce1 => dropout_3_output_sha_ce1,
        we1 => dropout_3_output_sha_we1,
        d1 => ap_const_lv64_1);

    dense_2_kernel_array_U : component face_classifier_cFfa
    generic map (
        DataWidth => 32,
        AddressRange => 2622,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_2_kernel_array_address0,
        ce0 => dense_2_kernel_array_ce0,
        we0 => dense_2_kernel_array_we0,
        d0 => dense_2_kernel_array_d0,
        q0 => dense_2_kernel_array_q0,
        address1 => dense_2_kernel_array_address1,
        ce1 => dense_2_kernel_array_ce1,
        we1 => dense_2_kernel_array_we1,
        d1 => dense_2_kernel_array_d1);

    dense_2_kernel_shape_U : component face_classifier_cOgC
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_2_kernel_shape_address0,
        ce0 => dense_2_kernel_shape_ce0,
        we0 => dense_2_kernel_shape_we0,
        d0 => dense_2_kernel_shape_d0,
        q0 => dense_2_kernel_shape_q0,
        address1 => dense_2_kernel_shape_address1,
        ce1 => dense_2_kernel_shape_ce1,
        we1 => dense_2_kernel_shape_we1,
        d1 => ap_const_lv64_1);

    dense_2_bias_array_U : component face_classifier_cFfa
    generic map (
        DataWidth => 32,
        AddressRange => 2622,
        AddressWidth => 12)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_2_bias_array_address0,
        ce0 => dense_2_bias_array_ce0,
        we0 => dense_2_bias_array_we0,
        d0 => dense_2_bias_array_d0,
        q0 => dense_2_bias_array_q0,
        address1 => dense_2_bias_array_address1,
        ce1 => dense_2_bias_array_ce1,
        we1 => dense_2_bias_array_we1,
        d1 => dense_2_bias_array_d1);

    dense_output_shape_U : component face_classifier_c2iS
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_output_shape_address0,
        ce0 => dense_output_shape_ce0,
        we0 => dense_output_shape_we0,
        d0 => dense_output_shape_d0,
        address1 => dense_output_shape_address1,
        ce1 => dense_output_shape_ce1,
        we1 => dense_output_shape_we1,
        d1 => ap_const_lv64_1);

    dense_1_output_shape_U : component face_classifier_c2iS
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_output_shape_address0,
        ce0 => dense_1_output_shape_ce0,
        we0 => dense_1_output_shape_we0,
        d0 => dense_1_output_shape_d0,
        address1 => dense_1_output_shape_address1,
        ce1 => dense_1_output_shape_ce1,
        we1 => dense_1_output_shape_we1,
        d1 => ap_const_lv64_1);

    dense_kernel_array_U : component face_classifier_c4jc
    generic map (
        DataWidth => 32,
        AddressRange => 262200,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_kernel_array_address0,
        ce0 => dense_kernel_array_ce0,
        we0 => dense_kernel_array_we0,
        d0 => face_classifier_c_de_q0,
        q0 => dense_kernel_array_q0);

    dense_fwork_U : component face_classifier_c5jm
    generic map (
        DataWidth => 32,
        AddressRange => 264822,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_fwork_address0,
        ce0 => dense_fwork_ce0,
        we0 => dense_fwork_we0,
        d0 => dense_fwork_d0,
        q0 => dense_fwork_q0,
        address1 => grp_k2c_dense_fu_2374_fwork_address1,
        ce1 => dense_fwork_ce1,
        q1 => dense_fwork_q1);

    dense_1_fwork_U : component face_classifier_c6jw
    generic map (
        DataWidth => 32,
        AddressRange => 1100,
        AddressWidth => 11)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_1_fwork_address0,
        ce0 => dense_1_fwork_ce0,
        we0 => dense_1_fwork_we0,
        d0 => dense_1_fwork_d0,
        q0 => dense_1_fwork_q0,
        address1 => grp_k2c_dense2_1_fu_2394_fwork_address1,
        ce1 => dense_1_fwork_ce1,
        q1 => dense_1_fwork_q1);

    dense_2_fwork_U : component face_classifier_c7jG
    generic map (
        DataWidth => 32,
        AddressRange => 70,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => dense_2_fwork_address0,
        ce0 => dense_2_fwork_ce0,
        we0 => dense_2_fwork_we0,
        d0 => dense_2_fwork_d0,
        q0 => dense_2_fwork_q0,
        address1 => grp_k2c_dense2_fu_2351_fwork_address1,
        ce1 => dense_2_fwork_ce1,
        q1 => dense_2_fwork_q1);

    grp_k2c_dense2_fu_2351 : component k2c_dense2
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_dense2_fu_2351_ap_start,
        ap_done => grp_k2c_dense2_fu_2351_ap_done,
        ap_idle => grp_k2c_dense2_fu_2351_ap_idle,
        ap_ready => grp_k2c_dense2_fu_2351_ap_ready,
        output_array_address0 => grp_k2c_dense2_fu_2351_output_array_address0,
        output_array_ce0 => grp_k2c_dense2_fu_2351_output_array_ce0,
        output_array_we0 => grp_k2c_dense2_fu_2351_output_array_we0,
        output_array_d0 => grp_k2c_dense2_fu_2351_output_array_d0,
        output_array_q0 => dense_2_output_array_q0,
        output_numel_read => reg_2501,
        input_array_address0 => grp_k2c_dense2_fu_2351_input_array_address0,
        input_array_ce0 => grp_k2c_dense2_fu_2351_input_array_ce0,
        input_array_q0 => dropout_3_output_arr_q0,
        input_ndim_read => batch_normalization_23_reg_3105,
        input_numel_read => batch_normalization_20_reg_3083,
        input_shape_address0 => grp_k2c_dense2_fu_2351_input_shape_address0,
        input_shape_ce0 => grp_k2c_dense2_fu_2351_input_shape_ce0,
        input_shape_q0 => dropout_3_output_sha_q0,
        kernel_array_address0 => grp_k2c_dense2_fu_2351_kernel_array_address0,
        kernel_array_ce0 => grp_k2c_dense2_fu_2351_kernel_array_ce0,
        kernel_array_q0 => dense_2_kernel_array_q0,
        kernel_ndim_read => dense_2_kernel_ndim,
        kernel_numel_read => dense_2_kernel_numel,
        kernel_shape_address0 => grp_k2c_dense2_fu_2351_kernel_shape_address0,
        kernel_shape_ce0 => grp_k2c_dense2_fu_2351_kernel_shape_ce0,
        kernel_shape_q0 => dense_2_kernel_shape_q0,
        bias_array_address0 => grp_k2c_dense2_fu_2351_bias_array_address0,
        bias_array_ce0 => grp_k2c_dense2_fu_2351_bias_array_ce0,
        bias_array_q0 => dense_2_bias_array_q0,
        bias_numel_read => dense_2_bias_numel,
        fwork_address0 => grp_k2c_dense2_fu_2351_fwork_address0,
        fwork_ce0 => grp_k2c_dense2_fu_2351_fwork_ce0,
        fwork_we0 => grp_k2c_dense2_fu_2351_fwork_we0,
        fwork_d0 => grp_k2c_dense2_fu_2351_fwork_d0,
        fwork_q0 => dense_2_fwork_q0,
        fwork_address1 => grp_k2c_dense2_fu_2351_fwork_address1,
        fwork_ce1 => grp_k2c_dense2_fu_2351_fwork_ce1,
        fwork_q1 => dense_2_fwork_q1);

    grp_k2c_dense_fu_2374 : component k2c_dense
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_dense_fu_2374_ap_start,
        ap_done => grp_k2c_dense_fu_2374_ap_done,
        ap_idle => grp_k2c_dense_fu_2374_ap_idle,
        ap_ready => grp_k2c_dense_fu_2374_ap_ready,
        input_array_address0 => grp_k2c_dense_fu_2374_input_array_address0,
        input_array_ce0 => grp_k2c_dense_fu_2374_input_array_ce0,
        input_array_q0 => dense_input_input_array_q0,
        input_ndim_read => dense_input_input_ndim,
        input_numel_read => dense_input_input_numel,
        input_shape_address0 => grp_k2c_dense_fu_2374_input_shape_address0,
        input_shape_ce0 => grp_k2c_dense_fu_2374_input_shape_ce0,
        input_shape_q0 => dense_input_input_shape_q0,
        kernel_array_address0 => grp_k2c_dense_fu_2374_kernel_array_address0,
        kernel_array_ce0 => grp_k2c_dense_fu_2374_kernel_array_ce0,
        kernel_array_q0 => dense_kernel_array_q0,
        fwork_address0 => grp_k2c_dense_fu_2374_fwork_address0,
        fwork_ce0 => grp_k2c_dense_fu_2374_fwork_ce0,
        fwork_we0 => grp_k2c_dense_fu_2374_fwork_we0,
        fwork_d0 => grp_k2c_dense_fu_2374_fwork_d0,
        fwork_q0 => dense_fwork_q0,
        fwork_address1 => grp_k2c_dense_fu_2374_fwork_address1,
        fwork_ce1 => grp_k2c_dense_fu_2374_fwork_ce1,
        fwork_q1 => dense_fwork_q1,
        dense_output_array_address0 => grp_k2c_dense_fu_2374_dense_output_array_address0,
        dense_output_array_ce0 => grp_k2c_dense_fu_2374_dense_output_array_ce0,
        dense_output_array_we0 => grp_k2c_dense_fu_2374_dense_output_array_we0,
        dense_output_array_d0 => grp_k2c_dense_fu_2374_dense_output_array_d0,
        dense_output_array_q0 => dense_output_array_q0,
        dense_output_numel => dense_output_numel);

    grp_k2c_dense2_1_fu_2394 : component k2c_dense2_1
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_dense2_1_fu_2394_ap_start,
        ap_done => grp_k2c_dense2_1_fu_2394_ap_done,
        ap_idle => grp_k2c_dense2_1_fu_2394_ap_idle,
        ap_ready => grp_k2c_dense2_1_fu_2394_ap_ready,
        output_array_address0 => grp_k2c_dense2_1_fu_2394_output_array_address0,
        output_array_ce0 => grp_k2c_dense2_1_fu_2394_output_array_ce0,
        output_array_we0 => grp_k2c_dense2_1_fu_2394_output_array_we0,
        output_array_d0 => grp_k2c_dense2_1_fu_2394_output_array_d0,
        output_array_q0 => dense_1_output_array_q0,
        output_numel_read => reg_2495,
        input_array_address0 => grp_k2c_dense2_1_fu_2394_input_array_address0,
        input_array_ce0 => grp_k2c_dense2_1_fu_2394_input_array_ce0,
        input_array_q0 => dropout_2_output_arr_q0,
        input_ndim_read => batch_normalization_17_reg_3032,
        input_numel_read => batch_normalization_14_reg_3010,
        input_shape_address0 => grp_k2c_dense2_1_fu_2394_input_shape_address0,
        input_shape_ce0 => grp_k2c_dense2_1_fu_2394_input_shape_ce0,
        input_shape_q0 => dropout_2_output_sha_q0,
        bias_array_address0 => grp_k2c_dense2_1_fu_2394_bias_array_address0,
        bias_array_ce0 => grp_k2c_dense2_1_fu_2394_bias_array_ce0,
        bias_array_q0 => dense_1_bias_array_q0,
        bias_numel_read => dense_1_bias_numel,
        fwork_address0 => grp_k2c_dense2_1_fu_2394_fwork_address0,
        fwork_ce0 => grp_k2c_dense2_1_fu_2394_fwork_ce0,
        fwork_we0 => grp_k2c_dense2_1_fu_2394_fwork_we0,
        fwork_d0 => grp_k2c_dense2_1_fu_2394_fwork_d0,
        fwork_q0 => dense_1_fwork_q0,
        fwork_address1 => grp_k2c_dense2_1_fu_2394_fwork_address1,
        fwork_ce1 => grp_k2c_dense2_1_fu_2394_fwork_ce1,
        fwork_q1 => dense_1_fwork_q1);

    grp_generic_tanh_float_s_fu_2415 : component generic_tanh_float_s
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_generic_tanh_float_s_fu_2415_ap_start,
        ap_done => grp_generic_tanh_float_s_fu_2415_ap_done,
        ap_idle => grp_generic_tanh_float_s_fu_2415_ap_idle,
        ap_ready => grp_generic_tanh_float_s_fu_2415_ap_ready,
        t_in => grp_generic_tanh_float_s_fu_2415_t_in,
        ap_return => grp_generic_tanh_float_s_fu_2415_ap_return);

    grp_k2c_batch_norm_fu_2428 : component k2c_batch_norm
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_batch_norm_fu_2428_ap_start,
        ap_done => grp_k2c_batch_norm_fu_2428_ap_done,
        ap_idle => grp_k2c_batch_norm_fu_2428_ap_idle,
        ap_ready => grp_k2c_batch_norm_fu_2428_ap_ready,
        outputs_array_address0 => grp_k2c_batch_norm_fu_2428_outputs_array_address0,
        outputs_array_ce0 => grp_k2c_batch_norm_fu_2428_outputs_array_ce0,
        outputs_array_we0 => grp_k2c_batch_norm_fu_2428_outputs_array_we0,
        outputs_array_d0 => grp_k2c_batch_norm_fu_2428_outputs_array_d0,
        inputs_array_address0 => grp_k2c_batch_norm_fu_2428_inputs_array_address0,
        inputs_array_ce0 => grp_k2c_batch_norm_fu_2428_inputs_array_ce0,
        inputs_array_q0 => grp_k2c_batch_norm_fu_2428_inputs_array_q0,
        inputs_numel_read => grp_k2c_batch_norm_fu_2428_inputs_numel_read,
        mean_array_address0 => grp_k2c_batch_norm_fu_2428_mean_array_address0,
        mean_array_ce0 => grp_k2c_batch_norm_fu_2428_mean_array_ce0,
        mean_array_q0 => grp_k2c_batch_norm_fu_2428_mean_array_q0,
        stdev_array_address0 => grp_k2c_batch_norm_fu_2428_stdev_array_address0,
        stdev_array_ce0 => grp_k2c_batch_norm_fu_2428_stdev_array_ce0,
        stdev_array_q0 => grp_k2c_batch_norm_fu_2428_stdev_array_q0,
        gamma_array_address0 => grp_k2c_batch_norm_fu_2428_gamma_array_address0,
        gamma_array_ce0 => grp_k2c_batch_norm_fu_2428_gamma_array_ce0,
        gamma_array_q0 => grp_k2c_batch_norm_fu_2428_gamma_array_q0,
        beta_array_address0 => grp_k2c_batch_norm_fu_2428_beta_array_address0,
        beta_array_ce0 => grp_k2c_batch_norm_fu_2428_beta_array_ce0,
        beta_array_q0 => grp_k2c_batch_norm_fu_2428_beta_array_q0);

    face_classifier_crcU_U151 : component face_classifier_crcU
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2451_p0,
        din1 => grp_fu_2451_p1,
        opcode => grp_fu_2451_opcode,
        ce => ap_const_logic_1,
        dout => grp_fu_2451_p2);

    face_classifier_cfYi_U152 : component face_classifier_cfYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2457_p0,
        din1 => sum_1_reg_3215,
        ce => ap_const_logic_1,
        dout => grp_fu_2457_p2);

    face_classifier_cfYi_U153 : component face_classifier_cfYi
    generic map (
        ID => 1,
        NUM_STAGE => 3,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => grp_fu_2461_p0,
        din1 => sum_1_reg_3215,
        ce => ap_const_logic_1,
        dout => grp_fu_2461_p2);

    face_classifier_cmb6_U154 : component face_classifier_cmb6
    generic map (
        ID => 1,
        NUM_STAGE => 10,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_3F800000,
        din1 => sum_reg_2328,
        ce => ap_const_logic_1,
        dout => grp_fu_2465_p2);

    face_classifier_cudo_U155 : component face_classifier_cudo
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 1)
    port map (
        din0 => dense_2_output_array_q1,
        din1 => xmax1_reg_2307,
        opcode => ap_const_lv5_2,
        dout => tmp_22_fu_2471_p2);

    face_classifier_c8jQ_U156 : component face_classifier_c8jQ
    generic map (
        ID => 1,
        NUM_STAGE => 8,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => ap_const_lv32_0,
        din1 => tmp_87_reg_3200,
        ce => ap_const_logic_1,
        dout => grp_fu_2477_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state163) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state162)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state163))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state163);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state162)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state166) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state165)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then
                    if ((ap_const_logic_1 = ap_condition_pp1_exit_iter0_state166)) then 
                        ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state166);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter2 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then 
                    ap_enable_reg_pp1_iter2 <= ap_enable_reg_pp1_iter1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter3_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter3 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then 
                    ap_enable_reg_pp1_iter3 <= ap_enable_reg_pp1_iter2;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter4_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
            else
                if ((((ap_const_boolean_0 = ap_block_pp1_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3)) or ((ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2)))) then 
                    ap_enable_reg_pp1_iter4 <= ap_enable_reg_pp1_iter3;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state165)) then 
                    ap_enable_reg_pp1_iter4 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_generic_tanh_float_s_fu_2415_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_generic_tanh_float_s_fu_2415_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state152) or (ap_const_logic_1 = ap_CS_fsm_state139))) then 
                    grp_generic_tanh_float_s_fu_2415_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_generic_tanh_float_s_fu_2415_ap_ready = ap_const_logic_1)) then 
                    grp_generic_tanh_float_s_fu_2415_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_k2c_batch_norm_fu_2428_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_batch_norm_fu_2428_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state135) or (ap_const_logic_1 = ap_CS_fsm_state148))) then 
                    grp_k2c_batch_norm_fu_2428_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_batch_norm_fu_2428_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_batch_norm_fu_2428_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_k2c_dense2_1_fu_2394_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_dense2_1_fu_2394_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_74_fu_2713_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state145))) then 
                    grp_k2c_dense2_1_fu_2394_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_dense2_1_fu_2394_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_dense2_1_fu_2394_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_k2c_dense2_fu_2351_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_dense2_fu_2351_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_81_fu_2774_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state158))) then 
                    grp_k2c_dense2_fu_2351_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_dense2_fu_2351_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_dense2_fu_2351_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_k2c_dense_fu_2374_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_dense_fu_2374_ap_start_reg <= ap_const_logic_0;
            else
                if (((tmp_69_fu_2657_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state133))) then 
                    grp_k2c_dense_fu_2374_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_dense_fu_2374_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_dense_fu_2374_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_1_reg_2263_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state153) and (grp_generic_tanh_float_s_fu_2415_ap_done = ap_const_logic_1))) then 
                i_1_reg_2263 <= i_37_reg_3094;
            elsif (((grp_k2c_batch_norm_fu_2428_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state149))) then 
                i_1_reg_2263 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    i_2_reg_2296_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_fu_2800_p2 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_2_reg_2296 <= i_38_fu_2811_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state162)) then 
                i_2_reg_2296 <= ap_const_lv3_1;
            end if; 
        end if;
    end process;

    i_3_reg_2317_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state165)) then 
                i_3_reg_2317 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (tmp_84_reg_3185 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_3_reg_2317 <= i_39_reg_3189;
            end if; 
        end if;
    end process;

    i_reg_2230_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state140) and (grp_generic_tanh_float_s_fu_2415_ap_done = ap_const_logic_1))) then 
                i_reg_2230 <= i_36_reg_3021;
            elsif (((grp_k2c_batch_norm_fu_2428_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state136))) then 
                i_reg_2230 <= ap_const_lv12_0;
            end if; 
        end if;
    end process;

    invdar1_reg_2208_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
                invdar1_reg_2208 <= ap_const_lv11_0;
            elsif (((tmp_67_fu_2598_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state103))) then 
                invdar1_reg_2208 <= indvarinc1_fu_2587_p2;
            end if; 
        end if;
    end process;

    invdar2_reg_2219_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
                invdar2_reg_2219 <= ap_const_lv7_0;
            elsif (((tmp_69_fu_2657_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state133))) then 
                invdar2_reg_2219 <= indvarinc2_fu_2646_p2;
            end if; 
        end if;
    end process;

    invdar_reg_2197_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_59_reg_2977 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                invdar_reg_2197 <= ap_const_lv19_0;
            elsif (((tmp_65_fu_2557_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state53))) then 
                invdar_reg_2197 <= indvarinc_fu_2546_p2;
            end if; 
        end if;
    end process;

    j_1_reg_2274_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_2738_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state150))) then 
                j_1_reg_2274 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state155)) then 
                j_1_reg_2274 <= j_reg_3123;
            end if; 
        end if;
    end process;

    j_2_reg_2285_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state157)) then 
                j_2_reg_2285 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state159)) then 
                j_2_reg_2285 <= j_3_reg_3141;
            end if; 
        end if;
    end process;

    j_4_reg_2340_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state200)) then 
                j_4_reg_2340 <= ap_const_lv32_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state202)) then 
                j_4_reg_2340 <= j_5_reg_3254;
            end if; 
        end if;
    end process;

    j_8_reg_2252_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state144)) then 
                j_8_reg_2252 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state146)) then 
                j_8_reg_2252 <= j_9_reg_3068;
            end if; 
        end if;
    end process;

    j_s_reg_2241_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_2677_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state137))) then 
                j_s_reg_2241 <= ap_const_lv12_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state142)) then 
                j_s_reg_2241 <= j_7_reg_3050;
            end if; 
        end if;
    end process;

    sum_reg_2328_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state165)) then 
                sum_reg_2328 <= ap_const_lv32_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage2_11001) and (tmp_84_reg_3185_pp1_iter4_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then 
                sum_reg_2328 <= grp_fu_2451_p2;
            end if; 
        end if;
    end process;

    tmp_s_reg_2186_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
                tmp_s_reg_2186 <= ap_const_lv19_0;
            elsif (((tmp_59_reg_2977 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state52))) then 
                tmp_s_reg_2186 <= tmp_57_reg_2962;
            end if; 
        end if;
    end process;

    xmax1_reg_2307_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond1_reg_3166 = ap_const_lv1_0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                xmax1_reg_2307 <= xmax_1_fu_2901_p3;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state162)) then 
                xmax1_reg_2307 <= dense_2_output_array_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_67_fu_2598_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state103))) then
                batch_normalization_12(1) <= '1';
    batch_normalization_12(3) <= '1';
                batch_normalization_8(0) <= '1';
                dense_2_bias_numel(1) <= '1';
    dense_2_bias_numel(2) <= '1';
                dense_2_kernel_ndim(1) <= '1';
                dense_2_kernel_numel(2) <= '1';
    dense_2_kernel_numel(3) <= '1';
    dense_2_kernel_numel(4) <= '1';
    dense_2_kernel_numel(5) <= '1';
                dense_2_output_ndim <= ap_const_lv1_1;
                dense_2_output_numel(1) <= '1';
    dense_2_output_numel(2) <= '1';
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_k2c_batch_norm_fu_2428_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state136))) then
                    batch_normalization_14_reg_3010(2) <= batch_normalization_3(2);    batch_normalization_14_reg_3010(6 downto 5) <= batch_normalization_3(6 downto 5);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_2677_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state137))) then
                batch_normalization_15_reg_3026 <= i_cast_fu_2672_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state138)) then
                batch_normalization_16_reg_3037 <= batch_normalization_1_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond2_fu_2677_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state137))) then
                    batch_normalization_17_reg_3032(0) <= batch_normalization_2(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_65_fu_2557_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                batch_normalization_2(0) <= '1';
                batch_normalization_3(2) <= '1';
    batch_normalization_3(5) <= '1';
    batch_normalization_3(6) <= '1';
                dense_1_bias_numel(1) <= '1';
    dense_1_bias_numel(3) <= '1';
                dense_1_output_numel(1) <= '1';
    dense_1_output_numel(3) <= '1';
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((grp_k2c_batch_norm_fu_2428_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state149))) then
                    batch_normalization_20_reg_3083(1) <= batch_normalization_12(1);    batch_normalization_20_reg_3083(3) <= batch_normalization_12(3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_2738_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state150))) then
                batch_normalization_21_reg_3099 <= i_1_cast_fu_2733_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state151)) then
                batch_normalization_22_reg_3110 <= batch_normalization_7_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_2738_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state150))) then
                    batch_normalization_23_reg_3105(0) <= batch_normalization_8(0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (tmp_84_fu_2909_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    dense_2_output_array_2_reg_3194(2 downto 0) <= i_3_cast3_fu_2921_p1(12 - 1 downto 0)(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    dense_2_output_array_2_reg_3194_pp1_iter1_reg(2 downto 0) <= dense_2_output_array_2_reg_3194(2 downto 0);
                    dense_2_output_array_2_reg_3194_pp1_iter2_reg(2 downto 0) <= dense_2_output_array_2_reg_3194_pp1_iter1_reg(2 downto 0);
                    dense_2_output_array_2_reg_3194_pp1_iter3_reg(2 downto 0) <= dense_2_output_array_2_reg_3194_pp1_iter2_reg(2 downto 0);
                tmp_84_reg_3185 <= tmp_84_fu_2909_p2;
                tmp_84_reg_3185_pp1_iter1_reg <= tmp_84_reg_3185;
                tmp_84_reg_3185_pp1_iter2_reg <= tmp_84_reg_3185_pp1_iter1_reg;
                tmp_84_reg_3185_pp1_iter3_reg <= tmp_84_reg_3185_pp1_iter2_reg;
                tmp_84_reg_3185_pp1_iter4_reg <= tmp_84_reg_3185_pp1_iter3_reg;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state194)) then
                dense_2_output_array_5_reg_3221 <= dense_2_output_array_q1;
                sum_1_reg_3215 <= grp_fu_2465_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state195)) then
                dense_2_output_array_6_reg_3226 <= dense_2_output_array_q0;
                dense_2_output_array_7_reg_3231 <= dense_2_output_array_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state196)) then
                dense_2_output_array_8_reg_3236 <= dense_2_output_array_q0;
                dense_2_output_array_9_reg_3241 <= dense_2_output_array_q1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                dense_output_numel(2) <= '1';
    dense_output_numel(5) <= '1';
    dense_output_numel(6) <= '1';
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond1_reg_3166 <= exitcond1_fu_2800_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state137)) then
                i_36_reg_3021 <= i_36_fu_2682_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state150)) then
                i_37_reg_3094 <= i_37_fu_2743_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                i_39_reg_3189 <= i_39_fu_2915_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state158)) then
                j_3_reg_3141 <= j_3_fu_2779_p2;
                    tmp_80_reg_3133(11 downto 0) <= tmp_80_fu_2769_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state201)) then
                j_5_reg_3254 <= j_5_fu_2946_p2;
                tmp_89_reg_3246 <= tmp_89_fu_2935_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state141)) then
                j_7_reg_3050 <= j_7_fu_2702_p2;
                    tmp_70_reg_3042(11 downto 0) <= tmp_70_fu_2692_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state145)) then
                j_9_reg_3068 <= j_9_fu_2718_p2;
                    tmp_73_reg_3060(11 downto 0) <= tmp_73_fu_2708_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state154)) then
                j_reg_3123 <= j_fu_2763_p2;
                    tmp_77_reg_3115(11 downto 0) <= tmp_77_fu_2753_p1(11 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state148) or ((tmp_74_fu_2713_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state145)))) then
                    reg_2495(1) <= dense_1_output_numel(1);    reg_2495(3) <= dense_1_output_numel(3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state200) or ((tmp_81_fu_2774_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state158)))) then
                    reg_2501(2 downto 1) <= dense_2_output_numel(2 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state194) or (ap_const_logic_1 = ap_CS_fsm_state162) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (tmp_84_reg_3185 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then
                reg_2506 <= dense_2_output_array_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state199) or (ap_const_logic_1 = ap_CS_fsm_state198) or (ap_const_logic_1 = ap_CS_fsm_state197))) then
                reg_2513 <= grp_fu_2457_p2;
                reg_2518 <= grp_fu_2461_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state51)) then
                tmp_57_reg_2962 <= tmp_57_fu_2529_p2;
                    tmp_58_reg_2967(18 downto 0) <= tmp_58_fu_2535_p1(18 downto 0);
                tmp_59_reg_2977 <= tmp_59_fu_2540_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (tmp_84_reg_3185_pp1_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                tmp_87_reg_3200 <= grp_fu_2451_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (tmp_84_reg_3185_pp1_iter3_reg = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then
                tmp_88_reg_3205 <= grp_fu_2477_p2;
            end if;
        end if;
    end process;
    dense_output_numel(1 downto 0) <= "00";
    dense_output_numel(4 downto 3) <= "00";
    dense_output_numel(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    batch_normalization_2(63 downto 1) <= "000000000000000000000000000000000000000000000000000000000000000";
    batch_normalization_3(1 downto 0) <= "00";
    batch_normalization_3(4 downto 3) <= "00";
    batch_normalization_3(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    dense_1_output_numel(0) <= '0';
    dense_1_output_numel(2 downto 2) <= "0";
    dense_1_output_numel(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    dense_1_bias_numel(0) <= '0';
    dense_1_bias_numel(2 downto 2) <= "0";
    dense_1_bias_numel(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    batch_normalization_8(63 downto 1) <= "000000000000000000000000000000000000000000000000000000000000000";
    batch_normalization_12(0) <= '0';
    batch_normalization_12(2 downto 2) <= "0";
    batch_normalization_12(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    dense_2_output_numel(0) <= '0';
    dense_2_output_numel(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    dense_2_kernel_ndim(0) <= '0';
    dense_2_kernel_ndim(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    dense_2_kernel_numel(1 downto 0) <= "00";
    dense_2_kernel_numel(63 downto 6) <= "0000000000000000000000000000000000000000000000000000000000";
    dense_2_bias_numel(0) <= '0';
    dense_2_bias_numel(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    reg_2495(0) <= '0';
    reg_2495(2 downto 2) <= "0";
    reg_2495(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    reg_2501(0) <= '0';
    reg_2501(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_58_reg_2967(63 downto 19) <= "000000000000000000000000000000000000000000000";
    batch_normalization_14_reg_3010(1 downto 0) <= "00";
    batch_normalization_14_reg_3010(4 downto 3) <= "00";
    batch_normalization_14_reg_3010(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    batch_normalization_17_reg_3032(63 downto 1) <= "000000000000000000000000000000000000000000000000000000000000000";
    tmp_70_reg_3042(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    tmp_73_reg_3060(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    batch_normalization_20_reg_3083(0) <= '0';
    batch_normalization_20_reg_3083(2 downto 2) <= "0";
    batch_normalization_20_reg_3083(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    batch_normalization_23_reg_3105(63 downto 1) <= "000000000000000000000000000000000000000000000000000000000000000";
    tmp_77_reg_3115(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    tmp_80_reg_3133(63 downto 12) <= "0000000000000000000000000000000000000000000000000000";
    dense_2_output_array_2_reg_3194(11 downto 3) <= "000000000";
    dense_2_output_array_2_reg_3194_pp1_iter1_reg(11 downto 3) <= "000000000";
    dense_2_output_array_2_reg_3194_pp1_iter2_reg(11 downto 3) <= "000000000";
    dense_2_output_array_2_reg_3194_pp1_iter3_reg(11 downto 3) <= "000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state145, tmp_74_fu_2713_p2, ap_CS_fsm_state158, tmp_81_fu_2774_p2, ap_enable_reg_pp1_iter0, tmp_59_reg_2977, ap_CS_fsm_state53, ap_CS_fsm_state103, ap_CS_fsm_state133, ap_CS_fsm_state136, grp_k2c_batch_norm_fu_2428_ap_done, ap_CS_fsm_state137, exitcond2_fu_2677_p2, ap_CS_fsm_state141, tmp_71_fu_2697_p2, ap_CS_fsm_state149, ap_CS_fsm_state150, exitcond_fu_2738_p2, ap_CS_fsm_state154, tmp_78_fu_2758_p2, exitcond1_fu_2800_p2, ap_enable_reg_pp0_iter0, tmp_84_fu_2909_p2, ap_enable_reg_pp1_iter1, ap_CS_fsm_pp1_stage2, ap_enable_reg_pp1_iter4, ap_CS_fsm_state201, tmp_90_fu_2940_p2, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp1_stage3_subdone, ap_block_pp1_stage2_subdone, ap_enable_reg_pp1_iter3, grp_k2c_dense2_fu_2351_ap_done, grp_k2c_dense_fu_2374_ap_done, grp_k2c_dense2_1_fu_2394_ap_done, grp_generic_tanh_float_s_fu_2415_ap_done, ap_CS_fsm_state52, tmp_65_fu_2557_p2, tmp_67_fu_2598_p2, tmp_69_fu_2657_p2, ap_CS_fsm_state140, ap_CS_fsm_state153, ap_CS_fsm_state160, ap_CS_fsm_state134, ap_CS_fsm_state147, ap_block_pp1_stage1_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                ap_NS_fsm <= ap_ST_fsm_state5;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                if (((tmp_59_reg_2977 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state52))) then
                    ap_NS_fsm <= ap_ST_fsm_state53;
                else
                    ap_NS_fsm <= ap_ST_fsm_state51;
                end if;
            when ap_ST_fsm_state53 => 
                if (((tmp_65_fu_2557_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53))) then
                    ap_NS_fsm <= ap_ST_fsm_state54;
                else
                    ap_NS_fsm <= ap_ST_fsm_state53;
                end if;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_state73;
            when ap_ST_fsm_state73 => 
                ap_NS_fsm <= ap_ST_fsm_state74;
            when ap_ST_fsm_state74 => 
                ap_NS_fsm <= ap_ST_fsm_state75;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_state76;
            when ap_ST_fsm_state76 => 
                ap_NS_fsm <= ap_ST_fsm_state77;
            when ap_ST_fsm_state77 => 
                ap_NS_fsm <= ap_ST_fsm_state78;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_state79;
            when ap_ST_fsm_state79 => 
                ap_NS_fsm <= ap_ST_fsm_state80;
            when ap_ST_fsm_state80 => 
                ap_NS_fsm <= ap_ST_fsm_state81;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_state82;
            when ap_ST_fsm_state82 => 
                ap_NS_fsm <= ap_ST_fsm_state83;
            when ap_ST_fsm_state83 => 
                ap_NS_fsm <= ap_ST_fsm_state84;
            when ap_ST_fsm_state84 => 
                ap_NS_fsm <= ap_ST_fsm_state85;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_state86;
            when ap_ST_fsm_state86 => 
                ap_NS_fsm <= ap_ST_fsm_state87;
            when ap_ST_fsm_state87 => 
                ap_NS_fsm <= ap_ST_fsm_state88;
            when ap_ST_fsm_state88 => 
                ap_NS_fsm <= ap_ST_fsm_state89;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                ap_NS_fsm <= ap_ST_fsm_state91;
            when ap_ST_fsm_state91 => 
                ap_NS_fsm <= ap_ST_fsm_state92;
            when ap_ST_fsm_state92 => 
                ap_NS_fsm <= ap_ST_fsm_state93;
            when ap_ST_fsm_state93 => 
                ap_NS_fsm <= ap_ST_fsm_state94;
            when ap_ST_fsm_state94 => 
                ap_NS_fsm <= ap_ST_fsm_state95;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                ap_NS_fsm <= ap_ST_fsm_state97;
            when ap_ST_fsm_state97 => 
                ap_NS_fsm <= ap_ST_fsm_state98;
            when ap_ST_fsm_state98 => 
                ap_NS_fsm <= ap_ST_fsm_state99;
            when ap_ST_fsm_state99 => 
                ap_NS_fsm <= ap_ST_fsm_state100;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                ap_NS_fsm <= ap_ST_fsm_state102;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                if (((tmp_67_fu_2598_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state103))) then
                    ap_NS_fsm <= ap_ST_fsm_state104;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when ap_ST_fsm_state104 => 
                ap_NS_fsm <= ap_ST_fsm_state105;
            when ap_ST_fsm_state105 => 
                ap_NS_fsm <= ap_ST_fsm_state106;
            when ap_ST_fsm_state106 => 
                ap_NS_fsm <= ap_ST_fsm_state107;
            when ap_ST_fsm_state107 => 
                ap_NS_fsm <= ap_ST_fsm_state108;
            when ap_ST_fsm_state108 => 
                ap_NS_fsm <= ap_ST_fsm_state109;
            when ap_ST_fsm_state109 => 
                ap_NS_fsm <= ap_ST_fsm_state110;
            when ap_ST_fsm_state110 => 
                ap_NS_fsm <= ap_ST_fsm_state111;
            when ap_ST_fsm_state111 => 
                ap_NS_fsm <= ap_ST_fsm_state112;
            when ap_ST_fsm_state112 => 
                ap_NS_fsm <= ap_ST_fsm_state113;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state114;
            when ap_ST_fsm_state114 => 
                ap_NS_fsm <= ap_ST_fsm_state115;
            when ap_ST_fsm_state115 => 
                ap_NS_fsm <= ap_ST_fsm_state116;
            when ap_ST_fsm_state116 => 
                ap_NS_fsm <= ap_ST_fsm_state117;
            when ap_ST_fsm_state117 => 
                ap_NS_fsm <= ap_ST_fsm_state118;
            when ap_ST_fsm_state118 => 
                ap_NS_fsm <= ap_ST_fsm_state119;
            when ap_ST_fsm_state119 => 
                ap_NS_fsm <= ap_ST_fsm_state120;
            when ap_ST_fsm_state120 => 
                ap_NS_fsm <= ap_ST_fsm_state121;
            when ap_ST_fsm_state121 => 
                ap_NS_fsm <= ap_ST_fsm_state122;
            when ap_ST_fsm_state122 => 
                ap_NS_fsm <= ap_ST_fsm_state123;
            when ap_ST_fsm_state123 => 
                ap_NS_fsm <= ap_ST_fsm_state124;
            when ap_ST_fsm_state124 => 
                ap_NS_fsm <= ap_ST_fsm_state125;
            when ap_ST_fsm_state125 => 
                ap_NS_fsm <= ap_ST_fsm_state126;
            when ap_ST_fsm_state126 => 
                ap_NS_fsm <= ap_ST_fsm_state127;
            when ap_ST_fsm_state127 => 
                ap_NS_fsm <= ap_ST_fsm_state128;
            when ap_ST_fsm_state128 => 
                ap_NS_fsm <= ap_ST_fsm_state129;
            when ap_ST_fsm_state129 => 
                ap_NS_fsm <= ap_ST_fsm_state130;
            when ap_ST_fsm_state130 => 
                ap_NS_fsm <= ap_ST_fsm_state131;
            when ap_ST_fsm_state131 => 
                ap_NS_fsm <= ap_ST_fsm_state132;
            when ap_ST_fsm_state132 => 
                ap_NS_fsm <= ap_ST_fsm_state133;
            when ap_ST_fsm_state133 => 
                if (((tmp_69_fu_2657_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state133))) then
                    ap_NS_fsm <= ap_ST_fsm_state134;
                else
                    ap_NS_fsm <= ap_ST_fsm_state133;
                end if;
            when ap_ST_fsm_state134 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state134) and (grp_k2c_dense_fu_2374_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state135;
                else
                    ap_NS_fsm <= ap_ST_fsm_state134;
                end if;
            when ap_ST_fsm_state135 => 
                ap_NS_fsm <= ap_ST_fsm_state136;
            when ap_ST_fsm_state136 => 
                if (((grp_k2c_batch_norm_fu_2428_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state136))) then
                    ap_NS_fsm <= ap_ST_fsm_state137;
                else
                    ap_NS_fsm <= ap_ST_fsm_state136;
                end if;
            when ap_ST_fsm_state137 => 
                if (((exitcond2_fu_2677_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state137))) then
                    ap_NS_fsm <= ap_ST_fsm_state141;
                else
                    ap_NS_fsm <= ap_ST_fsm_state138;
                end if;
            when ap_ST_fsm_state138 => 
                ap_NS_fsm <= ap_ST_fsm_state139;
            when ap_ST_fsm_state139 => 
                ap_NS_fsm <= ap_ST_fsm_state140;
            when ap_ST_fsm_state140 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state140) and (grp_generic_tanh_float_s_fu_2415_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state137;
                else
                    ap_NS_fsm <= ap_ST_fsm_state140;
                end if;
            when ap_ST_fsm_state141 => 
                if (((tmp_71_fu_2697_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state141))) then
                    ap_NS_fsm <= ap_ST_fsm_state143;
                else
                    ap_NS_fsm <= ap_ST_fsm_state142;
                end if;
            when ap_ST_fsm_state142 => 
                ap_NS_fsm <= ap_ST_fsm_state141;
            when ap_ST_fsm_state143 => 
                ap_NS_fsm <= ap_ST_fsm_state144;
            when ap_ST_fsm_state144 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state145 => 
                if (((tmp_74_fu_2713_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state145))) then
                    ap_NS_fsm <= ap_ST_fsm_state147;
                else
                    ap_NS_fsm <= ap_ST_fsm_state146;
                end if;
            when ap_ST_fsm_state146 => 
                ap_NS_fsm <= ap_ST_fsm_state145;
            when ap_ST_fsm_state147 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state147) and (grp_k2c_dense2_1_fu_2394_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state148;
                else
                    ap_NS_fsm <= ap_ST_fsm_state147;
                end if;
            when ap_ST_fsm_state148 => 
                ap_NS_fsm <= ap_ST_fsm_state149;
            when ap_ST_fsm_state149 => 
                if (((grp_k2c_batch_norm_fu_2428_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state149))) then
                    ap_NS_fsm <= ap_ST_fsm_state150;
                else
                    ap_NS_fsm <= ap_ST_fsm_state149;
                end if;
            when ap_ST_fsm_state150 => 
                if (((exitcond_fu_2738_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state150))) then
                    ap_NS_fsm <= ap_ST_fsm_state154;
                else
                    ap_NS_fsm <= ap_ST_fsm_state151;
                end if;
            when ap_ST_fsm_state151 => 
                ap_NS_fsm <= ap_ST_fsm_state152;
            when ap_ST_fsm_state152 => 
                ap_NS_fsm <= ap_ST_fsm_state153;
            when ap_ST_fsm_state153 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state153) and (grp_generic_tanh_float_s_fu_2415_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state150;
                else
                    ap_NS_fsm <= ap_ST_fsm_state153;
                end if;
            when ap_ST_fsm_state154 => 
                if (((tmp_78_fu_2758_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state154))) then
                    ap_NS_fsm <= ap_ST_fsm_state156;
                else
                    ap_NS_fsm <= ap_ST_fsm_state155;
                end if;
            when ap_ST_fsm_state155 => 
                ap_NS_fsm <= ap_ST_fsm_state154;
            when ap_ST_fsm_state156 => 
                ap_NS_fsm <= ap_ST_fsm_state157;
            when ap_ST_fsm_state157 => 
                ap_NS_fsm <= ap_ST_fsm_state158;
            when ap_ST_fsm_state158 => 
                if (((tmp_81_fu_2774_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state158))) then
                    ap_NS_fsm <= ap_ST_fsm_state160;
                else
                    ap_NS_fsm <= ap_ST_fsm_state159;
                end if;
            when ap_ST_fsm_state159 => 
                ap_NS_fsm <= ap_ST_fsm_state158;
            when ap_ST_fsm_state160 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state160) and (grp_k2c_dense2_fu_2351_ap_done = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state161;
                else
                    ap_NS_fsm <= ap_ST_fsm_state160;
                end if;
            when ap_ST_fsm_state161 => 
                ap_NS_fsm <= ap_ST_fsm_state162;
            when ap_ST_fsm_state162 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond1_fu_2800_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond1_fu_2800_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state165;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state165 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (tmp_84_fu_2909_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp1_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (tmp_84_fu_2909_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state185;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_pp1_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage1;
                end if;
            when ap_ST_fsm_pp1_stage2 => 
                if ((not(((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) and (ap_const_boolean_0 = ap_block_pp1_stage2_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                elsif (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp1_stage2_subdone) and (ap_enable_reg_pp1_iter4 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2))) then
                    ap_NS_fsm <= ap_ST_fsm_state185;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage2;
                end if;
            when ap_ST_fsm_pp1_stage3 => 
                if ((ap_const_boolean_0 = ap_block_pp1_stage3_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage3;
                end if;
            when ap_ST_fsm_state185 => 
                ap_NS_fsm <= ap_ST_fsm_state186;
            when ap_ST_fsm_state186 => 
                ap_NS_fsm <= ap_ST_fsm_state187;
            when ap_ST_fsm_state187 => 
                ap_NS_fsm <= ap_ST_fsm_state188;
            when ap_ST_fsm_state188 => 
                ap_NS_fsm <= ap_ST_fsm_state189;
            when ap_ST_fsm_state189 => 
                ap_NS_fsm <= ap_ST_fsm_state190;
            when ap_ST_fsm_state190 => 
                ap_NS_fsm <= ap_ST_fsm_state191;
            when ap_ST_fsm_state191 => 
                ap_NS_fsm <= ap_ST_fsm_state192;
            when ap_ST_fsm_state192 => 
                ap_NS_fsm <= ap_ST_fsm_state193;
            when ap_ST_fsm_state193 => 
                ap_NS_fsm <= ap_ST_fsm_state194;
            when ap_ST_fsm_state194 => 
                ap_NS_fsm <= ap_ST_fsm_state195;
            when ap_ST_fsm_state195 => 
                ap_NS_fsm <= ap_ST_fsm_state196;
            when ap_ST_fsm_state196 => 
                ap_NS_fsm <= ap_ST_fsm_state197;
            when ap_ST_fsm_state197 => 
                ap_NS_fsm <= ap_ST_fsm_state198;
            when ap_ST_fsm_state198 => 
                ap_NS_fsm <= ap_ST_fsm_state199;
            when ap_ST_fsm_state199 => 
                ap_NS_fsm <= ap_ST_fsm_state200;
            when ap_ST_fsm_state200 => 
                ap_NS_fsm <= ap_ST_fsm_state201;
            when ap_ST_fsm_state201 => 
                if (((tmp_90_fu_2940_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state201))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state202;
                end if;
            when ap_ST_fsm_state202 => 
                ap_NS_fsm <= ap_ST_fsm_state201;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;

    activation_1_output_s_address0_assign_proc : process(ap_CS_fsm_state145, tmp_70_reg_3042, tmp_73_fu_2708_p1, ap_CS_fsm_state142)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state145)) then 
            activation_1_output_s_address0 <= tmp_73_fu_2708_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state142)) then 
            activation_1_output_s_address0 <= tmp_70_reg_3042(12 - 1 downto 0);
        else 
            activation_1_output_s_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    activation_1_output_s_ce0_assign_proc : process(ap_CS_fsm_state145, ap_CS_fsm_state142)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state145) or (ap_const_logic_1 = ap_CS_fsm_state142))) then 
            activation_1_output_s_ce0 <= ap_const_logic_1;
        else 
            activation_1_output_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    activation_1_output_s_we0_assign_proc : process(ap_CS_fsm_state142)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state142)) then 
            activation_1_output_s_we0 <= ap_const_logic_1;
        else 
            activation_1_output_s_we0 <= ap_const_logic_0;
        end if; 
    end process;


    activation_2_output_s_address0_assign_proc : process(ap_CS_fsm_state158, tmp_77_reg_3115, tmp_80_fu_2769_p1, ap_CS_fsm_state155)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state158)) then 
            activation_2_output_s_address0 <= tmp_80_fu_2769_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state155)) then 
            activation_2_output_s_address0 <= tmp_77_reg_3115(12 - 1 downto 0);
        else 
            activation_2_output_s_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    activation_2_output_s_ce0_assign_proc : process(ap_CS_fsm_state158, ap_CS_fsm_state155)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state158) or (ap_const_logic_1 = ap_CS_fsm_state155))) then 
            activation_2_output_s_ce0 <= ap_const_logic_1;
        else 
            activation_2_output_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    activation_2_output_s_we0_assign_proc : process(ap_CS_fsm_state155)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state155)) then 
            activation_2_output_s_we0 <= ap_const_logic_1;
        else 
            activation_2_output_s_we0 <= ap_const_logic_0;
        end if; 
    end process;

    activation_3_output_array_address0 <= tmp_89_reg_3246(12 - 1 downto 0);

    activation_3_output_array_ce0_assign_proc : process(ap_CS_fsm_state202)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state202)) then 
            activation_3_output_array_ce0 <= ap_const_logic_1;
        else 
            activation_3_output_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    activation_3_output_array_d0 <= dense_2_output_array_q0;

    activation_3_output_array_we0_assign_proc : process(ap_CS_fsm_state202)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state202)) then 
            activation_3_output_array_we0 <= ap_const_logic_1;
        else 
            activation_3_output_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    activation_3_output_ndim <= std_logic_vector(IEEE.numeric_std.resize(unsigned(dense_2_output_ndim),64));

    activation_3_output_ndim_ap_vld_assign_proc : process(ap_CS_fsm_state200)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state200)) then 
            activation_3_output_ndim_ap_vld <= ap_const_logic_1;
        else 
            activation_3_output_ndim_ap_vld <= ap_const_logic_0;
        end if; 
    end process;

    activation_3_output_numel <= dense_2_output_numel;

    activation_3_output_numel_ap_vld_assign_proc : process(ap_CS_fsm_state200)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state200)) then 
            activation_3_output_numel_ap_vld <= ap_const_logic_1;
        else 
            activation_3_output_numel_ap_vld <= ap_const_logic_0;
        end if; 
    end process;


    activation_3_output_shape_address0_assign_proc : process(ap_CS_fsm_state200, ap_CS_fsm_state198, ap_CS_fsm_state199)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state200)) then 
            activation_3_output_shape_address0 <= ap_const_lv64_4(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state199)) then 
            activation_3_output_shape_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state198)) then 
            activation_3_output_shape_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            activation_3_output_shape_address0 <= "XXX";
        end if; 
    end process;


    activation_3_output_shape_address1_assign_proc : process(ap_CS_fsm_state200, ap_CS_fsm_state199)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state200)) then 
            activation_3_output_shape_address1 <= ap_const_lv64_3(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state199)) then 
            activation_3_output_shape_address1 <= ap_const_lv64_2(3 - 1 downto 0);
        else 
            activation_3_output_shape_address1 <= "XXX";
        end if; 
    end process;


    activation_3_output_shape_ce0_assign_proc : process(ap_CS_fsm_state200, ap_CS_fsm_state198, ap_CS_fsm_state199)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state199) or (ap_const_logic_1 = ap_CS_fsm_state198) or (ap_const_logic_1 = ap_CS_fsm_state200))) then 
            activation_3_output_shape_ce0 <= ap_const_logic_1;
        else 
            activation_3_output_shape_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    activation_3_output_shape_ce1_assign_proc : process(ap_CS_fsm_state200, ap_CS_fsm_state199)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state199) or (ap_const_logic_1 = ap_CS_fsm_state200))) then 
            activation_3_output_shape_ce1 <= ap_const_logic_1;
        else 
            activation_3_output_shape_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    activation_3_output_shape_d0_assign_proc : process(ap_CS_fsm_state200, ap_CS_fsm_state198, ap_CS_fsm_state199)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state199) or (ap_const_logic_1 = ap_CS_fsm_state200))) then 
            activation_3_output_shape_d0 <= ap_const_lv64_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state198)) then 
            activation_3_output_shape_d0 <= ap_const_lv64_6;
        else 
            activation_3_output_shape_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    activation_3_output_shape_d1 <= ap_const_lv64_1;

    activation_3_output_shape_we0_assign_proc : process(ap_CS_fsm_state200, ap_CS_fsm_state198, ap_CS_fsm_state199)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state199) or (ap_const_logic_1 = ap_CS_fsm_state198) or (ap_const_logic_1 = ap_CS_fsm_state200))) then 
            activation_3_output_shape_we0 <= ap_const_logic_1;
        else 
            activation_3_output_shape_we0 <= ap_const_logic_0;
        end if; 
    end process;


    activation_3_output_shape_we1_assign_proc : process(ap_CS_fsm_state200, ap_CS_fsm_state199)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state199) or (ap_const_logic_1 = ap_CS_fsm_state200))) then 
            activation_3_output_shape_we1 <= ap_const_logic_1;
        else 
            activation_3_output_shape_we1 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(162);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(164);
    ap_CS_fsm_pp1_stage1 <= ap_CS_fsm(165);
    ap_CS_fsm_pp1_stage2 <= ap_CS_fsm(166);
    ap_CS_fsm_pp1_stage3 <= ap_CS_fsm(167);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state100 <= ap_CS_fsm(99);
    ap_CS_fsm_state101 <= ap_CS_fsm(100);
    ap_CS_fsm_state102 <= ap_CS_fsm(101);
    ap_CS_fsm_state103 <= ap_CS_fsm(102);
    ap_CS_fsm_state104 <= ap_CS_fsm(103);
    ap_CS_fsm_state105 <= ap_CS_fsm(104);
    ap_CS_fsm_state106 <= ap_CS_fsm(105);
    ap_CS_fsm_state107 <= ap_CS_fsm(106);
    ap_CS_fsm_state108 <= ap_CS_fsm(107);
    ap_CS_fsm_state109 <= ap_CS_fsm(108);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state110 <= ap_CS_fsm(109);
    ap_CS_fsm_state111 <= ap_CS_fsm(110);
    ap_CS_fsm_state112 <= ap_CS_fsm(111);
    ap_CS_fsm_state113 <= ap_CS_fsm(112);
    ap_CS_fsm_state114 <= ap_CS_fsm(113);
    ap_CS_fsm_state115 <= ap_CS_fsm(114);
    ap_CS_fsm_state116 <= ap_CS_fsm(115);
    ap_CS_fsm_state117 <= ap_CS_fsm(116);
    ap_CS_fsm_state118 <= ap_CS_fsm(117);
    ap_CS_fsm_state119 <= ap_CS_fsm(118);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state120 <= ap_CS_fsm(119);
    ap_CS_fsm_state121 <= ap_CS_fsm(120);
    ap_CS_fsm_state122 <= ap_CS_fsm(121);
    ap_CS_fsm_state123 <= ap_CS_fsm(122);
    ap_CS_fsm_state124 <= ap_CS_fsm(123);
    ap_CS_fsm_state125 <= ap_CS_fsm(124);
    ap_CS_fsm_state126 <= ap_CS_fsm(125);
    ap_CS_fsm_state127 <= ap_CS_fsm(126);
    ap_CS_fsm_state128 <= ap_CS_fsm(127);
    ap_CS_fsm_state129 <= ap_CS_fsm(128);
    ap_CS_fsm_state13 <= ap_CS_fsm(12);
    ap_CS_fsm_state130 <= ap_CS_fsm(129);
    ap_CS_fsm_state131 <= ap_CS_fsm(130);
    ap_CS_fsm_state132 <= ap_CS_fsm(131);
    ap_CS_fsm_state133 <= ap_CS_fsm(132);
    ap_CS_fsm_state134 <= ap_CS_fsm(133);
    ap_CS_fsm_state135 <= ap_CS_fsm(134);
    ap_CS_fsm_state136 <= ap_CS_fsm(135);
    ap_CS_fsm_state137 <= ap_CS_fsm(136);
    ap_CS_fsm_state138 <= ap_CS_fsm(137);
    ap_CS_fsm_state139 <= ap_CS_fsm(138);
    ap_CS_fsm_state14 <= ap_CS_fsm(13);
    ap_CS_fsm_state140 <= ap_CS_fsm(139);
    ap_CS_fsm_state141 <= ap_CS_fsm(140);
    ap_CS_fsm_state142 <= ap_CS_fsm(141);
    ap_CS_fsm_state143 <= ap_CS_fsm(142);
    ap_CS_fsm_state144 <= ap_CS_fsm(143);
    ap_CS_fsm_state145 <= ap_CS_fsm(144);
    ap_CS_fsm_state146 <= ap_CS_fsm(145);
    ap_CS_fsm_state147 <= ap_CS_fsm(146);
    ap_CS_fsm_state148 <= ap_CS_fsm(147);
    ap_CS_fsm_state149 <= ap_CS_fsm(148);
    ap_CS_fsm_state15 <= ap_CS_fsm(14);
    ap_CS_fsm_state150 <= ap_CS_fsm(149);
    ap_CS_fsm_state151 <= ap_CS_fsm(150);
    ap_CS_fsm_state152 <= ap_CS_fsm(151);
    ap_CS_fsm_state153 <= ap_CS_fsm(152);
    ap_CS_fsm_state154 <= ap_CS_fsm(153);
    ap_CS_fsm_state155 <= ap_CS_fsm(154);
    ap_CS_fsm_state156 <= ap_CS_fsm(155);
    ap_CS_fsm_state157 <= ap_CS_fsm(156);
    ap_CS_fsm_state158 <= ap_CS_fsm(157);
    ap_CS_fsm_state159 <= ap_CS_fsm(158);
    ap_CS_fsm_state16 <= ap_CS_fsm(15);
    ap_CS_fsm_state160 <= ap_CS_fsm(159);
    ap_CS_fsm_state161 <= ap_CS_fsm(160);
    ap_CS_fsm_state162 <= ap_CS_fsm(161);
    ap_CS_fsm_state165 <= ap_CS_fsm(163);
    ap_CS_fsm_state17 <= ap_CS_fsm(16);
    ap_CS_fsm_state18 <= ap_CS_fsm(17);
    ap_CS_fsm_state185 <= ap_CS_fsm(168);
    ap_CS_fsm_state19 <= ap_CS_fsm(18);
    ap_CS_fsm_state193 <= ap_CS_fsm(176);
    ap_CS_fsm_state194 <= ap_CS_fsm(177);
    ap_CS_fsm_state195 <= ap_CS_fsm(178);
    ap_CS_fsm_state196 <= ap_CS_fsm(179);
    ap_CS_fsm_state197 <= ap_CS_fsm(180);
    ap_CS_fsm_state198 <= ap_CS_fsm(181);
    ap_CS_fsm_state199 <= ap_CS_fsm(182);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state20 <= ap_CS_fsm(19);
    ap_CS_fsm_state200 <= ap_CS_fsm(183);
    ap_CS_fsm_state201 <= ap_CS_fsm(184);
    ap_CS_fsm_state202 <= ap_CS_fsm(185);
    ap_CS_fsm_state21 <= ap_CS_fsm(20);
    ap_CS_fsm_state22 <= ap_CS_fsm(21);
    ap_CS_fsm_state23 <= ap_CS_fsm(22);
    ap_CS_fsm_state24 <= ap_CS_fsm(23);
    ap_CS_fsm_state25 <= ap_CS_fsm(24);
    ap_CS_fsm_state26 <= ap_CS_fsm(25);
    ap_CS_fsm_state27 <= ap_CS_fsm(26);
    ap_CS_fsm_state28 <= ap_CS_fsm(27);
    ap_CS_fsm_state29 <= ap_CS_fsm(28);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state30 <= ap_CS_fsm(29);
    ap_CS_fsm_state31 <= ap_CS_fsm(30);
    ap_CS_fsm_state32 <= ap_CS_fsm(31);
    ap_CS_fsm_state33 <= ap_CS_fsm(32);
    ap_CS_fsm_state34 <= ap_CS_fsm(33);
    ap_CS_fsm_state35 <= ap_CS_fsm(34);
    ap_CS_fsm_state36 <= ap_CS_fsm(35);
    ap_CS_fsm_state37 <= ap_CS_fsm(36);
    ap_CS_fsm_state38 <= ap_CS_fsm(37);
    ap_CS_fsm_state39 <= ap_CS_fsm(38);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state40 <= ap_CS_fsm(39);
    ap_CS_fsm_state41 <= ap_CS_fsm(40);
    ap_CS_fsm_state42 <= ap_CS_fsm(41);
    ap_CS_fsm_state43 <= ap_CS_fsm(42);
    ap_CS_fsm_state44 <= ap_CS_fsm(43);
    ap_CS_fsm_state45 <= ap_CS_fsm(44);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state48 <= ap_CS_fsm(47);
    ap_CS_fsm_state49 <= ap_CS_fsm(48);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state50 <= ap_CS_fsm(49);
    ap_CS_fsm_state51 <= ap_CS_fsm(50);
    ap_CS_fsm_state52 <= ap_CS_fsm(51);
    ap_CS_fsm_state53 <= ap_CS_fsm(52);
    ap_CS_fsm_state54 <= ap_CS_fsm(53);
    ap_CS_fsm_state55 <= ap_CS_fsm(54);
    ap_CS_fsm_state56 <= ap_CS_fsm(55);
    ap_CS_fsm_state57 <= ap_CS_fsm(56);
    ap_CS_fsm_state58 <= ap_CS_fsm(57);
    ap_CS_fsm_state59 <= ap_CS_fsm(58);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state60 <= ap_CS_fsm(59);
    ap_CS_fsm_state61 <= ap_CS_fsm(60);
    ap_CS_fsm_state62 <= ap_CS_fsm(61);
    ap_CS_fsm_state63 <= ap_CS_fsm(62);
    ap_CS_fsm_state64 <= ap_CS_fsm(63);
    ap_CS_fsm_state65 <= ap_CS_fsm(64);
    ap_CS_fsm_state66 <= ap_CS_fsm(65);
    ap_CS_fsm_state67 <= ap_CS_fsm(66);
    ap_CS_fsm_state68 <= ap_CS_fsm(67);
    ap_CS_fsm_state69 <= ap_CS_fsm(68);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state70 <= ap_CS_fsm(69);
    ap_CS_fsm_state71 <= ap_CS_fsm(70);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state73 <= ap_CS_fsm(72);
    ap_CS_fsm_state74 <= ap_CS_fsm(73);
    ap_CS_fsm_state75 <= ap_CS_fsm(74);
    ap_CS_fsm_state76 <= ap_CS_fsm(75);
    ap_CS_fsm_state77 <= ap_CS_fsm(76);
    ap_CS_fsm_state78 <= ap_CS_fsm(77);
    ap_CS_fsm_state79 <= ap_CS_fsm(78);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state80 <= ap_CS_fsm(79);
    ap_CS_fsm_state81 <= ap_CS_fsm(80);
    ap_CS_fsm_state82 <= ap_CS_fsm(81);
    ap_CS_fsm_state83 <= ap_CS_fsm(82);
    ap_CS_fsm_state84 <= ap_CS_fsm(83);
    ap_CS_fsm_state85 <= ap_CS_fsm(84);
    ap_CS_fsm_state86 <= ap_CS_fsm(85);
    ap_CS_fsm_state87 <= ap_CS_fsm(86);
    ap_CS_fsm_state88 <= ap_CS_fsm(87);
    ap_CS_fsm_state89 <= ap_CS_fsm(88);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);
    ap_CS_fsm_state90 <= ap_CS_fsm(89);
    ap_CS_fsm_state91 <= ap_CS_fsm(90);
    ap_CS_fsm_state92 <= ap_CS_fsm(91);
    ap_CS_fsm_state93 <= ap_CS_fsm(92);
    ap_CS_fsm_state94 <= ap_CS_fsm(93);
    ap_CS_fsm_state95 <= ap_CS_fsm(94);
    ap_CS_fsm_state96 <= ap_CS_fsm(95);
    ap_CS_fsm_state97 <= ap_CS_fsm(96);
    ap_CS_fsm_state98 <= ap_CS_fsm(97);
    ap_CS_fsm_state99 <= ap_CS_fsm(98);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_00001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state163_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state164_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state166_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state167_pp1_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state168_pp1_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state169_pp1_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state170_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state171_pp1_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state172_pp1_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state173_pp1_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state174_pp1_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state175_pp1_stage1_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state176_pp1_stage2_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state177_pp1_stage3_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state178_pp1_stage0_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state179_pp1_stage1_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state180_pp1_stage2_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state181_pp1_stage3_iter3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state182_pp1_stage0_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state183_pp1_stage1_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state184_pp1_stage2_iter4 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state163_assign_proc : process(exitcond1_fu_2800_p2)
    begin
        if ((exitcond1_fu_2800_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state163 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state163 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state166_assign_proc : process(tmp_84_fu_2909_p2)
    begin
        if ((tmp_84_fu_2909_p2 = ap_const_lv1_1)) then 
            ap_condition_pp1_exit_iter0_state166 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state166 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_CS_fsm_state201, tmp_90_fu_2940_p2)
    begin
        if (((tmp_90_fu_2940_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state201))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1, ap_enable_reg_pp1_iter4, ap_enable_reg_pp1_iter2, ap_enable_reg_pp1_iter3)
    begin
        if (((ap_enable_reg_pp1_iter3 = ap_const_logic_0) and (ap_enable_reg_pp1_iter2 = ap_const_logic_0) and (ap_enable_reg_pp1_iter4 = ap_const_logic_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_3_phi_fu_2321_p4_assign_proc : process(i_3_reg_2317, tmp_84_reg_3185, ap_CS_fsm_pp1_stage0, i_39_reg_3189, ap_enable_reg_pp1_iter1, ap_block_pp1_stage0)
    begin
        if (((tmp_84_reg_3185 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            ap_phi_mux_i_3_phi_fu_2321_p4 <= i_39_reg_3189;
        else 
            ap_phi_mux_i_3_phi_fu_2321_p4 <= i_3_reg_2317;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state201, tmp_90_fu_2940_p2)
    begin
        if (((tmp_90_fu_2940_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state201))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_10_ce0_assign_proc : process(ap_CS_fsm_state136, grp_k2c_batch_norm_fu_2428_gamma_array_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
            batch_normalization_10_ce0 <= grp_k2c_batch_norm_fu_2428_gamma_array_ce0;
        else 
            batch_normalization_10_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_11_ce0_assign_proc : process(ap_CS_fsm_state136, grp_k2c_batch_norm_fu_2428_beta_array_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
            batch_normalization_11_ce0 <= grp_k2c_batch_norm_fu_2428_beta_array_ce0;
        else 
            batch_normalization_11_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_13_address0_assign_proc : process(ap_CS_fsm_state149, grp_k2c_batch_norm_fu_2428_stdev_array_address0, ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            batch_normalization_13_address0 <= ap_const_lv12_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            batch_normalization_13_address0 <= ap_const_lv12_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            batch_normalization_13_address0 <= ap_const_lv12_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            batch_normalization_13_address0 <= ap_const_lv12_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            batch_normalization_13_address0 <= ap_const_lv12_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            batch_normalization_13_address0 <= grp_k2c_batch_norm_fu_2428_stdev_array_address0;
        else 
            batch_normalization_13_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_13_address1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            batch_normalization_13_address1 <= ap_const_lv12_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            batch_normalization_13_address1 <= ap_const_lv12_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            batch_normalization_13_address1 <= ap_const_lv12_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            batch_normalization_13_address1 <= ap_const_lv12_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            batch_normalization_13_address1 <= ap_const_lv12_1;
        else 
            batch_normalization_13_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_13_ce0_assign_proc : process(ap_CS_fsm_state149, grp_k2c_batch_norm_fu_2428_stdev_array_ce0, ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            batch_normalization_13_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            batch_normalization_13_ce0 <= grp_k2c_batch_norm_fu_2428_stdev_array_ce0;
        else 
            batch_normalization_13_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_13_ce1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            batch_normalization_13_ce1 <= ap_const_logic_1;
        else 
            batch_normalization_13_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_13_d0_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            batch_normalization_13_d0 <= ap_const_lv32_401B1447;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            batch_normalization_13_d0 <= ap_const_lv32_4011FB04;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            batch_normalization_13_d0 <= ap_const_lv32_401F672F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            batch_normalization_13_d0 <= ap_const_lv32_401FBD38;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            batch_normalization_13_d0 <= ap_const_lv32_4019C90D;
        else 
            batch_normalization_13_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_13_d1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            batch_normalization_13_d1 <= ap_const_lv32_402981EC;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            batch_normalization_13_d1 <= ap_const_lv32_402D0F22;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            batch_normalization_13_d1 <= ap_const_lv32_402A7A78;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            batch_normalization_13_d1 <= ap_const_lv32_402777A3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            batch_normalization_13_d1 <= ap_const_lv32_400B555D;
        else 
            batch_normalization_13_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_13_we0_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            batch_normalization_13_we0 <= ap_const_logic_1;
        else 
            batch_normalization_13_we0 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_13_we1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            batch_normalization_13_we1 <= ap_const_logic_1;
        else 
            batch_normalization_13_we1 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_1_address0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state136, ap_CS_fsm_state137, tmp_70_fu_2692_p1, ap_CS_fsm_state141, grp_k2c_batch_norm_fu_2428_outputs_array_address0, ap_CS_fsm_state102, i_cast_fu_2672_p1, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state141)) then 
            batch_normalization_1_address0 <= tmp_70_fu_2692_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state137)) then 
            batch_normalization_1_address0 <= i_cast_fu_2672_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            batch_normalization_1_address0 <= ap_const_lv12_62;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            batch_normalization_1_address0 <= ap_const_lv12_60;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            batch_normalization_1_address0 <= ap_const_lv12_5E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            batch_normalization_1_address0 <= ap_const_lv12_5C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            batch_normalization_1_address0 <= ap_const_lv12_5A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            batch_normalization_1_address0 <= ap_const_lv12_58;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            batch_normalization_1_address0 <= ap_const_lv12_56;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            batch_normalization_1_address0 <= ap_const_lv12_54;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            batch_normalization_1_address0 <= ap_const_lv12_52;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            batch_normalization_1_address0 <= ap_const_lv12_50;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            batch_normalization_1_address0 <= ap_const_lv12_4E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            batch_normalization_1_address0 <= ap_const_lv12_4C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            batch_normalization_1_address0 <= ap_const_lv12_4A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            batch_normalization_1_address0 <= ap_const_lv12_48;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            batch_normalization_1_address0 <= ap_const_lv12_46;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            batch_normalization_1_address0 <= ap_const_lv12_44;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            batch_normalization_1_address0 <= ap_const_lv12_42;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            batch_normalization_1_address0 <= ap_const_lv12_40;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            batch_normalization_1_address0 <= ap_const_lv12_3E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            batch_normalization_1_address0 <= ap_const_lv12_3C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            batch_normalization_1_address0 <= ap_const_lv12_3A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            batch_normalization_1_address0 <= ap_const_lv12_38;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            batch_normalization_1_address0 <= ap_const_lv12_36;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            batch_normalization_1_address0 <= ap_const_lv12_34;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            batch_normalization_1_address0 <= ap_const_lv12_32;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            batch_normalization_1_address0 <= ap_const_lv12_30;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            batch_normalization_1_address0 <= ap_const_lv12_2E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            batch_normalization_1_address0 <= ap_const_lv12_2C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            batch_normalization_1_address0 <= ap_const_lv12_2A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            batch_normalization_1_address0 <= ap_const_lv12_28;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            batch_normalization_1_address0 <= ap_const_lv12_26;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            batch_normalization_1_address0 <= ap_const_lv12_24;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            batch_normalization_1_address0 <= ap_const_lv12_22;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            batch_normalization_1_address0 <= ap_const_lv12_20;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            batch_normalization_1_address0 <= ap_const_lv12_1E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            batch_normalization_1_address0 <= ap_const_lv12_1C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            batch_normalization_1_address0 <= ap_const_lv12_1A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            batch_normalization_1_address0 <= ap_const_lv12_18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            batch_normalization_1_address0 <= ap_const_lv12_16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            batch_normalization_1_address0 <= ap_const_lv12_14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            batch_normalization_1_address0 <= ap_const_lv12_12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            batch_normalization_1_address0 <= ap_const_lv12_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            batch_normalization_1_address0 <= ap_const_lv12_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            batch_normalization_1_address0 <= ap_const_lv12_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            batch_normalization_1_address0 <= ap_const_lv12_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            batch_normalization_1_address0 <= ap_const_lv12_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            batch_normalization_1_address0 <= ap_const_lv12_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            batch_normalization_1_address0 <= ap_const_lv12_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            batch_normalization_1_address0 <= ap_const_lv12_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            batch_normalization_1_address0 <= ap_const_lv12_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
            batch_normalization_1_address0 <= grp_k2c_batch_norm_fu_2428_outputs_array_address0;
        else 
            batch_normalization_1_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_1_address1_assign_proc : process(ap_CS_fsm_state53, batch_normalization_15_reg_3026, ap_CS_fsm_state102, ap_CS_fsm_state140, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            batch_normalization_1_address1 <= batch_normalization_15_reg_3026;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            batch_normalization_1_address1 <= ap_const_lv12_63;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            batch_normalization_1_address1 <= ap_const_lv12_61;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            batch_normalization_1_address1 <= ap_const_lv12_5F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            batch_normalization_1_address1 <= ap_const_lv12_5D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            batch_normalization_1_address1 <= ap_const_lv12_5B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state97)) then 
            batch_normalization_1_address1 <= ap_const_lv12_59;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            batch_normalization_1_address1 <= ap_const_lv12_57;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            batch_normalization_1_address1 <= ap_const_lv12_55;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state94)) then 
            batch_normalization_1_address1 <= ap_const_lv12_53;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state93)) then 
            batch_normalization_1_address1 <= ap_const_lv12_51;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state92)) then 
            batch_normalization_1_address1 <= ap_const_lv12_4F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            batch_normalization_1_address1 <= ap_const_lv12_4D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state90)) then 
            batch_normalization_1_address1 <= ap_const_lv12_4B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
            batch_normalization_1_address1 <= ap_const_lv12_49;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state88)) then 
            batch_normalization_1_address1 <= ap_const_lv12_47;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state87)) then 
            batch_normalization_1_address1 <= ap_const_lv12_45;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state86)) then 
            batch_normalization_1_address1 <= ap_const_lv12_43;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
            batch_normalization_1_address1 <= ap_const_lv12_41;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state84)) then 
            batch_normalization_1_address1 <= ap_const_lv12_3F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state83)) then 
            batch_normalization_1_address1 <= ap_const_lv12_3D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state82)) then 
            batch_normalization_1_address1 <= ap_const_lv12_3B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
            batch_normalization_1_address1 <= ap_const_lv12_39;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state80)) then 
            batch_normalization_1_address1 <= ap_const_lv12_37;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state79)) then 
            batch_normalization_1_address1 <= ap_const_lv12_35;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            batch_normalization_1_address1 <= ap_const_lv12_33;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state77)) then 
            batch_normalization_1_address1 <= ap_const_lv12_31;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state76)) then 
            batch_normalization_1_address1 <= ap_const_lv12_2F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
            batch_normalization_1_address1 <= ap_const_lv12_2D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state74)) then 
            batch_normalization_1_address1 <= ap_const_lv12_2B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state73)) then 
            batch_normalization_1_address1 <= ap_const_lv12_29;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
            batch_normalization_1_address1 <= ap_const_lv12_27;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state71)) then 
            batch_normalization_1_address1 <= ap_const_lv12_25;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state70)) then 
            batch_normalization_1_address1 <= ap_const_lv12_23;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state69)) then 
            batch_normalization_1_address1 <= ap_const_lv12_21;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state68)) then 
            batch_normalization_1_address1 <= ap_const_lv12_1F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state67)) then 
            batch_normalization_1_address1 <= ap_const_lv12_1D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state66)) then 
            batch_normalization_1_address1 <= ap_const_lv12_1B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state65)) then 
            batch_normalization_1_address1 <= ap_const_lv12_19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state64)) then 
            batch_normalization_1_address1 <= ap_const_lv12_17;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state63)) then 
            batch_normalization_1_address1 <= ap_const_lv12_15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state62)) then 
            batch_normalization_1_address1 <= ap_const_lv12_13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state61)) then 
            batch_normalization_1_address1 <= ap_const_lv12_11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state60)) then 
            batch_normalization_1_address1 <= ap_const_lv12_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state59)) then 
            batch_normalization_1_address1 <= ap_const_lv12_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state58)) then 
            batch_normalization_1_address1 <= ap_const_lv12_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state57)) then 
            batch_normalization_1_address1 <= ap_const_lv12_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state56)) then 
            batch_normalization_1_address1 <= ap_const_lv12_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state55)) then 
            batch_normalization_1_address1 <= ap_const_lv12_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state54)) then 
            batch_normalization_1_address1 <= ap_const_lv12_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            batch_normalization_1_address1 <= ap_const_lv12_1;
        else 
            batch_normalization_1_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_1_ce0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state136, ap_CS_fsm_state137, ap_CS_fsm_state141, grp_k2c_batch_norm_fu_2428_outputs_array_ce0, ap_CS_fsm_state102, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state141) or (ap_const_logic_1 = ap_CS_fsm_state137) or (ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state102))) then 
            batch_normalization_1_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
            batch_normalization_1_ce0 <= grp_k2c_batch_norm_fu_2428_outputs_array_ce0;
        else 
            batch_normalization_1_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_1_ce1_assign_proc : process(ap_CS_fsm_state53, grp_generic_tanh_float_s_fu_2415_ap_done, ap_CS_fsm_state102, ap_CS_fsm_state140, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state102) or ((ap_const_logic_1 = ap_CS_fsm_state140) and (grp_generic_tanh_float_s_fu_2415_ap_done = ap_const_logic_1)))) then 
            batch_normalization_1_ce1 <= ap_const_logic_1;
        else 
            batch_normalization_1_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_1_d0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state136, grp_k2c_batch_norm_fu_2428_outputs_array_d0, ap_CS_fsm_state102, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state102))) then 
            batch_normalization_1_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
            batch_normalization_1_d0 <= grp_k2c_batch_norm_fu_2428_outputs_array_d0;
        else 
            batch_normalization_1_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_1_d1_assign_proc : process(ap_CS_fsm_state53, grp_generic_tanh_float_s_fu_2415_ap_return, ap_CS_fsm_state102, ap_CS_fsm_state140, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            batch_normalization_1_d1 <= grp_generic_tanh_float_s_fu_2415_ap_return;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state53) or (ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state102))) then 
            batch_normalization_1_d1 <= ap_const_lv32_0;
        else 
            batch_normalization_1_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_1_we0_assign_proc : process(ap_CS_fsm_state53, ap_CS_fsm_state136, grp_k2c_batch_norm_fu_2428_outputs_array_we0, tmp_65_fu_2557_p2, ap_CS_fsm_state102, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state102) or ((tmp_65_fu_2557_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53)))) then 
            batch_normalization_1_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
            batch_normalization_1_we0 <= grp_k2c_batch_norm_fu_2428_outputs_array_we0;
        else 
            batch_normalization_1_we0 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_1_we1_assign_proc : process(ap_CS_fsm_state53, grp_generic_tanh_float_s_fu_2415_ap_done, tmp_65_fu_2557_p2, ap_CS_fsm_state102, ap_CS_fsm_state140, ap_CS_fsm_state54, ap_CS_fsm_state55, ap_CS_fsm_state56, ap_CS_fsm_state57, ap_CS_fsm_state58, ap_CS_fsm_state59, ap_CS_fsm_state60, ap_CS_fsm_state61, ap_CS_fsm_state62, ap_CS_fsm_state63, ap_CS_fsm_state64, ap_CS_fsm_state65, ap_CS_fsm_state66, ap_CS_fsm_state67, ap_CS_fsm_state68, ap_CS_fsm_state69, ap_CS_fsm_state70, ap_CS_fsm_state71, ap_CS_fsm_state72, ap_CS_fsm_state73, ap_CS_fsm_state74, ap_CS_fsm_state75, ap_CS_fsm_state76, ap_CS_fsm_state77, ap_CS_fsm_state78, ap_CS_fsm_state79, ap_CS_fsm_state80, ap_CS_fsm_state81, ap_CS_fsm_state82, ap_CS_fsm_state83, ap_CS_fsm_state84, ap_CS_fsm_state85, ap_CS_fsm_state86, ap_CS_fsm_state87, ap_CS_fsm_state88, ap_CS_fsm_state89, ap_CS_fsm_state90, ap_CS_fsm_state91, ap_CS_fsm_state92, ap_CS_fsm_state93, ap_CS_fsm_state94, ap_CS_fsm_state95, ap_CS_fsm_state96, ap_CS_fsm_state97, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state97) or (ap_const_logic_1 = ap_CS_fsm_state96) or (ap_const_logic_1 = ap_CS_fsm_state95) or (ap_const_logic_1 = ap_CS_fsm_state94) or (ap_const_logic_1 = ap_CS_fsm_state93) or (ap_const_logic_1 = ap_CS_fsm_state92) or (ap_const_logic_1 = ap_CS_fsm_state91) or (ap_const_logic_1 = ap_CS_fsm_state90) or (ap_const_logic_1 = ap_CS_fsm_state89) or (ap_const_logic_1 = ap_CS_fsm_state88) or (ap_const_logic_1 = ap_CS_fsm_state87) or (ap_const_logic_1 = ap_CS_fsm_state86) or (ap_const_logic_1 = ap_CS_fsm_state85) or (ap_const_logic_1 = ap_CS_fsm_state84) or (ap_const_logic_1 = ap_CS_fsm_state83) or (ap_const_logic_1 = ap_CS_fsm_state82) or (ap_const_logic_1 = ap_CS_fsm_state81) or (ap_const_logic_1 = ap_CS_fsm_state80) or (ap_const_logic_1 = ap_CS_fsm_state79) or (ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state77) or (ap_const_logic_1 = ap_CS_fsm_state76) or (ap_const_logic_1 = ap_CS_fsm_state75) or (ap_const_logic_1 = ap_CS_fsm_state74) or (ap_const_logic_1 = ap_CS_fsm_state73) or (ap_const_logic_1 = ap_CS_fsm_state72) or (ap_const_logic_1 = ap_CS_fsm_state71) or (ap_const_logic_1 = ap_CS_fsm_state70) or (ap_const_logic_1 = ap_CS_fsm_state69) or (ap_const_logic_1 = ap_CS_fsm_state68) or (ap_const_logic_1 = ap_CS_fsm_state67) or (ap_const_logic_1 = ap_CS_fsm_state66) or (ap_const_logic_1 = ap_CS_fsm_state65) or (ap_const_logic_1 = ap_CS_fsm_state64) or (ap_const_logic_1 = ap_CS_fsm_state63) or (ap_const_logic_1 = ap_CS_fsm_state62) or (ap_const_logic_1 = ap_CS_fsm_state61) or (ap_const_logic_1 = ap_CS_fsm_state60) or (ap_const_logic_1 = ap_CS_fsm_state59) or (ap_const_logic_1 = ap_CS_fsm_state58) or (ap_const_logic_1 = ap_CS_fsm_state57) or (ap_const_logic_1 = ap_CS_fsm_state56) or (ap_const_logic_1 = ap_CS_fsm_state55) or (ap_const_logic_1 = ap_CS_fsm_state54) or (ap_const_logic_1 = ap_CS_fsm_state102) or ((tmp_65_fu_2557_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state53)) or ((ap_const_logic_1 = ap_CS_fsm_state140) and (grp_generic_tanh_float_s_fu_2415_ap_done = ap_const_logic_1)))) then 
            batch_normalization_1_we1 <= ap_const_logic_1;
        else 
            batch_normalization_1_we1 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_4_address0_assign_proc : process(ap_CS_fsm_state149, grp_k2c_batch_norm_fu_2428_beta_array_address0, ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            batch_normalization_4_address0 <= ap_const_lv12_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            batch_normalization_4_address0 <= ap_const_lv12_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            batch_normalization_4_address0 <= ap_const_lv12_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            batch_normalization_4_address0 <= ap_const_lv12_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            batch_normalization_4_address0 <= ap_const_lv12_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            batch_normalization_4_address0 <= grp_k2c_batch_norm_fu_2428_beta_array_address0;
        else 
            batch_normalization_4_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_4_address1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            batch_normalization_4_address1 <= ap_const_lv12_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            batch_normalization_4_address1 <= ap_const_lv12_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            batch_normalization_4_address1 <= ap_const_lv12_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            batch_normalization_4_address1 <= ap_const_lv12_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            batch_normalization_4_address1 <= ap_const_lv12_1;
        else 
            batch_normalization_4_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_4_ce0_assign_proc : process(ap_CS_fsm_state149, grp_k2c_batch_norm_fu_2428_beta_array_ce0, ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            batch_normalization_4_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            batch_normalization_4_ce0 <= grp_k2c_batch_norm_fu_2428_beta_array_ce0;
        else 
            batch_normalization_4_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_4_ce1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            batch_normalization_4_ce1 <= ap_const_logic_1;
        else 
            batch_normalization_4_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_4_d0_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            batch_normalization_4_d0 <= ap_const_lv32_BCA6B1AA;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            batch_normalization_4_d0 <= ap_const_lv32_3CCC7E1F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            batch_normalization_4_d0 <= ap_const_lv32_BD8CD877;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            batch_normalization_4_d0 <= ap_const_lv32_3CA58DD0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            batch_normalization_4_d0 <= ap_const_lv32_BCB57EFF;
        else 
            batch_normalization_4_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_4_d1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            batch_normalization_4_d1 <= ap_const_lv32_BD6E1A88;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            batch_normalization_4_d1 <= ap_const_lv32_3B3D6F28;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            batch_normalization_4_d1 <= ap_const_lv32_BD94401B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            batch_normalization_4_d1 <= ap_const_lv32_3CE39D1F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            batch_normalization_4_d1 <= ap_const_lv32_BC97B45D;
        else 
            batch_normalization_4_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_4_we0_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            batch_normalization_4_we0 <= ap_const_logic_1;
        else 
            batch_normalization_4_we0 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_4_we1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            batch_normalization_4_we1 <= ap_const_logic_1;
        else 
            batch_normalization_4_we1 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_5_address0_assign_proc : process(ap_CS_fsm_state149, grp_k2c_batch_norm_fu_2428_gamma_array_address0, ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            batch_normalization_5_address0 <= ap_const_lv12_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            batch_normalization_5_address0 <= ap_const_lv12_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            batch_normalization_5_address0 <= ap_const_lv12_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            batch_normalization_5_address0 <= ap_const_lv12_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            batch_normalization_5_address0 <= ap_const_lv12_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            batch_normalization_5_address0 <= grp_k2c_batch_norm_fu_2428_gamma_array_address0;
        else 
            batch_normalization_5_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_5_address1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            batch_normalization_5_address1 <= ap_const_lv12_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            batch_normalization_5_address1 <= ap_const_lv12_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            batch_normalization_5_address1 <= ap_const_lv12_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            batch_normalization_5_address1 <= ap_const_lv12_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            batch_normalization_5_address1 <= ap_const_lv12_1;
        else 
            batch_normalization_5_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_5_ce0_assign_proc : process(ap_CS_fsm_state149, grp_k2c_batch_norm_fu_2428_gamma_array_ce0, ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            batch_normalization_5_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            batch_normalization_5_ce0 <= grp_k2c_batch_norm_fu_2428_gamma_array_ce0;
        else 
            batch_normalization_5_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_5_ce1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            batch_normalization_5_ce1 <= ap_const_logic_1;
        else 
            batch_normalization_5_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_5_d0_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            batch_normalization_5_d0 <= ap_const_lv32_3F916033;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            batch_normalization_5_d0 <= ap_const_lv32_3F93A498;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            batch_normalization_5_d0 <= ap_const_lv32_3F916303;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            batch_normalization_5_d0 <= ap_const_lv32_3F93C2B0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            batch_normalization_5_d0 <= ap_const_lv32_3F91BC92;
        else 
            batch_normalization_5_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_5_d1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            batch_normalization_5_d1 <= ap_const_lv32_3F931201;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            batch_normalization_5_d1 <= ap_const_lv32_3F92461C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            batch_normalization_5_d1 <= ap_const_lv32_3F923E51;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            batch_normalization_5_d1 <= ap_const_lv32_3F8EED3A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            batch_normalization_5_d1 <= ap_const_lv32_3F941376;
        else 
            batch_normalization_5_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_5_we0_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            batch_normalization_5_we0 <= ap_const_logic_1;
        else 
            batch_normalization_5_we0 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_5_we1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            batch_normalization_5_we1 <= ap_const_logic_1;
        else 
            batch_normalization_5_we1 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_6_address0_assign_proc : process(ap_CS_fsm_state149, grp_k2c_batch_norm_fu_2428_mean_array_address0, ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            batch_normalization_6_address0 <= ap_const_lv12_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            batch_normalization_6_address0 <= ap_const_lv12_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            batch_normalization_6_address0 <= ap_const_lv12_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            batch_normalization_6_address0 <= ap_const_lv12_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            batch_normalization_6_address0 <= ap_const_lv12_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            batch_normalization_6_address0 <= grp_k2c_batch_norm_fu_2428_mean_array_address0;
        else 
            batch_normalization_6_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_6_address1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            batch_normalization_6_address1 <= ap_const_lv12_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            batch_normalization_6_address1 <= ap_const_lv12_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            batch_normalization_6_address1 <= ap_const_lv12_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            batch_normalization_6_address1 <= ap_const_lv12_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            batch_normalization_6_address1 <= ap_const_lv12_1;
        else 
            batch_normalization_6_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_6_ce0_assign_proc : process(ap_CS_fsm_state149, grp_k2c_batch_norm_fu_2428_mean_array_ce0, ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            batch_normalization_6_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            batch_normalization_6_ce0 <= grp_k2c_batch_norm_fu_2428_mean_array_ce0;
        else 
            batch_normalization_6_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_6_ce1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            batch_normalization_6_ce1 <= ap_const_logic_1;
        else 
            batch_normalization_6_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_6_d0_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            batch_normalization_6_d0 <= ap_const_lv32_BCE38DE3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            batch_normalization_6_d0 <= ap_const_lv32_BBCAE198;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            batch_normalization_6_d0 <= ap_const_lv32_3DA280D0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            batch_normalization_6_d0 <= ap_const_lv32_3D19BEA1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            batch_normalization_6_d0 <= ap_const_lv32_BC3D52D4;
        else 
            batch_normalization_6_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_6_d1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            batch_normalization_6_d1 <= ap_const_lv32_BD38965D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            batch_normalization_6_d1 <= ap_const_lv32_BD920BD0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            batch_normalization_6_d1 <= ap_const_lv32_3CE1CD97;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            batch_normalization_6_d1 <= ap_const_lv32_BA3DAB8C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            batch_normalization_6_d1 <= ap_const_lv32_3C8A528A;
        else 
            batch_normalization_6_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_6_we0_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            batch_normalization_6_we0 <= ap_const_logic_1;
        else 
            batch_normalization_6_we0 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_6_we1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            batch_normalization_6_we1 <= ap_const_logic_1;
        else 
            batch_normalization_6_we1 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_7_address0_assign_proc : process(ap_CS_fsm_state149, ap_CS_fsm_state150, tmp_77_fu_2753_p1, ap_CS_fsm_state154, grp_k2c_batch_norm_fu_2428_outputs_array_address0, ap_CS_fsm_state132, i_1_cast_fu_2733_p1, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state154)) then 
            batch_normalization_7_address0 <= tmp_77_fu_2753_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state150)) then 
            batch_normalization_7_address0 <= i_1_cast_fu_2733_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            batch_normalization_7_address0 <= ap_const_lv12_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            batch_normalization_7_address0 <= ap_const_lv12_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            batch_normalization_7_address0 <= ap_const_lv12_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            batch_normalization_7_address0 <= ap_const_lv12_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            batch_normalization_7_address0 <= ap_const_lv12_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            batch_normalization_7_address0 <= grp_k2c_batch_norm_fu_2428_outputs_array_address0;
        else 
            batch_normalization_7_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_7_address1_assign_proc : process(batch_normalization_21_reg_3099, ap_CS_fsm_state132, ap_CS_fsm_state153, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state153)) then 
            batch_normalization_7_address1 <= batch_normalization_21_reg_3099;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            batch_normalization_7_address1 <= ap_const_lv12_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            batch_normalization_7_address1 <= ap_const_lv12_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            batch_normalization_7_address1 <= ap_const_lv12_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            batch_normalization_7_address1 <= ap_const_lv12_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            batch_normalization_7_address1 <= ap_const_lv12_1;
        else 
            batch_normalization_7_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_7_ce0_assign_proc : process(ap_CS_fsm_state149, ap_CS_fsm_state150, ap_CS_fsm_state154, grp_k2c_batch_norm_fu_2428_outputs_array_ce0, ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state154) or (ap_const_logic_1 = ap_CS_fsm_state150) or (ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            batch_normalization_7_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            batch_normalization_7_ce0 <= grp_k2c_batch_norm_fu_2428_outputs_array_ce0;
        else 
            batch_normalization_7_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_7_ce1_assign_proc : process(grp_generic_tanh_float_s_fu_2415_ap_done, ap_CS_fsm_state132, ap_CS_fsm_state153, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132) or ((ap_const_logic_1 = ap_CS_fsm_state153) and (grp_generic_tanh_float_s_fu_2415_ap_done = ap_const_logic_1)))) then 
            batch_normalization_7_ce1 <= ap_const_logic_1;
        else 
            batch_normalization_7_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_7_d0_assign_proc : process(ap_CS_fsm_state149, grp_k2c_batch_norm_fu_2428_outputs_array_d0, ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            batch_normalization_7_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            batch_normalization_7_d0 <= grp_k2c_batch_norm_fu_2428_outputs_array_d0;
        else 
            batch_normalization_7_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_7_d1_assign_proc : process(grp_generic_tanh_float_s_fu_2415_ap_return, ap_CS_fsm_state132, ap_CS_fsm_state153, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state153)) then 
            batch_normalization_7_d1 <= grp_generic_tanh_float_s_fu_2415_ap_return;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            batch_normalization_7_d1 <= ap_const_lv32_0;
        else 
            batch_normalization_7_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    batch_normalization_7_we0_assign_proc : process(ap_CS_fsm_state149, grp_k2c_batch_norm_fu_2428_outputs_array_we0, ap_CS_fsm_state132, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            batch_normalization_7_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            batch_normalization_7_we0 <= grp_k2c_batch_norm_fu_2428_outputs_array_we0;
        else 
            batch_normalization_7_we0 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_7_we1_assign_proc : process(grp_generic_tanh_float_s_fu_2415_ap_done, ap_CS_fsm_state132, ap_CS_fsm_state153, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state132) or ((ap_const_logic_1 = ap_CS_fsm_state153) and (grp_generic_tanh_float_s_fu_2415_ap_done = ap_const_logic_1)))) then 
            batch_normalization_7_we1 <= ap_const_logic_1;
        else 
            batch_normalization_7_we1 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_9_ce0_assign_proc : process(ap_CS_fsm_state136, grp_k2c_batch_norm_fu_2428_mean_array_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
            batch_normalization_9_ce0 <= grp_k2c_batch_norm_fu_2428_mean_array_ce0;
        else 
            batch_normalization_9_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    batch_normalization_s_ce0_assign_proc : process(ap_CS_fsm_state136, grp_k2c_batch_norm_fu_2428_stdev_array_ce0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
            batch_normalization_s_ce0 <= grp_k2c_batch_norm_fu_2428_stdev_array_ce0;
        else 
            batch_normalization_s_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_bias_array_address0_assign_proc : process(grp_k2c_dense2_1_fu_2394_bias_array_address0, ap_CS_fsm_state102, ap_CS_fsm_state147, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            dense_1_bias_array_address0 <= ap_const_lv12_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            dense_1_bias_array_address0 <= ap_const_lv12_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            dense_1_bias_array_address0 <= ap_const_lv12_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            dense_1_bias_array_address0 <= ap_const_lv12_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            dense_1_bias_array_address0 <= ap_const_lv12_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
            dense_1_bias_array_address0 <= grp_k2c_dense2_1_fu_2394_bias_array_address0;
        else 
            dense_1_bias_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    dense_1_bias_array_address1_assign_proc : process(ap_CS_fsm_state102, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            dense_1_bias_array_address1 <= ap_const_lv12_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            dense_1_bias_array_address1 <= ap_const_lv12_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            dense_1_bias_array_address1 <= ap_const_lv12_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            dense_1_bias_array_address1 <= ap_const_lv12_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            dense_1_bias_array_address1 <= ap_const_lv12_1;
        else 
            dense_1_bias_array_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    dense_1_bias_array_ce0_assign_proc : process(grp_k2c_dense2_1_fu_2394_bias_array_ce0, ap_CS_fsm_state102, ap_CS_fsm_state147, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state102))) then 
            dense_1_bias_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
            dense_1_bias_array_ce0 <= grp_k2c_dense2_1_fu_2394_bias_array_ce0;
        else 
            dense_1_bias_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_bias_array_ce1_assign_proc : process(ap_CS_fsm_state102, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state102))) then 
            dense_1_bias_array_ce1 <= ap_const_logic_1;
        else 
            dense_1_bias_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_bias_array_d0_assign_proc : process(ap_CS_fsm_state102, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            dense_1_bias_array_d0 <= ap_const_lv32_B8B82363;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            dense_1_bias_array_d0 <= ap_const_lv32_B4D5C860;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            dense_1_bias_array_d0 <= ap_const_lv32_B8EE38A9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            dense_1_bias_array_d0 <= ap_const_lv32_38F434D2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            dense_1_bias_array_d0 <= ap_const_lv32_B84A34AE;
        else 
            dense_1_bias_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_1_bias_array_d1_assign_proc : process(ap_CS_fsm_state102, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            dense_1_bias_array_d1 <= ap_const_lv32_38DA7B7A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            dense_1_bias_array_d1 <= ap_const_lv32_3841DAC9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            dense_1_bias_array_d1 <= ap_const_lv32_B91AEC55;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            dense_1_bias_array_d1 <= ap_const_lv32_398A9330;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            dense_1_bias_array_d1 <= ap_const_lv32_3832CB7D;
        else 
            dense_1_bias_array_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_1_bias_array_we0_assign_proc : process(ap_CS_fsm_state102, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state102))) then 
            dense_1_bias_array_we0 <= ap_const_logic_1;
        else 
            dense_1_bias_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_bias_array_we1_assign_proc : process(ap_CS_fsm_state102, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state102))) then 
            dense_1_bias_array_we1 <= ap_const_logic_1;
        else 
            dense_1_bias_array_we1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_fwork_address0_assign_proc : process(ap_CS_fsm_state103, grp_k2c_dense2_1_fu_2394_fwork_address0, ap_CS_fsm_state147, tmp_66_fu_2593_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            dense_1_fwork_address0 <= tmp_66_fu_2593_p1(11 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
            dense_1_fwork_address0 <= grp_k2c_dense2_1_fu_2394_fwork_address0;
        else 
            dense_1_fwork_address0 <= "XXXXXXXXXXX";
        end if; 
    end process;


    dense_1_fwork_ce0_assign_proc : process(ap_CS_fsm_state103, grp_k2c_dense2_1_fu_2394_fwork_ce0, ap_CS_fsm_state147)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            dense_1_fwork_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
            dense_1_fwork_ce0 <= grp_k2c_dense2_1_fu_2394_fwork_ce0;
        else 
            dense_1_fwork_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_fwork_ce1_assign_proc : process(grp_k2c_dense2_1_fu_2394_fwork_ce1, ap_CS_fsm_state147)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
            dense_1_fwork_ce1 <= grp_k2c_dense2_1_fu_2394_fwork_ce1;
        else 
            dense_1_fwork_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_fwork_d0_assign_proc : process(ap_CS_fsm_state103, grp_k2c_dense2_1_fu_2394_fwork_d0, ap_CS_fsm_state147)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            dense_1_fwork_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
            dense_1_fwork_d0 <= grp_k2c_dense2_1_fu_2394_fwork_d0;
        else 
            dense_1_fwork_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_1_fwork_we0_assign_proc : process(ap_CS_fsm_state103, grp_k2c_dense2_1_fu_2394_fwork_we0, ap_CS_fsm_state147)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            dense_1_fwork_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
            dense_1_fwork_we0 <= grp_k2c_dense2_1_fu_2394_fwork_we0;
        else 
            dense_1_fwork_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_output_array_address0_assign_proc : process(ap_CS_fsm_state149, grp_k2c_dense2_1_fu_2394_output_array_address0, grp_k2c_batch_norm_fu_2428_inputs_array_address0, ap_CS_fsm_state102, ap_CS_fsm_state147, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            dense_1_output_array_address0 <= ap_const_lv12_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            dense_1_output_array_address0 <= ap_const_lv12_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            dense_1_output_array_address0 <= ap_const_lv12_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            dense_1_output_array_address0 <= ap_const_lv12_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            dense_1_output_array_address0 <= ap_const_lv12_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            dense_1_output_array_address0 <= grp_k2c_batch_norm_fu_2428_inputs_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
            dense_1_output_array_address0 <= grp_k2c_dense2_1_fu_2394_output_array_address0;
        else 
            dense_1_output_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    dense_1_output_array_address1_assign_proc : process(ap_CS_fsm_state102, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            dense_1_output_array_address1 <= ap_const_lv12_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            dense_1_output_array_address1 <= ap_const_lv12_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            dense_1_output_array_address1 <= ap_const_lv12_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            dense_1_output_array_address1 <= ap_const_lv12_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            dense_1_output_array_address1 <= ap_const_lv12_1;
        else 
            dense_1_output_array_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    dense_1_output_array_ce0_assign_proc : process(ap_CS_fsm_state149, grp_k2c_dense2_1_fu_2394_output_array_ce0, grp_k2c_batch_norm_fu_2428_inputs_array_ce0, ap_CS_fsm_state102, ap_CS_fsm_state147, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state102))) then 
            dense_1_output_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            dense_1_output_array_ce0 <= grp_k2c_batch_norm_fu_2428_inputs_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
            dense_1_output_array_ce0 <= grp_k2c_dense2_1_fu_2394_output_array_ce0;
        else 
            dense_1_output_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_output_array_ce1_assign_proc : process(ap_CS_fsm_state102, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state102))) then 
            dense_1_output_array_ce1 <= ap_const_logic_1;
        else 
            dense_1_output_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_output_array_d0_assign_proc : process(grp_k2c_dense2_1_fu_2394_output_array_d0, ap_CS_fsm_state102, ap_CS_fsm_state147, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state102))) then 
            dense_1_output_array_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
            dense_1_output_array_d0 <= grp_k2c_dense2_1_fu_2394_output_array_d0;
        else 
            dense_1_output_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_1_output_array_we0_assign_proc : process(grp_k2c_dense2_1_fu_2394_output_array_we0, ap_CS_fsm_state102, ap_CS_fsm_state147, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state102))) then 
            dense_1_output_array_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
            dense_1_output_array_we0 <= grp_k2c_dense2_1_fu_2394_output_array_we0;
        else 
            dense_1_output_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_output_array_we1_assign_proc : process(ap_CS_fsm_state102, ap_CS_fsm_state98, ap_CS_fsm_state99, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state99) or (ap_const_logic_1 = ap_CS_fsm_state98) or (ap_const_logic_1 = ap_CS_fsm_state102))) then 
            dense_1_output_array_we1 <= ap_const_logic_1;
        else 
            dense_1_output_array_we1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_output_shape_address0_assign_proc : process(ap_CS_fsm_state102, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            dense_1_output_shape_address0 <= ap_const_lv3_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            dense_1_output_shape_address0 <= ap_const_lv3_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            dense_1_output_shape_address0 <= ap_const_lv3_0;
        else 
            dense_1_output_shape_address0 <= "XXX";
        end if; 
    end process;


    dense_1_output_shape_address1_assign_proc : process(ap_CS_fsm_state102, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            dense_1_output_shape_address1 <= ap_const_lv3_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            dense_1_output_shape_address1 <= ap_const_lv3_2;
        else 
            dense_1_output_shape_address1 <= "XXX";
        end if; 
    end process;


    dense_1_output_shape_ce0_assign_proc : process(ap_CS_fsm_state102, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state102))) then 
            dense_1_output_shape_ce0 <= ap_const_logic_1;
        else 
            dense_1_output_shape_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_output_shape_ce1_assign_proc : process(ap_CS_fsm_state102, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state102))) then 
            dense_1_output_shape_ce1 <= ap_const_logic_1;
        else 
            dense_1_output_shape_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_output_shape_d0_assign_proc : process(ap_CS_fsm_state102, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state102))) then 
            dense_1_output_shape_d0 <= ap_const_lv64_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            dense_1_output_shape_d0 <= ap_const_lv64_A;
        else 
            dense_1_output_shape_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_1_output_shape_we0_assign_proc : process(ap_CS_fsm_state102, ap_CS_fsm_state100, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state100) or (ap_const_logic_1 = ap_CS_fsm_state102))) then 
            dense_1_output_shape_we0 <= ap_const_logic_1;
        else 
            dense_1_output_shape_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_1_output_shape_we1_assign_proc : process(ap_CS_fsm_state102, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or (ap_const_logic_1 = ap_CS_fsm_state102))) then 
            dense_1_output_shape_we1 <= ap_const_logic_1;
        else 
            dense_1_output_shape_we1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_bias_array_address0_assign_proc : process(grp_k2c_dense2_fu_2351_bias_array_address0, ap_CS_fsm_state132, ap_CS_fsm_state160, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            dense_2_bias_array_address0 <= ap_const_lv12_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            dense_2_bias_array_address0 <= ap_const_lv12_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            dense_2_bias_array_address0 <= ap_const_lv12_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
            dense_2_bias_array_address0 <= grp_k2c_dense2_fu_2351_bias_array_address0;
        else 
            dense_2_bias_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    dense_2_bias_array_address1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            dense_2_bias_array_address1 <= ap_const_lv12_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            dense_2_bias_array_address1 <= ap_const_lv12_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            dense_2_bias_array_address1 <= ap_const_lv12_1;
        else 
            dense_2_bias_array_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    dense_2_bias_array_ce0_assign_proc : process(grp_k2c_dense2_fu_2351_bias_array_ce0, ap_CS_fsm_state132, ap_CS_fsm_state160, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            dense_2_bias_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
            dense_2_bias_array_ce0 <= grp_k2c_dense2_fu_2351_bias_array_ce0;
        else 
            dense_2_bias_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_bias_array_ce1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            dense_2_bias_array_ce1 <= ap_const_logic_1;
        else 
            dense_2_bias_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_bias_array_d0_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            dense_2_bias_array_d0 <= ap_const_lv32_3CD9CBB9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            dense_2_bias_array_d0 <= ap_const_lv32_BD01708E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            dense_2_bias_array_d0 <= ap_const_lv32_3D67F4DF;
        else 
            dense_2_bias_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_2_bias_array_d1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            dense_2_bias_array_d1 <= ap_const_lv32_BCFA5777;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            dense_2_bias_array_d1 <= ap_const_lv32_BB42435F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            dense_2_bias_array_d1 <= ap_const_lv32_BC5D1D7F;
        else 
            dense_2_bias_array_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_2_bias_array_we0_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            dense_2_bias_array_we0 <= ap_const_logic_1;
        else 
            dense_2_bias_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_bias_array_we1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            dense_2_bias_array_we1 <= ap_const_logic_1;
        else 
            dense_2_bias_array_we1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_fwork_address0_assign_proc : process(ap_CS_fsm_state133, grp_k2c_dense2_fu_2351_fwork_address0, ap_CS_fsm_state160, tmp_68_fu_2652_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state133)) then 
            dense_2_fwork_address0 <= tmp_68_fu_2652_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
            dense_2_fwork_address0 <= grp_k2c_dense2_fu_2351_fwork_address0;
        else 
            dense_2_fwork_address0 <= "XXXXXXX";
        end if; 
    end process;


    dense_2_fwork_ce0_assign_proc : process(ap_CS_fsm_state133, grp_k2c_dense2_fu_2351_fwork_ce0, ap_CS_fsm_state160)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state133)) then 
            dense_2_fwork_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
            dense_2_fwork_ce0 <= grp_k2c_dense2_fu_2351_fwork_ce0;
        else 
            dense_2_fwork_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_fwork_ce1_assign_proc : process(grp_k2c_dense2_fu_2351_fwork_ce1, ap_CS_fsm_state160)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
            dense_2_fwork_ce1 <= grp_k2c_dense2_fu_2351_fwork_ce1;
        else 
            dense_2_fwork_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_fwork_d0_assign_proc : process(ap_CS_fsm_state133, grp_k2c_dense2_fu_2351_fwork_d0, ap_CS_fsm_state160)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state133)) then 
            dense_2_fwork_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
            dense_2_fwork_d0 <= grp_k2c_dense2_fu_2351_fwork_d0;
        else 
            dense_2_fwork_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_2_fwork_we0_assign_proc : process(ap_CS_fsm_state133, grp_k2c_dense2_fu_2351_fwork_we0, ap_CS_fsm_state160)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state133)) then 
            dense_2_fwork_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
            dense_2_fwork_we0 <= grp_k2c_dense2_fu_2351_fwork_we0;
        else 
            dense_2_fwork_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_kernel_array_address0_assign_proc : process(ap_CS_fsm_state103, grp_k2c_dense2_fu_2351_kernel_array_address0, ap_CS_fsm_state132, ap_CS_fsm_state160, ap_CS_fsm_state104, ap_CS_fsm_state105, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state108, ap_CS_fsm_state109, ap_CS_fsm_state110, ap_CS_fsm_state111, ap_CS_fsm_state112, ap_CS_fsm_state113, ap_CS_fsm_state114, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state117, ap_CS_fsm_state118, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126, ap_CS_fsm_state127, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_3A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_38;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_36;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_34;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_32;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state127)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_30;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_2E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_2C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state124)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_2A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_28;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state122)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_26;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_24;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_22;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_20;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_1E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_1C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_1A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            dense_2_kernel_array_address0 <= ap_const_lv12_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
            dense_2_kernel_array_address0 <= grp_k2c_dense2_fu_2351_kernel_array_address0;
        else 
            dense_2_kernel_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    dense_2_kernel_array_address1_assign_proc : process(ap_CS_fsm_state103, ap_CS_fsm_state132, ap_CS_fsm_state104, ap_CS_fsm_state105, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state108, ap_CS_fsm_state109, ap_CS_fsm_state110, ap_CS_fsm_state111, ap_CS_fsm_state112, ap_CS_fsm_state113, ap_CS_fsm_state114, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state117, ap_CS_fsm_state118, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126, ap_CS_fsm_state127, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_3B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_39;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_37;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_35;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_33;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state127)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_31;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_2F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_2D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state124)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_2B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_29;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state122)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_27;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_25;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_23;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_21;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_1F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_1D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_1B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_17;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            dense_2_kernel_array_address1 <= ap_const_lv12_1;
        else 
            dense_2_kernel_array_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    dense_2_kernel_array_ce0_assign_proc : process(ap_CS_fsm_state103, grp_k2c_dense2_fu_2351_kernel_array_ce0, ap_CS_fsm_state132, ap_CS_fsm_state160, ap_CS_fsm_state104, ap_CS_fsm_state105, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state108, ap_CS_fsm_state109, ap_CS_fsm_state110, ap_CS_fsm_state111, ap_CS_fsm_state112, ap_CS_fsm_state113, ap_CS_fsm_state114, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state117, ap_CS_fsm_state118, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126, ap_CS_fsm_state127, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state127) or (ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            dense_2_kernel_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
            dense_2_kernel_array_ce0 <= grp_k2c_dense2_fu_2351_kernel_array_ce0;
        else 
            dense_2_kernel_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_kernel_array_ce1_assign_proc : process(ap_CS_fsm_state103, ap_CS_fsm_state132, ap_CS_fsm_state104, ap_CS_fsm_state105, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state108, ap_CS_fsm_state109, ap_CS_fsm_state110, ap_CS_fsm_state111, ap_CS_fsm_state112, ap_CS_fsm_state113, ap_CS_fsm_state114, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state117, ap_CS_fsm_state118, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126, ap_CS_fsm_state127, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state103) or (ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state127) or (ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            dense_2_kernel_array_ce1 <= ap_const_logic_1;
        else 
            dense_2_kernel_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_kernel_array_d0_assign_proc : process(ap_CS_fsm_state103, ap_CS_fsm_state132, ap_CS_fsm_state104, ap_CS_fsm_state105, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state108, ap_CS_fsm_state109, ap_CS_fsm_state110, ap_CS_fsm_state111, ap_CS_fsm_state112, ap_CS_fsm_state113, ap_CS_fsm_state114, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state117, ap_CS_fsm_state118, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126, ap_CS_fsm_state127, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_BED77531;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_3E8CBAEA;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_BF04AE67;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_BF4053D3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_3F0F7430;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state127)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_BF3AE895;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_3F573452;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_3E9CC011;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state124)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_3E2C1FA1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_BEA0780F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state122)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_BEBC51F4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_3EE08C10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_BD2427BD;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_3EE13AC1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_BF583B0B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_3DF9A4BD;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_BF2E498A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_BF67C755;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_3F59B383;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_3EFBAC7E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_BE3B5C57;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_3F3E8C8E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_BF1650FA;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_3F32C33B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_BF19E7DF;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_BF321DA0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_BF311716;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_BE1B193D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_BF51EE87;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            dense_2_kernel_array_d0 <= ap_const_lv32_BCF04E2B;
        else 
            dense_2_kernel_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_2_kernel_array_d1_assign_proc : process(ap_CS_fsm_state103, ap_CS_fsm_state132, ap_CS_fsm_state104, ap_CS_fsm_state105, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state108, ap_CS_fsm_state109, ap_CS_fsm_state110, ap_CS_fsm_state111, ap_CS_fsm_state112, ap_CS_fsm_state113, ap_CS_fsm_state114, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state117, ap_CS_fsm_state118, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126, ap_CS_fsm_state127, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_3F5A4165;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_BEE2A44B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_3DCD7374;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state129)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_3E046F38;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state128)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_3F488B87;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state127)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_BE4C781F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state126)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_BF213E7D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state125)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_BED295A3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state124)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_3F5D2126;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state123)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_3EA85A9B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state122)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_3D1E3DD3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state121)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_3D7B000C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state120)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_BF10E5B8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state119)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_BF6821EC;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state118)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_BF188B9E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state117)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_BE995919;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state116)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_3F528877;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state115)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_BF429050;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state114)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_BE11F314;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_3F21ED80;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state112)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_BF4D2C27;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state111)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_3F5E536A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state110)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_BE3A4BE3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state109)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_BE4B1884;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state108)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_3ECB7F98;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state107)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_BD90198E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state106)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_3DBB441F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state105)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_BF52EA41;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_BE0A82C1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            dense_2_kernel_array_d1 <= ap_const_lv32_3F585EED;
        else 
            dense_2_kernel_array_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_2_kernel_array_we0_assign_proc : process(ap_CS_fsm_state103, tmp_67_fu_2598_p2, ap_CS_fsm_state132, ap_CS_fsm_state104, ap_CS_fsm_state105, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state108, ap_CS_fsm_state109, ap_CS_fsm_state110, ap_CS_fsm_state111, ap_CS_fsm_state112, ap_CS_fsm_state113, ap_CS_fsm_state114, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state117, ap_CS_fsm_state118, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126, ap_CS_fsm_state127, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state127) or (ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state132) or ((tmp_67_fu_2598_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state103)))) then 
            dense_2_kernel_array_we0 <= ap_const_logic_1;
        else 
            dense_2_kernel_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_kernel_array_we1_assign_proc : process(ap_CS_fsm_state103, tmp_67_fu_2598_p2, ap_CS_fsm_state132, ap_CS_fsm_state104, ap_CS_fsm_state105, ap_CS_fsm_state106, ap_CS_fsm_state107, ap_CS_fsm_state108, ap_CS_fsm_state109, ap_CS_fsm_state110, ap_CS_fsm_state111, ap_CS_fsm_state112, ap_CS_fsm_state113, ap_CS_fsm_state114, ap_CS_fsm_state115, ap_CS_fsm_state116, ap_CS_fsm_state117, ap_CS_fsm_state118, ap_CS_fsm_state119, ap_CS_fsm_state120, ap_CS_fsm_state121, ap_CS_fsm_state122, ap_CS_fsm_state123, ap_CS_fsm_state124, ap_CS_fsm_state125, ap_CS_fsm_state126, ap_CS_fsm_state127, ap_CS_fsm_state128, ap_CS_fsm_state129, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state129) or (ap_const_logic_1 = ap_CS_fsm_state128) or (ap_const_logic_1 = ap_CS_fsm_state127) or (ap_const_logic_1 = ap_CS_fsm_state126) or (ap_const_logic_1 = ap_CS_fsm_state125) or (ap_const_logic_1 = ap_CS_fsm_state124) or (ap_const_logic_1 = ap_CS_fsm_state123) or (ap_const_logic_1 = ap_CS_fsm_state122) or (ap_const_logic_1 = ap_CS_fsm_state121) or (ap_const_logic_1 = ap_CS_fsm_state120) or (ap_const_logic_1 = ap_CS_fsm_state119) or (ap_const_logic_1 = ap_CS_fsm_state118) or (ap_const_logic_1 = ap_CS_fsm_state117) or (ap_const_logic_1 = ap_CS_fsm_state116) or (ap_const_logic_1 = ap_CS_fsm_state115) or (ap_const_logic_1 = ap_CS_fsm_state114) or (ap_const_logic_1 = ap_CS_fsm_state113) or (ap_const_logic_1 = ap_CS_fsm_state112) or (ap_const_logic_1 = ap_CS_fsm_state111) or (ap_const_logic_1 = ap_CS_fsm_state110) or (ap_const_logic_1 = ap_CS_fsm_state109) or (ap_const_logic_1 = ap_CS_fsm_state108) or (ap_const_logic_1 = ap_CS_fsm_state107) or (ap_const_logic_1 = ap_CS_fsm_state106) or (ap_const_logic_1 = ap_CS_fsm_state105) or (ap_const_logic_1 = ap_CS_fsm_state104) or (ap_const_logic_1 = ap_CS_fsm_state132) or ((tmp_67_fu_2598_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state103)))) then 
            dense_2_kernel_array_we1 <= ap_const_logic_1;
        else 
            dense_2_kernel_array_we1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_kernel_shape_address0_assign_proc : process(grp_k2c_dense2_fu_2351_kernel_shape_address0, ap_CS_fsm_state132, ap_CS_fsm_state160, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            dense_2_kernel_shape_address0 <= ap_const_lv3_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            dense_2_kernel_shape_address0 <= ap_const_lv3_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            dense_2_kernel_shape_address0 <= ap_const_lv3_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
            dense_2_kernel_shape_address0 <= grp_k2c_dense2_fu_2351_kernel_shape_address0;
        else 
            dense_2_kernel_shape_address0 <= "XXX";
        end if; 
    end process;


    dense_2_kernel_shape_address1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            dense_2_kernel_shape_address1 <= ap_const_lv3_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            dense_2_kernel_shape_address1 <= ap_const_lv3_2;
        else 
            dense_2_kernel_shape_address1 <= "XXX";
        end if; 
    end process;


    dense_2_kernel_shape_ce0_assign_proc : process(grp_k2c_dense2_fu_2351_kernel_shape_ce0, ap_CS_fsm_state132, ap_CS_fsm_state160, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            dense_2_kernel_shape_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
            dense_2_kernel_shape_ce0 <= grp_k2c_dense2_fu_2351_kernel_shape_ce0;
        else 
            dense_2_kernel_shape_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_kernel_shape_ce1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            dense_2_kernel_shape_ce1 <= ap_const_logic_1;
        else 
            dense_2_kernel_shape_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_kernel_shape_d0_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state132)) then 
            dense_2_kernel_shape_d0 <= ap_const_lv64_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state131)) then 
            dense_2_kernel_shape_d0 <= ap_const_lv64_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state130)) then 
            dense_2_kernel_shape_d0 <= ap_const_lv64_A;
        else 
            dense_2_kernel_shape_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_2_kernel_shape_we0_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            dense_2_kernel_shape_we0 <= ap_const_logic_1;
        else 
            dense_2_kernel_shape_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_kernel_shape_we1_assign_proc : process(ap_CS_fsm_state132, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            dense_2_kernel_shape_we1 <= ap_const_logic_1;
        else 
            dense_2_kernel_shape_we1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_output_array_address0_assign_proc : process(ap_CS_fsm_state200, ap_enable_reg_pp1_iter0, ap_CS_fsm_state194, ap_CS_fsm_state198, ap_CS_fsm_state199, ap_CS_fsm_pp1_stage0, ap_CS_fsm_state195, tmp_89_fu_2935_p1, ap_CS_fsm_state201, grp_k2c_dense2_fu_2351_output_array_address0, ap_CS_fsm_state132, ap_block_pp1_stage0, ap_CS_fsm_state160, i_3_cast3_fu_2921_p1, ap_CS_fsm_state130, ap_CS_fsm_state131, ap_CS_fsm_state161, ap_CS_fsm_state193)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state201)) then 
            dense_2_output_array_address0 <= tmp_89_fu_2935_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_boolean_0 = ap_block_pp1_stage0))) then 
            dense_2_output_array_address0 <= i_3_cast3_fu_2921_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state195) or (ap_const_logic_1 = ap_CS_fsm_state200) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            dense_2_output_array_address0 <= ap_const_lv12_4;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state199) or (ap_const_logic_1 = ap_CS_fsm_state194) or (ap_const_logic_1 = ap_CS_fsm_state131))) then 
            dense_2_output_array_address0 <= ap_const_lv12_2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state198) or (ap_const_logic_1 = ap_CS_fsm_state193) or (ap_const_logic_1 = ap_CS_fsm_state161) or (ap_const_logic_1 = ap_CS_fsm_state130))) then 
            dense_2_output_array_address0 <= ap_const_lv12_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
            dense_2_output_array_address0 <= grp_k2c_dense2_fu_2351_output_array_address0;
        else 
            dense_2_output_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    dense_2_output_array_address1_assign_proc : process(ap_CS_fsm_state200, ap_CS_fsm_pp1_stage1, ap_CS_fsm_state194, ap_CS_fsm_state198, ap_CS_fsm_state199, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, dense_2_output_array_2_reg_3194_pp1_iter3_reg, ap_CS_fsm_state195, ap_enable_reg_pp1_iter3, ap_CS_fsm_state132, ap_block_pp0_stage0, i_2_cast4_fu_2806_p1, ap_CS_fsm_state130, ap_CS_fsm_state131, ap_block_pp1_stage1, ap_CS_fsm_state193)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            dense_2_output_array_address1 <= dense_2_output_array_2_reg_3194_pp1_iter3_reg;
        elsif (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0))) then 
            dense_2_output_array_address1 <= i_2_cast4_fu_2806_p1(12 - 1 downto 0);
        elsif (((ap_const_logic_1 = ap_CS_fsm_state195) or (ap_const_logic_1 = ap_CS_fsm_state200) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            dense_2_output_array_address1 <= ap_const_lv12_5;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state199) or (ap_const_logic_1 = ap_CS_fsm_state194) or (ap_const_logic_1 = ap_CS_fsm_state131))) then 
            dense_2_output_array_address1 <= ap_const_lv12_3;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state198) or (ap_const_logic_1 = ap_CS_fsm_state193) or (ap_const_logic_1 = ap_CS_fsm_state130))) then 
            dense_2_output_array_address1 <= ap_const_lv12_1;
        else 
            dense_2_output_array_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    dense_2_output_array_ce0_assign_proc : process(ap_CS_fsm_state200, ap_enable_reg_pp1_iter0, ap_CS_fsm_state194, ap_CS_fsm_state198, ap_CS_fsm_state199, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_state195, ap_CS_fsm_state201, grp_k2c_dense2_fu_2351_output_array_ce0, ap_CS_fsm_state132, ap_CS_fsm_state160, ap_CS_fsm_state130, ap_CS_fsm_state131, ap_CS_fsm_state161, ap_CS_fsm_state193)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state201) or (ap_const_logic_1 = ap_CS_fsm_state195) or (ap_const_logic_1 = ap_CS_fsm_state199) or (ap_const_logic_1 = ap_CS_fsm_state198) or (ap_const_logic_1 = ap_CS_fsm_state194) or (ap_const_logic_1 = ap_CS_fsm_state200) or (ap_const_logic_1 = ap_CS_fsm_state193) or (ap_const_logic_1 = ap_CS_fsm_state161) or (ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state132) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then 
            dense_2_output_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
            dense_2_output_array_ce0 <= grp_k2c_dense2_fu_2351_output_array_ce0;
        else 
            dense_2_output_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_output_array_ce1_assign_proc : process(ap_CS_fsm_state200, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_state194, ap_CS_fsm_state198, ap_CS_fsm_state199, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, ap_CS_fsm_state195, ap_enable_reg_pp1_iter3, ap_CS_fsm_state132, ap_CS_fsm_state130, ap_CS_fsm_state131, ap_CS_fsm_state193)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state195) or (ap_const_logic_1 = ap_CS_fsm_state199) or (ap_const_logic_1 = ap_CS_fsm_state198) or (ap_const_logic_1 = ap_CS_fsm_state194) or (ap_const_logic_1 = ap_CS_fsm_state200) or (ap_const_logic_1 = ap_CS_fsm_state193) or (ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state132) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            dense_2_output_array_ce1 <= ap_const_logic_1;
        else 
            dense_2_output_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_output_array_d0_assign_proc : process(ap_CS_fsm_state200, reg_2513, ap_CS_fsm_state198, ap_CS_fsm_state199, grp_k2c_dense2_fu_2351_output_array_d0, ap_CS_fsm_state132, ap_CS_fsm_state160, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state199) or (ap_const_logic_1 = ap_CS_fsm_state198) or (ap_const_logic_1 = ap_CS_fsm_state200))) then 
            dense_2_output_array_d0 <= reg_2513;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            dense_2_output_array_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
            dense_2_output_array_d0 <= grp_k2c_dense2_fu_2351_output_array_d0;
        else 
            dense_2_output_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_2_output_array_d1_assign_proc : process(ap_CS_fsm_state200, ap_CS_fsm_pp1_stage1, ap_CS_fsm_state198, ap_CS_fsm_state199, reg_2518, grp_fu_2477_p2, ap_enable_reg_pp1_iter3, ap_CS_fsm_state132, ap_CS_fsm_state130, ap_CS_fsm_state131, ap_block_pp1_stage1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state199) or (ap_const_logic_1 = ap_CS_fsm_state198) or (ap_const_logic_1 = ap_CS_fsm_state200))) then 
            dense_2_output_array_d1 <= reg_2518;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage1) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1))) then 
            dense_2_output_array_d1 <= grp_fu_2477_p2;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            dense_2_output_array_d1 <= ap_const_lv32_0;
        else 
            dense_2_output_array_d1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_2_output_array_we0_assign_proc : process(ap_CS_fsm_state200, ap_CS_fsm_state198, ap_CS_fsm_state199, grp_k2c_dense2_fu_2351_output_array_we0, ap_CS_fsm_state132, ap_CS_fsm_state160, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state199) or (ap_const_logic_1 = ap_CS_fsm_state198) or (ap_const_logic_1 = ap_CS_fsm_state200) or (ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state132))) then 
            dense_2_output_array_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
            dense_2_output_array_we0 <= grp_k2c_dense2_fu_2351_output_array_we0;
        else 
            dense_2_output_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_2_output_array_we1_assign_proc : process(ap_CS_fsm_state200, ap_CS_fsm_pp1_stage1, ap_block_pp1_stage1_11001, ap_CS_fsm_state198, ap_CS_fsm_state199, tmp_84_reg_3185_pp1_iter3_reg, ap_enable_reg_pp1_iter3, ap_CS_fsm_state132, ap_CS_fsm_state130, ap_CS_fsm_state131)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state199) or (ap_const_logic_1 = ap_CS_fsm_state198) or (ap_const_logic_1 = ap_CS_fsm_state200) or (ap_const_logic_1 = ap_CS_fsm_state131) or (ap_const_logic_1 = ap_CS_fsm_state130) or (ap_const_logic_1 = ap_CS_fsm_state132) or ((ap_const_boolean_0 = ap_block_pp1_stage1_11001) and (tmp_84_reg_3185_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage1)))) then 
            dense_2_output_array_we1 <= ap_const_logic_1;
        else 
            dense_2_output_array_we1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_fwork_address0_assign_proc : process(ap_CS_fsm_state53, grp_k2c_dense_fu_2374_fwork_address0, ap_CS_fsm_state134, tmp_64_fu_2552_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            dense_fwork_address0 <= tmp_64_fu_2552_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state134)) then 
            dense_fwork_address0 <= grp_k2c_dense_fu_2374_fwork_address0;
        else 
            dense_fwork_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_fwork_ce0_assign_proc : process(ap_CS_fsm_state53, grp_k2c_dense_fu_2374_fwork_ce0, ap_CS_fsm_state134)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            dense_fwork_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state134)) then 
            dense_fwork_ce0 <= grp_k2c_dense_fu_2374_fwork_ce0;
        else 
            dense_fwork_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_fwork_ce1_assign_proc : process(grp_k2c_dense_fu_2374_fwork_ce1, ap_CS_fsm_state134)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state134)) then 
            dense_fwork_ce1 <= grp_k2c_dense_fu_2374_fwork_ce1;
        else 
            dense_fwork_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_fwork_d0_assign_proc : process(ap_CS_fsm_state53, grp_k2c_dense_fu_2374_fwork_d0, ap_CS_fsm_state134)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            dense_fwork_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state134)) then 
            dense_fwork_d0 <= grp_k2c_dense_fu_2374_fwork_d0;
        else 
            dense_fwork_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_fwork_we0_assign_proc : process(ap_CS_fsm_state53, grp_k2c_dense_fu_2374_fwork_we0, ap_CS_fsm_state134)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state53)) then 
            dense_fwork_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state134)) then 
            dense_fwork_we0 <= grp_k2c_dense_fu_2374_fwork_we0;
        else 
            dense_fwork_we0 <= ap_const_logic_0;
        end if; 
    end process;

    dense_input_input_array_address0 <= grp_k2c_dense_fu_2374_input_array_address0;
    dense_input_input_array_ce0 <= grp_k2c_dense_fu_2374_input_array_ce0;
    dense_input_input_shape_address0 <= grp_k2c_dense_fu_2374_input_shape_address0;
    dense_input_input_shape_ce0 <= grp_k2c_dense_fu_2374_input_shape_ce0;

    dense_kernel_array_address0_assign_proc : process(tmp_58_reg_2967, grp_k2c_dense_fu_2374_kernel_array_address0, ap_CS_fsm_state52, ap_CS_fsm_state134)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            dense_kernel_array_address0 <= tmp_58_reg_2967(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state134)) then 
            dense_kernel_array_address0 <= grp_k2c_dense_fu_2374_kernel_array_address0;
        else 
            dense_kernel_array_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_kernel_array_ce0_assign_proc : process(grp_k2c_dense_fu_2374_kernel_array_ce0, ap_CS_fsm_state52, ap_CS_fsm_state134)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            dense_kernel_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state134)) then 
            dense_kernel_array_ce0 <= grp_k2c_dense_fu_2374_kernel_array_ce0;
        else 
            dense_kernel_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_kernel_array_we0_assign_proc : process(ap_CS_fsm_state52)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state52)) then 
            dense_kernel_array_we0 <= ap_const_logic_1;
        else 
            dense_kernel_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_output_array_address0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state50, ap_CS_fsm_state136, grp_k2c_dense_fu_2374_dense_output_array_address0, grp_k2c_batch_norm_fu_2428_inputs_array_address0, ap_CS_fsm_state134, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            dense_output_array_address0 <= ap_const_lv12_62;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            dense_output_array_address0 <= ap_const_lv12_60;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            dense_output_array_address0 <= ap_const_lv12_5E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            dense_output_array_address0 <= ap_const_lv12_5C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            dense_output_array_address0 <= ap_const_lv12_5A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            dense_output_array_address0 <= ap_const_lv12_58;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            dense_output_array_address0 <= ap_const_lv12_56;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            dense_output_array_address0 <= ap_const_lv12_54;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            dense_output_array_address0 <= ap_const_lv12_52;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            dense_output_array_address0 <= ap_const_lv12_50;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            dense_output_array_address0 <= ap_const_lv12_4E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            dense_output_array_address0 <= ap_const_lv12_4C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            dense_output_array_address0 <= ap_const_lv12_4A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            dense_output_array_address0 <= ap_const_lv12_48;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            dense_output_array_address0 <= ap_const_lv12_46;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            dense_output_array_address0 <= ap_const_lv12_44;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            dense_output_array_address0 <= ap_const_lv12_42;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            dense_output_array_address0 <= ap_const_lv12_40;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            dense_output_array_address0 <= ap_const_lv12_3E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            dense_output_array_address0 <= ap_const_lv12_3C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            dense_output_array_address0 <= ap_const_lv12_3A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            dense_output_array_address0 <= ap_const_lv12_38;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense_output_array_address0 <= ap_const_lv12_36;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            dense_output_array_address0 <= ap_const_lv12_34;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            dense_output_array_address0 <= ap_const_lv12_32;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            dense_output_array_address0 <= ap_const_lv12_30;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            dense_output_array_address0 <= ap_const_lv12_2E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            dense_output_array_address0 <= ap_const_lv12_2C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            dense_output_array_address0 <= ap_const_lv12_2A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            dense_output_array_address0 <= ap_const_lv12_28;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            dense_output_array_address0 <= ap_const_lv12_26;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dense_output_array_address0 <= ap_const_lv12_24;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dense_output_array_address0 <= ap_const_lv12_22;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dense_output_array_address0 <= ap_const_lv12_20;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dense_output_array_address0 <= ap_const_lv12_1E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            dense_output_array_address0 <= ap_const_lv12_1C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dense_output_array_address0 <= ap_const_lv12_1A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            dense_output_array_address0 <= ap_const_lv12_18;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            dense_output_array_address0 <= ap_const_lv12_16;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dense_output_array_address0 <= ap_const_lv12_14;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dense_output_array_address0 <= ap_const_lv12_12;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dense_output_array_address0 <= ap_const_lv12_10;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dense_output_array_address0 <= ap_const_lv12_E;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dense_output_array_address0 <= ap_const_lv12_C;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dense_output_array_address0 <= ap_const_lv12_A;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dense_output_array_address0 <= ap_const_lv12_8;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dense_output_array_address0 <= ap_const_lv12_6;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_output_array_address0 <= ap_const_lv12_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dense_output_array_address0 <= ap_const_lv12_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            dense_output_array_address0 <= ap_const_lv12_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
            dense_output_array_address0 <= grp_k2c_batch_norm_fu_2428_inputs_array_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state134)) then 
            dense_output_array_address0 <= grp_k2c_dense_fu_2374_dense_output_array_address0;
        else 
            dense_output_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    dense_output_array_address1_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state50, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            dense_output_array_address1 <= ap_const_lv12_63;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            dense_output_array_address1 <= ap_const_lv12_61;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            dense_output_array_address1 <= ap_const_lv12_5F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            dense_output_array_address1 <= ap_const_lv12_5D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            dense_output_array_address1 <= ap_const_lv12_5B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state45)) then 
            dense_output_array_address1 <= ap_const_lv12_59;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state44)) then 
            dense_output_array_address1 <= ap_const_lv12_57;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state43)) then 
            dense_output_array_address1 <= ap_const_lv12_55;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state42)) then 
            dense_output_array_address1 <= ap_const_lv12_53;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state41)) then 
            dense_output_array_address1 <= ap_const_lv12_51;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state40)) then 
            dense_output_array_address1 <= ap_const_lv12_4F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state39)) then 
            dense_output_array_address1 <= ap_const_lv12_4D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state38)) then 
            dense_output_array_address1 <= ap_const_lv12_4B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state37)) then 
            dense_output_array_address1 <= ap_const_lv12_49;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state36)) then 
            dense_output_array_address1 <= ap_const_lv12_47;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state35)) then 
            dense_output_array_address1 <= ap_const_lv12_45;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state34)) then 
            dense_output_array_address1 <= ap_const_lv12_43;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state33)) then 
            dense_output_array_address1 <= ap_const_lv12_41;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state32)) then 
            dense_output_array_address1 <= ap_const_lv12_3F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state31)) then 
            dense_output_array_address1 <= ap_const_lv12_3D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state30)) then 
            dense_output_array_address1 <= ap_const_lv12_3B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state29)) then 
            dense_output_array_address1 <= ap_const_lv12_39;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state28)) then 
            dense_output_array_address1 <= ap_const_lv12_37;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state27)) then 
            dense_output_array_address1 <= ap_const_lv12_35;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state26)) then 
            dense_output_array_address1 <= ap_const_lv12_33;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state25)) then 
            dense_output_array_address1 <= ap_const_lv12_31;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state24)) then 
            dense_output_array_address1 <= ap_const_lv12_2F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state23)) then 
            dense_output_array_address1 <= ap_const_lv12_2D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state22)) then 
            dense_output_array_address1 <= ap_const_lv12_2B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state21)) then 
            dense_output_array_address1 <= ap_const_lv12_29;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state20)) then 
            dense_output_array_address1 <= ap_const_lv12_27;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state19)) then 
            dense_output_array_address1 <= ap_const_lv12_25;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state18)) then 
            dense_output_array_address1 <= ap_const_lv12_23;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state17)) then 
            dense_output_array_address1 <= ap_const_lv12_21;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state16)) then 
            dense_output_array_address1 <= ap_const_lv12_1F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state15)) then 
            dense_output_array_address1 <= ap_const_lv12_1D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state14)) then 
            dense_output_array_address1 <= ap_const_lv12_1B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state13)) then 
            dense_output_array_address1 <= ap_const_lv12_19;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            dense_output_array_address1 <= ap_const_lv12_17;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            dense_output_array_address1 <= ap_const_lv12_15;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            dense_output_array_address1 <= ap_const_lv12_13;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            dense_output_array_address1 <= ap_const_lv12_11;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
            dense_output_array_address1 <= ap_const_lv12_F;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            dense_output_array_address1 <= ap_const_lv12_D;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            dense_output_array_address1 <= ap_const_lv12_B;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            dense_output_array_address1 <= ap_const_lv12_9;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            dense_output_array_address1 <= ap_const_lv12_7;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            dense_output_array_address1 <= ap_const_lv12_5;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            dense_output_array_address1 <= ap_const_lv12_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            dense_output_array_address1 <= ap_const_lv12_1;
        else 
            dense_output_array_address1 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    dense_output_array_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state50, ap_CS_fsm_state136, grp_k2c_dense_fu_2374_dense_output_array_ce0, grp_k2c_batch_norm_fu_2428_inputs_array_ce0, ap_CS_fsm_state134, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            dense_output_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
            dense_output_array_ce0 <= grp_k2c_batch_norm_fu_2428_inputs_array_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state134)) then 
            dense_output_array_ce0 <= grp_k2c_dense_fu_2374_dense_output_array_ce0;
        else 
            dense_output_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_output_array_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state50, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            dense_output_array_ce1 <= ap_const_logic_1;
        else 
            dense_output_array_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_output_array_d0_assign_proc : process(ap_CS_fsm_state1, ap_CS_fsm_state50, grp_k2c_dense_fu_2374_dense_output_array_d0, ap_CS_fsm_state134, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state1) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            dense_output_array_d0 <= ap_const_lv32_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state134)) then 
            dense_output_array_d0 <= grp_k2c_dense_fu_2374_dense_output_array_d0;
        else 
            dense_output_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_output_array_we0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state50, grp_k2c_dense_fu_2374_dense_output_array_we0, ap_CS_fsm_state134, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            dense_output_array_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state134)) then 
            dense_output_array_we0 <= grp_k2c_dense_fu_2374_dense_output_array_we0;
        else 
            dense_output_array_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_output_array_we1_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state50, ap_CS_fsm_state2, ap_CS_fsm_state3, ap_CS_fsm_state4, ap_CS_fsm_state5, ap_CS_fsm_state6, ap_CS_fsm_state7, ap_CS_fsm_state8, ap_CS_fsm_state9, ap_CS_fsm_state10, ap_CS_fsm_state11, ap_CS_fsm_state12, ap_CS_fsm_state13, ap_CS_fsm_state14, ap_CS_fsm_state15, ap_CS_fsm_state16, ap_CS_fsm_state17, ap_CS_fsm_state18, ap_CS_fsm_state19, ap_CS_fsm_state20, ap_CS_fsm_state21, ap_CS_fsm_state22, ap_CS_fsm_state23, ap_CS_fsm_state24, ap_CS_fsm_state25, ap_CS_fsm_state26, ap_CS_fsm_state27, ap_CS_fsm_state28, ap_CS_fsm_state29, ap_CS_fsm_state30, ap_CS_fsm_state31, ap_CS_fsm_state32, ap_CS_fsm_state33, ap_CS_fsm_state34, ap_CS_fsm_state35, ap_CS_fsm_state36, ap_CS_fsm_state37, ap_CS_fsm_state38, ap_CS_fsm_state39, ap_CS_fsm_state40, ap_CS_fsm_state41, ap_CS_fsm_state42, ap_CS_fsm_state43, ap_CS_fsm_state44, ap_CS_fsm_state45, ap_CS_fsm_state46, ap_CS_fsm_state47, ap_CS_fsm_state48, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48) or (ap_const_logic_1 = ap_CS_fsm_state47) or (ap_const_logic_1 = ap_CS_fsm_state46) or (ap_const_logic_1 = ap_CS_fsm_state45) or (ap_const_logic_1 = ap_CS_fsm_state44) or (ap_const_logic_1 = ap_CS_fsm_state43) or (ap_const_logic_1 = ap_CS_fsm_state42) or (ap_const_logic_1 = ap_CS_fsm_state41) or (ap_const_logic_1 = ap_CS_fsm_state40) or (ap_const_logic_1 = ap_CS_fsm_state39) or (ap_const_logic_1 = ap_CS_fsm_state38) or (ap_const_logic_1 = ap_CS_fsm_state37) or (ap_const_logic_1 = ap_CS_fsm_state36) or (ap_const_logic_1 = ap_CS_fsm_state35) or (ap_const_logic_1 = ap_CS_fsm_state34) or (ap_const_logic_1 = ap_CS_fsm_state33) or (ap_const_logic_1 = ap_CS_fsm_state32) or (ap_const_logic_1 = ap_CS_fsm_state31) or (ap_const_logic_1 = ap_CS_fsm_state30) or (ap_const_logic_1 = ap_CS_fsm_state29) or (ap_const_logic_1 = ap_CS_fsm_state28) or (ap_const_logic_1 = ap_CS_fsm_state27) or (ap_const_logic_1 = ap_CS_fsm_state26) or (ap_const_logic_1 = ap_CS_fsm_state25) or (ap_const_logic_1 = ap_CS_fsm_state24) or (ap_const_logic_1 = ap_CS_fsm_state23) or (ap_const_logic_1 = ap_CS_fsm_state22) or (ap_const_logic_1 = ap_CS_fsm_state21) or (ap_const_logic_1 = ap_CS_fsm_state20) or (ap_const_logic_1 = ap_CS_fsm_state19) or (ap_const_logic_1 = ap_CS_fsm_state18) or (ap_const_logic_1 = ap_CS_fsm_state17) or (ap_const_logic_1 = ap_CS_fsm_state16) or (ap_const_logic_1 = ap_CS_fsm_state15) or (ap_const_logic_1 = ap_CS_fsm_state14) or (ap_const_logic_1 = ap_CS_fsm_state13) or (ap_const_logic_1 = ap_CS_fsm_state12) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state8) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state6) or (ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3) or (ap_const_logic_1 = ap_CS_fsm_state2) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            dense_output_array_we1 <= ap_const_logic_1;
        else 
            dense_output_array_we1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_output_shape_address0_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state48, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            dense_output_shape_address0 <= ap_const_lv3_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            dense_output_shape_address0 <= ap_const_lv3_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            dense_output_shape_address0 <= ap_const_lv3_0;
        else 
            dense_output_shape_address0 <= "XXX";
        end if; 
    end process;


    dense_output_shape_address1_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state49)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state50)) then 
            dense_output_shape_address1 <= ap_const_lv3_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state49)) then 
            dense_output_shape_address1 <= ap_const_lv3_2;
        else 
            dense_output_shape_address1 <= "XXX";
        end if; 
    end process;


    dense_output_shape_ce0_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state48, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            dense_output_shape_ce0 <= ap_const_logic_1;
        else 
            dense_output_shape_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_output_shape_ce1_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            dense_output_shape_ce1 <= ap_const_logic_1;
        else 
            dense_output_shape_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dense_output_shape_d0_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state48, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            dense_output_shape_d0 <= ap_const_lv64_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state48)) then 
            dense_output_shape_d0 <= ap_const_lv64_64;
        else 
            dense_output_shape_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dense_output_shape_we0_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state48, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49) or (ap_const_logic_1 = ap_CS_fsm_state48))) then 
            dense_output_shape_we0 <= ap_const_logic_1;
        else 
            dense_output_shape_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dense_output_shape_we1_assign_proc : process(ap_CS_fsm_state50, ap_CS_fsm_state49)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state50) or (ap_const_logic_1 = ap_CS_fsm_state49))) then 
            dense_output_shape_we1 <= ap_const_logic_1;
        else 
            dense_output_shape_we1 <= ap_const_logic_0;
        end if; 
    end process;


    dropout_2_output_arr_address0_assign_proc : process(tmp_73_reg_3060, grp_k2c_dense2_1_fu_2394_input_array_address0, ap_CS_fsm_state146, ap_CS_fsm_state147)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state146)) then 
            dropout_2_output_arr_address0 <= tmp_73_reg_3060(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
            dropout_2_output_arr_address0 <= grp_k2c_dense2_1_fu_2394_input_array_address0;
        else 
            dropout_2_output_arr_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    dropout_2_output_arr_ce0_assign_proc : process(grp_k2c_dense2_1_fu_2394_input_array_ce0, ap_CS_fsm_state146, ap_CS_fsm_state147)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state146)) then 
            dropout_2_output_arr_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
            dropout_2_output_arr_ce0 <= grp_k2c_dense2_1_fu_2394_input_array_ce0;
        else 
            dropout_2_output_arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dropout_2_output_arr_we0_assign_proc : process(ap_CS_fsm_state146)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state146)) then 
            dropout_2_output_arr_we0 <= ap_const_logic_1;
        else 
            dropout_2_output_arr_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dropout_2_output_sha_address0_assign_proc : process(ap_CS_fsm_state141, grp_k2c_dense2_1_fu_2394_input_shape_address0, ap_CS_fsm_state144, ap_CS_fsm_state147, ap_CS_fsm_state143)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state144)) then 
            dropout_2_output_sha_address0 <= ap_const_lv3_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state143)) then 
            dropout_2_output_sha_address0 <= ap_const_lv3_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state141)) then 
            dropout_2_output_sha_address0 <= ap_const_lv3_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
            dropout_2_output_sha_address0 <= grp_k2c_dense2_1_fu_2394_input_shape_address0;
        else 
            dropout_2_output_sha_address0 <= "XXX";
        end if; 
    end process;


    dropout_2_output_sha_address1_assign_proc : process(ap_CS_fsm_state144, ap_CS_fsm_state143)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state144)) then 
            dropout_2_output_sha_address1 <= ap_const_lv3_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state143)) then 
            dropout_2_output_sha_address1 <= ap_const_lv3_2;
        else 
            dropout_2_output_sha_address1 <= "XXX";
        end if; 
    end process;


    dropout_2_output_sha_ce0_assign_proc : process(ap_CS_fsm_state141, grp_k2c_dense2_1_fu_2394_input_shape_ce0, ap_CS_fsm_state144, ap_CS_fsm_state147, ap_CS_fsm_state143)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state141) or (ap_const_logic_1 = ap_CS_fsm_state143) or (ap_const_logic_1 = ap_CS_fsm_state144))) then 
            dropout_2_output_sha_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state147)) then 
            dropout_2_output_sha_ce0 <= grp_k2c_dense2_1_fu_2394_input_shape_ce0;
        else 
            dropout_2_output_sha_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dropout_2_output_sha_ce1_assign_proc : process(ap_CS_fsm_state144, ap_CS_fsm_state143)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state143) or (ap_const_logic_1 = ap_CS_fsm_state144))) then 
            dropout_2_output_sha_ce1 <= ap_const_logic_1;
        else 
            dropout_2_output_sha_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dropout_2_output_sha_d0_assign_proc : process(ap_CS_fsm_state141, ap_CS_fsm_state144, ap_CS_fsm_state143)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state143) or (ap_const_logic_1 = ap_CS_fsm_state144))) then 
            dropout_2_output_sha_d0 <= ap_const_lv64_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state141)) then 
            dropout_2_output_sha_d0 <= ap_const_lv64_64;
        else 
            dropout_2_output_sha_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dropout_2_output_sha_we0_assign_proc : process(ap_CS_fsm_state141, tmp_71_fu_2697_p2, ap_CS_fsm_state144, ap_CS_fsm_state143)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state143) or (ap_const_logic_1 = ap_CS_fsm_state144) or ((tmp_71_fu_2697_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state141)))) then 
            dropout_2_output_sha_we0 <= ap_const_logic_1;
        else 
            dropout_2_output_sha_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dropout_2_output_sha_we1_assign_proc : process(ap_CS_fsm_state144, ap_CS_fsm_state143)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state143) or (ap_const_logic_1 = ap_CS_fsm_state144))) then 
            dropout_2_output_sha_we1 <= ap_const_logic_1;
        else 
            dropout_2_output_sha_we1 <= ap_const_logic_0;
        end if; 
    end process;


    dropout_3_output_arr_address0_assign_proc : process(tmp_80_reg_3133, grp_k2c_dense2_fu_2351_input_array_address0, ap_CS_fsm_state159, ap_CS_fsm_state160)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state159)) then 
            dropout_3_output_arr_address0 <= tmp_80_reg_3133(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
            dropout_3_output_arr_address0 <= grp_k2c_dense2_fu_2351_input_array_address0;
        else 
            dropout_3_output_arr_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    dropout_3_output_arr_ce0_assign_proc : process(grp_k2c_dense2_fu_2351_input_array_ce0, ap_CS_fsm_state159, ap_CS_fsm_state160)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state159)) then 
            dropout_3_output_arr_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
            dropout_3_output_arr_ce0 <= grp_k2c_dense2_fu_2351_input_array_ce0;
        else 
            dropout_3_output_arr_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dropout_3_output_arr_we0_assign_proc : process(ap_CS_fsm_state159)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state159)) then 
            dropout_3_output_arr_we0 <= ap_const_logic_1;
        else 
            dropout_3_output_arr_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dropout_3_output_sha_address0_assign_proc : process(ap_CS_fsm_state154, grp_k2c_dense2_fu_2351_input_shape_address0, ap_CS_fsm_state157, ap_CS_fsm_state160, ap_CS_fsm_state156)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state157)) then 
            dropout_3_output_sha_address0 <= ap_const_lv3_4;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state156)) then 
            dropout_3_output_sha_address0 <= ap_const_lv3_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state154)) then 
            dropout_3_output_sha_address0 <= ap_const_lv3_0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
            dropout_3_output_sha_address0 <= grp_k2c_dense2_fu_2351_input_shape_address0;
        else 
            dropout_3_output_sha_address0 <= "XXX";
        end if; 
    end process;


    dropout_3_output_sha_address1_assign_proc : process(ap_CS_fsm_state157, ap_CS_fsm_state156)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state157)) then 
            dropout_3_output_sha_address1 <= ap_const_lv3_3;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state156)) then 
            dropout_3_output_sha_address1 <= ap_const_lv3_2;
        else 
            dropout_3_output_sha_address1 <= "XXX";
        end if; 
    end process;


    dropout_3_output_sha_ce0_assign_proc : process(ap_CS_fsm_state154, grp_k2c_dense2_fu_2351_input_shape_ce0, ap_CS_fsm_state157, ap_CS_fsm_state160, ap_CS_fsm_state156)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state154) or (ap_const_logic_1 = ap_CS_fsm_state156) or (ap_const_logic_1 = ap_CS_fsm_state157))) then 
            dropout_3_output_sha_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state160)) then 
            dropout_3_output_sha_ce0 <= grp_k2c_dense2_fu_2351_input_shape_ce0;
        else 
            dropout_3_output_sha_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    dropout_3_output_sha_ce1_assign_proc : process(ap_CS_fsm_state157, ap_CS_fsm_state156)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state156) or (ap_const_logic_1 = ap_CS_fsm_state157))) then 
            dropout_3_output_sha_ce1 <= ap_const_logic_1;
        else 
            dropout_3_output_sha_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    dropout_3_output_sha_d0_assign_proc : process(ap_CS_fsm_state154, ap_CS_fsm_state157, ap_CS_fsm_state156)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state156) or (ap_const_logic_1 = ap_CS_fsm_state157))) then 
            dropout_3_output_sha_d0 <= ap_const_lv64_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state154)) then 
            dropout_3_output_sha_d0 <= ap_const_lv64_A;
        else 
            dropout_3_output_sha_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    dropout_3_output_sha_we0_assign_proc : process(ap_CS_fsm_state154, tmp_78_fu_2758_p2, ap_CS_fsm_state157, ap_CS_fsm_state156)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state156) or (ap_const_logic_1 = ap_CS_fsm_state157) or ((tmp_78_fu_2758_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state154)))) then 
            dropout_3_output_sha_we0 <= ap_const_logic_1;
        else 
            dropout_3_output_sha_we0 <= ap_const_logic_0;
        end if; 
    end process;


    dropout_3_output_sha_we1_assign_proc : process(ap_CS_fsm_state157, ap_CS_fsm_state156)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state156) or (ap_const_logic_1 = ap_CS_fsm_state157))) then 
            dropout_3_output_sha_we1 <= ap_const_logic_1;
        else 
            dropout_3_output_sha_we1 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_2800_p2 <= "1" when (i_2_reg_2296 = ap_const_lv3_6) else "0";
    exitcond2_fu_2677_p2 <= "1" when (i_cast_fu_2672_p1 = batch_normalization_14_reg_3010) else "0";
    exitcond_fu_2738_p2 <= "1" when (i_1_cast_fu_2733_p1 = batch_normalization_20_reg_3083) else "0";
    face_classifier_c_de_address0 <= tmp_58_fu_2535_p1(19 - 1 downto 0);

    face_classifier_c_de_ce0_assign_proc : process(ap_CS_fsm_state51)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state51)) then 
            face_classifier_c_de_ce0 <= ap_const_logic_1;
        else 
            face_classifier_c_de_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_2451_opcode_assign_proc : process(ap_enable_reg_pp1_iter0, tmp_84_reg_3185, tmp_84_reg_3185_pp1_iter3_reg, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp1_stage3, ap_enable_reg_pp1_iter3, ap_block_pp1_stage3_00001, ap_block_pp1_stage2_00001)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage2_00001) and (tmp_84_reg_3185 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            grp_fu_2451_opcode <= ap_const_lv2_1;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage3_00001) and (tmp_84_reg_3185_pp1_iter3_reg = ap_const_lv1_0) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then 
            grp_fu_2451_opcode <= ap_const_lv2_0;
        else 
            grp_fu_2451_opcode <= "XX";
        end if; 
    end process;


    grp_fu_2451_p0_assign_proc : process(sum_reg_2328, reg_2506, ap_enable_reg_pp1_iter0, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp1_stage3, ap_enable_reg_pp1_iter3, ap_block_pp1_stage2, ap_block_pp1_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then 
            grp_fu_2451_p0 <= sum_reg_2328;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            grp_fu_2451_p0 <= reg_2506;
        else 
            grp_fu_2451_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_2451_p1_assign_proc : process(xmax1_reg_2307, ap_enable_reg_pp1_iter0, tmp_88_reg_3205, ap_CS_fsm_pp1_stage2, ap_CS_fsm_pp1_stage3, ap_enable_reg_pp1_iter3, ap_block_pp1_stage2, ap_block_pp1_stage3)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage3) and (ap_enable_reg_pp1_iter3 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage3))) then 
            grp_fu_2451_p1 <= tmp_88_reg_3205;
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage2) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage2) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then 
            grp_fu_2451_p1 <= xmax1_reg_2307;
        else 
            grp_fu_2451_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_2457_p0_assign_proc : process(reg_2506, ap_CS_fsm_state197, dense_2_output_array_6_reg_3226, ap_CS_fsm_state195, dense_2_output_array_8_reg_3236, ap_CS_fsm_state196)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state197)) then 
            grp_fu_2457_p0 <= dense_2_output_array_8_reg_3236;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state196)) then 
            grp_fu_2457_p0 <= dense_2_output_array_6_reg_3226;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state195)) then 
            grp_fu_2457_p0 <= reg_2506;
        else 
            grp_fu_2457_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_2461_p0_assign_proc : process(ap_CS_fsm_state197, dense_2_output_array_5_reg_3221, ap_CS_fsm_state195, dense_2_output_array_7_reg_3231, ap_CS_fsm_state196, dense_2_output_array_9_reg_3241)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state197)) then 
            grp_fu_2461_p0 <= dense_2_output_array_9_reg_3241;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state196)) then 
            grp_fu_2461_p0 <= dense_2_output_array_7_reg_3231;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state195)) then 
            grp_fu_2461_p0 <= dense_2_output_array_5_reg_3221;
        else 
            grp_fu_2461_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_generic_tanh_float_s_fu_2415_ap_start <= grp_generic_tanh_float_s_fu_2415_ap_start_reg;

    grp_generic_tanh_float_s_fu_2415_t_in_assign_proc : process(batch_normalization_16_reg_3037, batch_normalization_22_reg_3110, ap_CS_fsm_state140, ap_CS_fsm_state153)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state153)) then 
            grp_generic_tanh_float_s_fu_2415_t_in <= batch_normalization_22_reg_3110;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state140)) then 
            grp_generic_tanh_float_s_fu_2415_t_in <= batch_normalization_16_reg_3037;
        else 
            grp_generic_tanh_float_s_fu_2415_t_in <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_k2c_batch_norm_fu_2428_ap_start <= grp_k2c_batch_norm_fu_2428_ap_start_reg;

    grp_k2c_batch_norm_fu_2428_beta_array_q0_assign_proc : process(batch_normalization_11_q0, batch_normalization_4_q0, ap_CS_fsm_state136, ap_CS_fsm_state149)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            grp_k2c_batch_norm_fu_2428_beta_array_q0 <= batch_normalization_4_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
            grp_k2c_batch_norm_fu_2428_beta_array_q0 <= batch_normalization_11_q0;
        else 
            grp_k2c_batch_norm_fu_2428_beta_array_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_k2c_batch_norm_fu_2428_gamma_array_q0_assign_proc : process(batch_normalization_10_q0, batch_normalization_5_q0, ap_CS_fsm_state136, ap_CS_fsm_state149)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            grp_k2c_batch_norm_fu_2428_gamma_array_q0 <= batch_normalization_5_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
            grp_k2c_batch_norm_fu_2428_gamma_array_q0 <= batch_normalization_10_q0;
        else 
            grp_k2c_batch_norm_fu_2428_gamma_array_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_k2c_batch_norm_fu_2428_inputs_array_q0_assign_proc : process(dense_output_array_q0, dense_1_output_array_q0, ap_CS_fsm_state136, ap_CS_fsm_state149)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            grp_k2c_batch_norm_fu_2428_inputs_array_q0 <= dense_1_output_array_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
            grp_k2c_batch_norm_fu_2428_inputs_array_q0 <= dense_output_array_q0;
        else 
            grp_k2c_batch_norm_fu_2428_inputs_array_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_k2c_batch_norm_fu_2428_inputs_numel_read_assign_proc : process(dense_output_numel, reg_2495, ap_CS_fsm_state136, ap_CS_fsm_state149)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            grp_k2c_batch_norm_fu_2428_inputs_numel_read <= reg_2495;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
            grp_k2c_batch_norm_fu_2428_inputs_numel_read <= dense_output_numel;
        else 
            grp_k2c_batch_norm_fu_2428_inputs_numel_read <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_k2c_batch_norm_fu_2428_mean_array_q0_assign_proc : process(batch_normalization_9_q0, batch_normalization_6_q0, ap_CS_fsm_state136, ap_CS_fsm_state149)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            grp_k2c_batch_norm_fu_2428_mean_array_q0 <= batch_normalization_6_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
            grp_k2c_batch_norm_fu_2428_mean_array_q0 <= batch_normalization_9_q0;
        else 
            grp_k2c_batch_norm_fu_2428_mean_array_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_k2c_batch_norm_fu_2428_stdev_array_q0_assign_proc : process(batch_normalization_s_q0, batch_normalization_13_q0, ap_CS_fsm_state136, ap_CS_fsm_state149)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state149)) then 
            grp_k2c_batch_norm_fu_2428_stdev_array_q0 <= batch_normalization_13_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state136)) then 
            grp_k2c_batch_norm_fu_2428_stdev_array_q0 <= batch_normalization_s_q0;
        else 
            grp_k2c_batch_norm_fu_2428_stdev_array_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_k2c_dense2_1_fu_2394_ap_start <= grp_k2c_dense2_1_fu_2394_ap_start_reg;
    grp_k2c_dense2_fu_2351_ap_start <= grp_k2c_dense2_fu_2351_ap_start_reg;
    grp_k2c_dense_fu_2374_ap_start <= grp_k2c_dense_fu_2374_ap_start_reg;
    i_1_cast_fu_2733_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_1_reg_2263),64));
    i_2_cast4_fu_2806_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_2_reg_2296),64));
    i_36_fu_2682_p2 <= std_logic_vector(unsigned(i_reg_2230) + unsigned(ap_const_lv12_1));
    i_37_fu_2743_p2 <= std_logic_vector(unsigned(i_1_reg_2263) + unsigned(ap_const_lv12_1));
    i_38_fu_2811_p2 <= std_logic_vector(unsigned(ap_const_lv3_1) + unsigned(i_2_reg_2296));
    i_39_fu_2915_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_3_phi_fu_2321_p4) + unsigned(ap_const_lv3_1));
    i_3_cast3_fu_2921_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ap_phi_mux_i_3_phi_fu_2321_p4),64));
    i_cast_fu_2672_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_2230),64));
    indvarinc1_fu_2587_p2 <= std_logic_vector(unsigned(invdar1_reg_2208) + unsigned(ap_const_lv11_1));
    indvarinc2_fu_2646_p2 <= std_logic_vector(unsigned(invdar2_reg_2219) + unsigned(ap_const_lv7_1));
    indvarinc_fu_2546_p2 <= std_logic_vector(unsigned(invdar_reg_2197) + unsigned(ap_const_lv19_1));
    j_3_fu_2779_p2 <= std_logic_vector(unsigned(j_2_reg_2285) + unsigned(ap_const_lv12_1));
    j_5_fu_2946_p2 <= std_logic_vector(signed(j_4_reg_2340) + signed(ap_const_lv32_1));
    j_7_fu_2702_p2 <= std_logic_vector(unsigned(j_s_reg_2241) + unsigned(ap_const_lv12_1));
    j_9_fu_2718_p2 <= std_logic_vector(unsigned(j_8_reg_2252) + unsigned(ap_const_lv12_1));
    j_fu_2763_p2 <= std_logic_vector(unsigned(j_1_reg_2274) + unsigned(ap_const_lv12_1));
    notlhs1_fu_2871_p2 <= "0" when (tmp_17_fu_2839_p4 = ap_const_lv8_FF) else "1";
    notlhs_fu_2853_p2 <= "0" when (tmp_15_fu_2821_p4 = ap_const_lv8_FF) else "1";
    notrhs1_fu_2877_p2 <= "1" when (tmp_93_fu_2849_p1 = ap_const_lv23_0) else "0";
    notrhs_fu_2859_p2 <= "1" when (tmp_92_fu_2831_p1 = ap_const_lv23_0) else "0";
    tmp_15_fu_2821_p4 <= xmax_2_to_int_fu_2817_p1(30 downto 23);
    tmp_17_fu_2839_p4 <= xmax1_to_int_fu_2835_p1(30 downto 23);
    tmp_19_fu_2865_p2 <= (notrhs_fu_2859_p2 or notlhs_fu_2853_p2);
    tmp_20_fu_2883_p2 <= (notrhs1_fu_2877_p2 or notlhs1_fu_2871_p2);
    tmp_21_fu_2889_p2 <= (tmp_20_fu_2883_p2 and tmp_19_fu_2865_p2);
    tmp_23_fu_2895_p2 <= (tmp_22_fu_2471_p2 and tmp_21_fu_2889_p2);
    tmp_57_fu_2529_p2 <= std_logic_vector(unsigned(tmp_s_reg_2186) + unsigned(ap_const_lv19_1));
    tmp_58_fu_2535_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_s_reg_2186),64));
    tmp_59_fu_2540_p2 <= "1" when (tmp_s_reg_2186 = ap_const_lv19_40037) else "0";
    tmp_64_fu_2552_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar_reg_2197),64));
    tmp_65_fu_2557_p2 <= "1" when (invdar_reg_2197 = ap_const_lv19_40A75) else "0";
    tmp_66_fu_2593_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar1_reg_2208),64));
    tmp_67_fu_2598_p2 <= "1" when (invdar1_reg_2208 = ap_const_lv11_44B) else "0";
    tmp_68_fu_2652_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(invdar2_reg_2219),64));
    tmp_69_fu_2657_p2 <= "1" when (invdar2_reg_2219 = ap_const_lv7_45) else "0";
    tmp_70_fu_2692_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_s_reg_2241),64));
    tmp_71_fu_2697_p2 <= "1" when (unsigned(tmp_70_fu_2692_p1) < unsigned(batch_normalization_14_reg_3010)) else "0";
    tmp_73_fu_2708_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_8_reg_2252),64));
    tmp_74_fu_2713_p2 <= "1" when (unsigned(tmp_73_fu_2708_p1) < unsigned(batch_normalization_14_reg_3010)) else "0";
    tmp_77_fu_2753_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_2274),64));
    tmp_78_fu_2758_p2 <= "1" when (unsigned(tmp_77_fu_2753_p1) < unsigned(batch_normalization_20_reg_3083)) else "0";
    tmp_80_fu_2769_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_2_reg_2285),64));
    tmp_81_fu_2774_p2 <= "1" when (unsigned(tmp_80_fu_2769_p1) < unsigned(batch_normalization_20_reg_3083)) else "0";
    tmp_84_fu_2909_p2 <= "1" when (ap_phi_mux_i_3_phi_fu_2321_p4 = ap_const_lv3_6) else "0";
        tmp_89_fu_2935_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(j_4_reg_2340),64));

    tmp_90_fu_2940_p2 <= "1" when (unsigned(tmp_89_fu_2935_p1) < unsigned(reg_2501)) else "0";
    tmp_92_fu_2831_p1 <= xmax_2_to_int_fu_2817_p1(23 - 1 downto 0);
    tmp_93_fu_2849_p1 <= xmax1_to_int_fu_2835_p1(23 - 1 downto 0);
    xmax1_to_int_fu_2835_p1 <= xmax1_reg_2307;
    xmax_1_fu_2901_p3 <= 
        dense_2_output_array_q1 when (tmp_23_fu_2895_p2(0) = '1') else 
        xmax1_reg_2307;
    xmax_2_to_int_fu_2817_p1 <= dense_2_output_array_q1;
end behav;
