-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k2c_dot_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    C_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    C_array_ce0 : OUT STD_LOGIC;
    C_array_we0 : OUT STD_LOGIC;
    C_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    Ar_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    Ar_array_ce0 : OUT STD_LOGIC;
    Ar_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    Ar_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
    Ar_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    Ar_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    Ar_shape_ce0 : OUT STD_LOGIC;
    Ar_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    B_array_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    B_array_ce0 : OUT STD_LOGIC;
    B_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    B_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    B_shape_ce0 : OUT STD_LOGIC;
    B_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    axesA_address0 : OUT STD_LOGIC_VECTOR (0 downto 0);
    axesA_ce0 : OUT STD_LOGIC;
    axesA_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    fwork_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    fwork_ce0 : OUT STD_LOGIC;
    fwork_we0 : OUT STD_LOGIC;
    fwork_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fwork_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fwork_address1 : OUT STD_LOGIC_VECTOR (18 downto 0);
    fwork_ce1 : OUT STD_LOGIC;
    fwork_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of k2c_dot_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000";
    constant ap_ST_fsm_state13 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000";
    constant ap_ST_fsm_state14 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000";
    constant ap_ST_fsm_state15 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000";
    constant ap_ST_fsm_state16 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000";
    constant ap_ST_fsm_state17 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000";
    constant ap_ST_fsm_state18 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000";
    constant ap_ST_fsm_state19 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000";
    constant ap_ST_fsm_state20 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000";
    constant ap_ST_fsm_state21 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000";
    constant ap_ST_fsm_state22 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000";
    constant ap_ST_fsm_state23 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000";
    constant ap_ST_fsm_state24 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000";
    constant ap_ST_fsm_state25 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000";
    constant ap_ST_fsm_state26 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000";
    constant ap_ST_fsm_state27 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000";
    constant ap_ST_fsm_state28 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000";
    constant ap_ST_fsm_state29 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000";
    constant ap_ST_fsm_state30 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000";
    constant ap_ST_fsm_state31 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000";
    constant ap_ST_fsm_state32 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000";
    constant ap_ST_fsm_state33 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000";
    constant ap_ST_fsm_state34 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000";
    constant ap_ST_fsm_state35 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000";
    constant ap_ST_fsm_state36 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000";
    constant ap_ST_fsm_state37 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000";
    constant ap_ST_fsm_state38 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000";
    constant ap_ST_fsm_state39 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000";
    constant ap_ST_fsm_state40 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000";
    constant ap_ST_fsm_state41 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000";
    constant ap_ST_fsm_state42 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000";
    constant ap_ST_fsm_state43 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state44 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state45 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state46 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state47 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state48 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state49 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state50 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state51 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state52 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state53 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state54 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state55 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state56 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state57 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state58 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state59 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state60 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state61 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state62 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state63 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state64 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state65 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state66 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state67 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state68 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state69 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state70 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state71 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state72 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state75 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp1_stage0 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state78 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp2_stage0 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state81 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp3_stage0 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state85 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp4_stage0 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state89 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state90 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state91 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp5_stage0 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state95 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state96 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state97 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state98 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state99 : STD_LOGIC_VECTOR (99 downto 0) := "0000000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state100 : STD_LOGIC_VECTOR (99 downto 0) := "0000000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state101 : STD_LOGIC_VECTOR (99 downto 0) := "0000000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state102 : STD_LOGIC_VECTOR (99 downto 0) := "0000000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state103 : STD_LOGIC_VECTOR (99 downto 0) := "0000001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state104 : STD_LOGIC_VECTOR (99 downto 0) := "0000010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage0 : STD_LOGIC_VECTOR (99 downto 0) := "0000100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage1 : STD_LOGIC_VECTOR (99 downto 0) := "0001000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage2 : STD_LOGIC_VECTOR (99 downto 0) := "0010000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_pp6_stage3 : STD_LOGIC_VECTOR (99 downto 0) := "0100000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_ST_fsm_state113 : STD_LOGIC_VECTOR (99 downto 0) := "1000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_2D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101101";
    constant ap_const_lv32_2E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000101110";
    constant ap_const_lv32_47 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001000111";
    constant ap_const_lv32_48 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001000";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_4A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001010";
    constant ap_const_lv32_4C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001100";
    constant ap_const_lv32_4E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001110";
    constant ap_const_lv32_50 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010000";
    constant ap_const_lv32_52 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010010";
    constant ap_const_lv32_54 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010100";
    constant ap_const_lv32_55 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010101";
    constant ap_const_lv32_57 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010111";
    constant ap_const_lv32_59 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011001";
    constant ap_const_lv32_5A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011010";
    constant ap_const_lv32_5E : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011110";
    constant ap_const_lv32_5F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011111";
    constant ap_const_lv32_60 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100000";
    constant ap_const_lv32_62 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100010";
    constant ap_const_lv32_63 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100011";
    constant ap_const_lv32_49 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001001";
    constant ap_const_lv32_4B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001011";
    constant ap_const_lv32_4D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001101";
    constant ap_const_lv32_4F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001001111";
    constant ap_const_lv32_53 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010011";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv2_0 : STD_LOGIC_VECTOR (1 downto 0) := "00";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv2_1 : STD_LOGIC_VECTOR (1 downto 0) := "01";
    constant ap_const_lv32_56 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010110";
    constant ap_const_lv32_51 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001010001";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv32_58 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011000";
    constant ap_const_lv32_5D : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011101";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv64_2 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000010";
    constant ap_const_lv32_5C : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011100";
    constant ap_const_lv32_5B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001011011";
    constant ap_const_lv32_61 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000001100001";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv2_2 : STD_LOGIC_VECTOR (1 downto 0) := "10";
    constant ap_const_lv64_40038 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000001000000000000111000";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv3_7 : STD_LOGIC_VECTOR (2 downto 0) := "111";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv19_40038 : STD_LOGIC_VECTOR (18 downto 0) := "1000000000000111000";
    constant ap_const_lv19_1 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000001";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (99 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal i_4_reg_494 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_5_reg_505 : STD_LOGIC_VECTOR (2 downto 0);
    signal j_reg_514 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_7_reg_526 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_1_reg_538 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_reg_549 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_9_reg_560 : STD_LOGIC_VECTOR (1 downto 0);
    signal j3_reg_584 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_22_reg_650 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_662 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal axesA_load_reg_1172 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_21_fu_714_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal i_23_fu_751_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond7_fu_745_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal Ar_shape_load_reg_1212 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_28_fu_778_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_28_reg_1218 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state46 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state46 : signal is "none";
    signal ap_CS_fsm_state47 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state47 : signal is "none";
    signal grp_fu_782_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal free_axesA_reg_1233 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state72 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state72 : signal is "none";
    signal grp_fu_787_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal free_axesB_reg_1238 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_793_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_29_reg_1244 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_30_fu_797_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_30_reg_1249 : STD_LOGIC_VECTOR (12 downto 0);
    signal i_20_fu_804_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_20_reg_1254 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_20_cast_fu_809_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_20_cast_reg_1259 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_4_cast_fu_815_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_4_cast_reg_1264 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state73_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state74_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal exitcond8_fu_820_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond8_reg_1269 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_22_fu_825_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal i_5_cast_fu_831_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_5_cast_reg_1283 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp1_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp1_stage0 : signal is "none";
    signal ap_block_state76_pp1_stage0_iter0 : BOOLEAN;
    signal ap_block_state77_pp1_stage0_iter1 : BOOLEAN;
    signal ap_block_pp1_stage0_11001 : BOOLEAN;
    signal tmp_s_fu_835_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_reg_1288 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_5_fu_840_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp1_iter0 : STD_LOGIC := '0';
    signal i_24_fu_846_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal exitcond1_fu_852_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond1_reg_1307 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp2_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp2_stage0 : signal is "none";
    signal ap_block_state79_pp2_stage0_iter0 : BOOLEAN;
    signal ap_block_state80_pp2_stage0_iter1 : BOOLEAN;
    signal ap_block_pp2_stage0_11001 : BOOLEAN;
    signal i_25_fu_863_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal i_25_reg_1316 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp2_iter0 : STD_LOGIC := '0';
    signal j_6_fu_869_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_8_cast_fu_880_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_8_cast_reg_1326 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp3_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp3_stage0 : signal is "none";
    signal ap_block_state82_pp3_stage0_iter0 : BOOLEAN;
    signal ap_block_state83_pp3_stage0_iter1 : BOOLEAN;
    signal ap_block_state84_pp3_stage0_iter2 : BOOLEAN;
    signal ap_block_pp3_stage0_11001 : BOOLEAN;
    signal i_8_cast_reg_1326_pp3_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond2_fu_885_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_1331 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond2_reg_1331_pp3_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_26_fu_890_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp3_iter0 : STD_LOGIC := '0';
    signal exitcond3_fu_896_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond3_reg_1350 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp4_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp4_stage0 : signal is "none";
    signal ap_block_state86_pp4_stage0_iter0 : BOOLEAN;
    signal ap_block_state87_pp4_stage0_iter1 : BOOLEAN;
    signal ap_block_state88_pp4_stage0_iter2 : BOOLEAN;
    signal ap_block_pp4_stage0_11001 : BOOLEAN;
    signal exitcond3_reg_1350_pp4_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal i_27_fu_902_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_enable_reg_pp4_iter0 : STD_LOGIC := '0';
    signal i_9_cast6_fu_908_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_9_cast6_reg_1359 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_9_cast6_reg_1359_pp4_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal i_28_fu_923_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_28_reg_1377 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state90 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state90 : signal is "none";
    signal tmp_32_fu_929_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_32_reg_1382 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond5_fu_918_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j3_cast_fu_932_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j3_cast_reg_1388 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_pp5_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp5_stage0 : signal is "none";
    signal ap_block_state92_pp5_stage0_iter0 : BOOLEAN;
    signal ap_block_state93_pp5_stage0_iter1 : BOOLEAN;
    signal ap_block_state94_pp5_stage0_iter2 : BOOLEAN;
    signal ap_block_pp5_stage0_11001 : BOOLEAN;
    signal j3_cast_reg_1388_pp5_iter1_reg : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond10_fu_937_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond10_reg_1393 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond10_reg_1393_pp5_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal j_7_fu_942_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_enable_reg_pp5_iter0 : STD_LOGIC := '0';
    signal ap_CS_fsm_state95 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state95 : signal is "none";
    signal i_29_fu_954_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_29_reg_1420 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state97 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state97 : signal is "none";
    signal i_11_cast5_fu_960_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_11_cast5_reg_1425 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond4_fu_948_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal B_array_addr_reg_1430 : STD_LOGIC_VECTOR (18 downto 0);
    signal bound_fu_972_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal bound_reg_1435 : STD_LOGIC_VECTOR (127 downto 0);
    signal j_8_fu_984_p2 : STD_LOGIC_VECTOR (1 downto 0);
    signal j_8_reg_1443 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state99 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state99 : signal is "none";
    signal j4_cast4_fu_990_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal j4_cast4_reg_1448 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond9_fu_978_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_fu_995_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ifzero_reg_1458 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state100 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state100 : signal is "none";
    signal exitcond_flatten_fu_1020_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state104 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state104 : signal is "none";
    signal indvar_flatten_next_fu_1025_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal indvar_flatten_next_reg_1471 : STD_LOGIC_VECTOR (127 downto 0);
    signal j9_mid2_fu_1036_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal j9_mid2_reg_1476 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_mid2_v_v_fu_1050_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_mid2_v_v_reg_1481 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_mid2_fu_1066_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_22_mid2_reg_1486 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_35_fu_1071_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_35_reg_1491 : STD_LOGIC_VECTOR (19 downto 0);
    signal C_array_addr_reg_1496 : STD_LOGIC_VECTOR (11 downto 0);
    signal exitcond_fu_1083_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_1501 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp6_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage0 : signal is "none";
    signal ap_block_state105_pp6_stage0_iter0 : BOOLEAN;
    signal ap_block_state109_pp6_stage0_iter1 : BOOLEAN;
    signal ap_block_pp6_stage0_11001 : BOOLEAN;
    signal exitcond_reg_1501_pp6_iter1_reg : STD_LOGIC_VECTOR (0 downto 0);
    signal k_2_fu_1088_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_2_reg_1505 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp6_iter0 : STD_LOGIC := '0';
    signal fwork_load_reg_1520 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp6_stage1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage1 : signal is "none";
    signal ap_block_state106_pp6_stage1_iter0 : BOOLEAN;
    signal ap_block_state110_pp6_stage1_iter1 : BOOLEAN;
    signal ap_block_pp6_stage1_11001 : BOOLEAN;
    signal fwork_load_2_reg_1525 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_700_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_25_reg_1530 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_pp6_stage3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage3 : signal is "none";
    signal ap_block_state108_pp6_stage3_iter0 : BOOLEAN;
    signal ap_block_state112_pp6_stage3_iter1 : BOOLEAN;
    signal ap_block_pp6_stage3_11001 : BOOLEAN;
    signal grp_fu_694_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp6_iter1 : STD_LOGIC := '0';
    signal j_9_fu_1128_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state113 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state113 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state73 : STD_LOGIC;
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state75 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state75 : signal is "none";
    signal ap_block_pp1_stage0_subdone : BOOLEAN;
    signal ap_condition_pp1_exit_iter0_state76 : STD_LOGIC;
    signal ap_enable_reg_pp1_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state78 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state78 : signal is "none";
    signal ap_block_pp2_stage0_subdone : BOOLEAN;
    signal ap_condition_pp2_exit_iter0_state79 : STD_LOGIC;
    signal ap_enable_reg_pp2_iter1 : STD_LOGIC := '0';
    signal ap_CS_fsm_state81 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state81 : signal is "none";
    signal ap_block_pp3_stage0_subdone : BOOLEAN;
    signal ap_condition_pp3_exit_iter0_state82 : STD_LOGIC;
    signal ap_enable_reg_pp3_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp3_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state85 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state85 : signal is "none";
    signal ap_block_pp4_stage0_subdone : BOOLEAN;
    signal ap_condition_pp4_exit_iter0_state86 : STD_LOGIC;
    signal ap_enable_reg_pp4_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp4_iter2 : STD_LOGIC := '0';
    signal ap_CS_fsm_state91 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state91 : signal is "none";
    signal grp_k2c_idx2sub_fu_673_ap_idle : STD_LOGIC;
    signal grp_k2c_idx2sub_fu_673_ap_ready : STD_LOGIC;
    signal grp_k2c_idx2sub_fu_673_ap_done : STD_LOGIC;
    signal ap_block_pp5_stage0_subdone : BOOLEAN;
    signal ap_condition_pp5_exit_iter0_state92 : STD_LOGIC;
    signal ap_enable_reg_pp5_iter1 : STD_LOGIC := '0';
    signal ap_enable_reg_pp5_iter2 : STD_LOGIC := '0';
    signal ap_block_pp6_stage0_subdone : BOOLEAN;
    signal ap_condition_pp6_exit_iter0_state105 : STD_LOGIC;
    signal ap_block_pp6_stage3_subdone : BOOLEAN;
    signal permA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal permA_ce0 : STD_LOGIC;
    signal permA_we0 : STD_LOGIC;
    signal permA_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal permA_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal permB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal permB_ce0 : STD_LOGIC;
    signal permB_we0 : STD_LOGIC;
    signal permB_d0 : STD_LOGIC_VECTOR (1 downto 0);
    signal permB_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal freeA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal freeA_ce0 : STD_LOGIC;
    signal freeA_we0 : STD_LOGIC;
    signal freeA_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal freeB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal freeB_ce0 : STD_LOGIC;
    signal freeB_we0 : STD_LOGIC;
    signal freeB_q0 : STD_LOGIC_VECTOR (1 downto 0);
    signal newshpA_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal newshpA_ce0 : STD_LOGIC;
    signal newshpA_we0 : STD_LOGIC;
    signal newshpA_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal newshpB_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal newshpB_ce0 : STD_LOGIC;
    signal newshpB_we0 : STD_LOGIC;
    signal newshpB_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Asub_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Asub_ce0 : STD_LOGIC;
    signal Asub_we0 : STD_LOGIC;
    signal Asub_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Asub_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Bsub_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal Bsub_ce0 : STD_LOGIC;
    signal Bsub_we0 : STD_LOGIC;
    signal Bsub_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal Bsub_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_idx2sub_fu_673_ap_start : STD_LOGIC;
    signal grp_k2c_idx2sub_fu_673_idx : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_idx2sub_fu_673_sub_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_idx2sub_fu_673_sub_ce0 : STD_LOGIC;
    signal grp_k2c_idx2sub_fu_673_sub_we0 : STD_LOGIC;
    signal grp_k2c_idx2sub_fu_673_sub_d0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_idx2sub_fu_673_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_idx2sub_fu_673_shape_ce0 : STD_LOGIC;
    signal grp_k2c_idx2sub_fu_673_shape_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_idx2sub_fu_673_ndim : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_sub2idx_fu_685_ap_start : STD_LOGIC;
    signal grp_k2c_sub2idx_fu_685_ap_done : STD_LOGIC;
    signal grp_k2c_sub2idx_fu_685_ap_idle : STD_LOGIC;
    signal grp_k2c_sub2idx_fu_685_ap_ready : STD_LOGIC;
    signal grp_k2c_sub2idx_fu_685_sub_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_sub2idx_fu_685_sub_ce0 : STD_LOGIC;
    signal grp_k2c_sub2idx_fu_685_sub_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_sub2idx_fu_685_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_sub2idx_fu_685_shape_ce0 : STD_LOGIC;
    signal grp_k2c_sub2idx_fu_685_shape_q0 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_sub2idx_fu_685_ndim : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_sub2idx_fu_685_ap_return : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_470 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond6_fu_709_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_1_reg_482 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_phi_mux_i_7_phi_fu_530_p4 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_block_pp2_stage0 : BOOLEAN;
    signal i_10_reg_571 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state96 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state96 : signal is "none";
    signal ap_CS_fsm_state89 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state89 : signal is "none";
    signal i_11_reg_595 : STD_LOGIC_VECTOR (18 downto 0);
    signal j4_reg_606 : STD_LOGIC_VECTOR (1 downto 0);
    signal ap_CS_fsm_state98 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state98 : signal is "none";
    signal ap_CS_fsm_state103 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state103 : signal is "none";
    signal ap_block_state103_on_subcall_done : BOOLEAN;
    signal indvar_flatten_reg_617 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_s_reg_628 : STD_LOGIC_VECTOR (63 downto 0);
    signal j9_reg_639 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_phi_mux_k_phi_fu_666_p4 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp6_stage0 : BOOLEAN;
    signal grp_k2c_idx2sub_fu_673_ap_start_reg : STD_LOGIC := '0';
    signal grp_k2c_sub2idx_fu_685_ap_start_reg : STD_LOGIC := '0';
    signal ap_CS_fsm_state102 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state102 : signal is "none";
    signal tmp_12_fu_720_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_fu_757_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal ap_block_pp1_stage0 : BOOLEAN;
    signal j_1_cast_fu_858_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_7_cast7_fu_875_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp3_stage0 : BOOLEAN;
    signal ap_block_pp4_stage0 : BOOLEAN;
    signal extLd_fu_913_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp5_stage0 : BOOLEAN;
    signal extLd1_fu_1001_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state101 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state101 : signal is "none";
    signal sum9_cast_fu_1015_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_25_cast_fu_1079_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum_cast_fu_1103_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal sum2_cast_fu_1123_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_fu_94 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_4_fu_729_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_2_fu_130 : STD_LOGIC_VECTOR (63 downto 0);
    signal count_5_fu_767_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp6_stage3 : BOOLEAN;
    signal ap_CS_fsm_pp6_stage2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp6_stage2 : signal is "none";
    signal ap_block_pp6_stage2 : BOOLEAN;
    signal grp_fu_787_p0 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_31_fu_801_p1 : STD_LOGIC_VECTOR (2 downto 0);
    signal bound_fu_972_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_972_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_fu_1006_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum9_fu_1010_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_19_fu_1031_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_30_fu_1044_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_1062_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1133_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_38_fu_1094_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum_fu_1098_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_24_fu_1108_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp1_fu_1113_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal sum2_fu_1118_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal grp_fu_1133_p0 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_1133_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_782_ap_start : STD_LOGIC;
    signal grp_fu_782_ap_done : STD_LOGIC;
    signal grp_fu_787_ap_start : STD_LOGIC;
    signal grp_fu_787_ap_done : STD_LOGIC;
    signal ap_NS_fsm : STD_LOGIC_VECTOR (99 downto 0);
    signal ap_block_pp6_stage1_subdone : BOOLEAN;
    signal ap_block_state107_pp6_stage2_iter0 : BOOLEAN;
    signal ap_block_state111_pp6_stage2_iter1 : BOOLEAN;
    signal ap_block_pp6_stage2_subdone : BOOLEAN;
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal ap_idle_pp1 : STD_LOGIC;
    signal ap_enable_pp1 : STD_LOGIC;
    signal ap_idle_pp2 : STD_LOGIC;
    signal ap_enable_pp2 : STD_LOGIC;
    signal ap_idle_pp3 : STD_LOGIC;
    signal ap_enable_pp3 : STD_LOGIC;
    signal ap_idle_pp4 : STD_LOGIC;
    signal ap_enable_pp4 : STD_LOGIC;
    signal ap_idle_pp5 : STD_LOGIC;
    signal ap_enable_pp5 : STD_LOGIC;
    signal ap_idle_pp6 : STD_LOGIC;
    signal ap_enable_pp6 : STD_LOGIC;
    signal bound_fu_972_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal bound_fu_972_p10 : STD_LOGIC_VECTOR (127 downto 0);

    component k2c_idx2sub IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        idx : IN STD_LOGIC_VECTOR (63 downto 0);
        sub_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sub_ce0 : OUT STD_LOGIC;
        sub_we0 : OUT STD_LOGIC;
        sub_d0 : OUT STD_LOGIC_VECTOR (63 downto 0);
        shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        shape_ce0 : OUT STD_LOGIC;
        shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ndim : IN STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component k2c_sub2idx IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        sub_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        sub_ce0 : OUT STD_LOGIC;
        sub_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        shape_ce0 : OUT STD_LOGIC;
        shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        ndim : IN STD_LOGIC_VECTOR (63 downto 0);
        ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_classifier_cdEe IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_ceOg IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_cfYi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (63 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_classifier_cg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        start : IN STD_LOGIC;
        done : OUT STD_LOGIC;
        din0 : IN STD_LOGIC_VECTOR (21 downto 0);
        din1 : IN STD_LOGIC_VECTOR (63 downto 0);
        ce : IN STD_LOGIC;
        dout : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component face_classifier_chbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component k2c_dot_1_permA IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (63 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (63 downto 0) );
    end component;


    component k2c_dot_1_permB IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (1 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (1 downto 0) );
    end component;



begin
    permA_U : component k2c_dot_1_permA
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => permA_address0,
        ce0 => permA_ce0,
        we0 => permA_we0,
        d0 => permA_d0,
        q0 => permA_q0);

    permB_U : component k2c_dot_1_permB
    generic map (
        DataWidth => 2,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => permB_address0,
        ce0 => permB_ce0,
        we0 => permB_we0,
        d0 => permB_d0,
        q0 => permB_q0);

    freeA_U : component k2c_dot_1_permA
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => freeA_address0,
        ce0 => freeA_ce0,
        we0 => freeA_we0,
        d0 => i_reg_470,
        q0 => freeA_q0);

    freeB_U : component k2c_dot_1_permB
    generic map (
        DataWidth => 2,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => freeB_address0,
        ce0 => freeB_ce0,
        we0 => freeB_we0,
        d0 => i_1_reg_482,
        q0 => freeB_q0);

    newshpA_U : component k2c_dot_1_permA
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => newshpA_address0,
        ce0 => newshpA_ce0,
        we0 => newshpA_we0,
        d0 => Ar_shape_q0,
        q0 => newshpA_q0);

    newshpB_U : component k2c_dot_1_permA
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => newshpB_address0,
        ce0 => newshpB_ce0,
        we0 => newshpB_we0,
        d0 => B_shape_q0,
        q0 => newshpB_q0);

    Asub_U : component k2c_dot_1_permA
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Asub_address0,
        ce0 => Asub_ce0,
        we0 => Asub_we0,
        d0 => Asub_d0,
        q0 => Asub_q0);

    Bsub_U : component k2c_dot_1_permA
    generic map (
        DataWidth => 64,
        AddressRange => 5,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => Bsub_address0,
        ce0 => Bsub_ce0,
        we0 => Bsub_we0,
        d0 => Bsub_d0,
        q0 => Bsub_q0);

    grp_k2c_idx2sub_fu_673 : component k2c_idx2sub
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_idx2sub_fu_673_ap_start,
        ap_done => grp_k2c_idx2sub_fu_673_ap_done,
        ap_idle => grp_k2c_idx2sub_fu_673_ap_idle,
        ap_ready => grp_k2c_idx2sub_fu_673_ap_ready,
        idx => grp_k2c_idx2sub_fu_673_idx,
        sub_address0 => grp_k2c_idx2sub_fu_673_sub_address0,
        sub_ce0 => grp_k2c_idx2sub_fu_673_sub_ce0,
        sub_we0 => grp_k2c_idx2sub_fu_673_sub_we0,
        sub_d0 => grp_k2c_idx2sub_fu_673_sub_d0,
        shape_address0 => grp_k2c_idx2sub_fu_673_shape_address0,
        shape_ce0 => grp_k2c_idx2sub_fu_673_shape_ce0,
        shape_q0 => grp_k2c_idx2sub_fu_673_shape_q0,
        ndim => grp_k2c_idx2sub_fu_673_ndim);

    grp_k2c_sub2idx_fu_685 : component k2c_sub2idx
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_sub2idx_fu_685_ap_start,
        ap_done => grp_k2c_sub2idx_fu_685_ap_done,
        ap_idle => grp_k2c_sub2idx_fu_685_ap_idle,
        ap_ready => grp_k2c_sub2idx_fu_685_ap_ready,
        sub_address0 => grp_k2c_sub2idx_fu_685_sub_address0,
        sub_ce0 => grp_k2c_sub2idx_fu_685_sub_ce0,
        sub_q0 => grp_k2c_sub2idx_fu_685_sub_q0,
        shape_address0 => grp_k2c_sub2idx_fu_685_shape_address0,
        shape_ce0 => grp_k2c_sub2idx_fu_685_shape_ce0,
        shape_q0 => grp_k2c_sub2idx_fu_685_shape_q0,
        ndim => grp_k2c_sub2idx_fu_685_ndim,
        ap_return => grp_k2c_sub2idx_fu_685_ap_return);

    face_classifier_cdEe_U12 : component face_classifier_cdEe
    generic map (
        ID => 1,
        NUM_STAGE => 4,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => tmp_22_reg_650,
        din1 => tmp_25_reg_1530,
        ce => ap_const_logic_1,
        dout => grp_fu_694_p2);

    face_classifier_ceOg_U13 : component face_classifier_ceOg
    generic map (
        ID => 1,
        NUM_STAGE => 2,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        din0 => fwork_load_reg_1520,
        din1 => fwork_load_2_reg_1525,
        ce => ap_const_logic_1,
        dout => grp_fu_700_p2);

    face_classifier_cfYi_U14 : component face_classifier_cfYi
    generic map (
        ID => 1,
        NUM_STAGE => 68,
        din0_WIDTH => 64,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_782_ap_start,
        done => grp_fu_782_ap_done,
        din0 => Ar_numel_read,
        din1 => Ar_shape_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_782_p2);

    face_classifier_cg8j_U15 : component face_classifier_cg8j
    generic map (
        ID => 1,
        NUM_STAGE => 26,
        din0_WIDTH => 22,
        din1_WIDTH => 64,
        dout_WIDTH => 64)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        start => grp_fu_787_ap_start,
        done => grp_fu_787_ap_done,
        din0 => grp_fu_787_p0,
        din1 => B_shape_q0,
        ce => ap_const_logic_1,
        dout => grp_fu_787_p2);

    face_classifier_chbi_U16 : component face_classifier_chbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        din2_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        din0 => grp_fu_1133_p0,
        din1 => tmp_30_reg_1249,
        din2 => grp_fu_1133_p2,
        dout => grp_fu_1133_p3);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state73) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state73))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state73);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state76) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                    ap_enable_reg_pp1_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp1_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp1_exit_iter0_state76))) then 
                    ap_enable_reg_pp1_iter1 <= (ap_const_logic_1 xor ap_condition_pp1_exit_iter0_state76);
                elsif ((ap_const_boolean_0 = ap_block_pp1_stage0_subdone)) then 
                    ap_enable_reg_pp1_iter1 <= ap_enable_reg_pp1_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                    ap_enable_reg_pp1_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state79) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                    ap_enable_reg_pp2_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp2_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp2_exit_iter0_state79))) then 
                    ap_enable_reg_pp2_iter1 <= (ap_const_logic_1 xor ap_condition_pp2_exit_iter0_state79);
                elsif ((ap_const_boolean_0 = ap_block_pp2_stage0_subdone)) then 
                    ap_enable_reg_pp2_iter1 <= ap_enable_reg_pp2_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                    ap_enable_reg_pp2_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp3_exit_iter0_state82) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                    ap_enable_reg_pp3_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp3_exit_iter0_state82)) then 
                        ap_enable_reg_pp3_iter1 <= (ap_const_logic_1 xor ap_condition_pp3_exit_iter0_state82);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp3_iter1 <= ap_enable_reg_pp3_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp3_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp3_stage0_subdone)) then 
                    ap_enable_reg_pp3_iter2 <= ap_enable_reg_pp3_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                    ap_enable_reg_pp3_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp4_exit_iter0_state86) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                    ap_enable_reg_pp4_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp4_exit_iter0_state86)) then 
                        ap_enable_reg_pp4_iter1 <= (ap_const_logic_1 xor ap_condition_pp4_exit_iter0_state86);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp4_iter1 <= ap_enable_reg_pp4_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp4_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp4_stage0_subdone)) then 
                    ap_enable_reg_pp4_iter2 <= ap_enable_reg_pp4_iter1;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                    ap_enable_reg_pp4_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp5_exit_iter0_state92) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_0;
                elsif (((grp_k2c_idx2sub_fu_673_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state91))) then 
                    ap_enable_reg_pp5_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter1 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then
                    if ((ap_const_logic_1 = ap_condition_pp5_exit_iter0_state92)) then 
                        ap_enable_reg_pp5_iter1 <= (ap_const_logic_1 xor ap_condition_pp5_exit_iter0_state92);
                    elsif ((ap_const_boolean_1 = ap_const_boolean_1)) then 
                        ap_enable_reg_pp5_iter1 <= ap_enable_reg_pp5_iter0;
                    end if;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp5_iter2_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
            else
                if ((ap_const_boolean_0 = ap_block_pp5_stage0_subdone)) then 
                    ap_enable_reg_pp5_iter2 <= ap_enable_reg_pp5_iter1;
                elsif (((grp_k2c_idx2sub_fu_673_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state91))) then 
                    ap_enable_reg_pp5_iter2 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state105) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_0;
                elsif (((exitcond_flatten_fu_1020_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
                    ap_enable_reg_pp6_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp6_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp6_stage3_subdone) and (ap_const_logic_1 = ap_condition_pp6_exit_iter0_state105) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage3))) then 
                    ap_enable_reg_pp6_iter1 <= (ap_const_logic_1 xor ap_condition_pp6_exit_iter0_state105);
                elsif (((ap_const_boolean_0 = ap_block_pp6_stage3_subdone) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage3))) then 
                    ap_enable_reg_pp6_iter1 <= ap_enable_reg_pp6_iter0;
                elsif (((exitcond_flatten_fu_1020_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
                    ap_enable_reg_pp6_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_k2c_idx2sub_fu_673_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_idx2sub_fu_673_ap_start_reg <= ap_const_logic_0;
            else
                if ((((exitcond4_fu_948_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state97)) or ((exitcond5_fu_918_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state90)))) then 
                    grp_k2c_idx2sub_fu_673_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_idx2sub_fu_673_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_idx2sub_fu_673_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_k2c_sub2idx_fu_685_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_sub2idx_fu_685_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state102) or (ap_const_logic_1 = ap_CS_fsm_state95))) then 
                    grp_k2c_sub2idx_fu_685_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_sub2idx_fu_685_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_sub2idx_fu_685_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    count_2_fu_130_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_757_p2 = ap_const_lv1_0) and (exitcond7_fu_745_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                count_2_fu_130 <= count_5_fu_767_p2;
            elsif (((exitcond6_fu_709_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                count_2_fu_130 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    count_fu_94_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_12_fu_720_p2 = ap_const_lv1_0) and (exitcond6_fu_709_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                count_fu_94 <= count_4_fu_729_p2;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                count_fu_94 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    i_10_reg_571_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state89)) then 
                i_10_reg_571 <= ap_const_lv64_0;
            elsif (((grp_k2c_sub2idx_fu_685_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state96))) then 
                i_10_reg_571 <= i_28_reg_1377;
            end if; 
        end if;
    end process;

    i_11_reg_595_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_978_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state99))) then 
                i_11_reg_595 <= i_29_reg_1420;
            elsif (((exitcond5_fu_918_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state90))) then 
                i_11_reg_595 <= ap_const_lv19_0;
            end if; 
        end if;
    end process;

    i_1_reg_482_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond7_fu_745_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_1_reg_482 <= i_23_fu_751_p2;
            elsif (((exitcond6_fu_709_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_1_reg_482 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    i_4_reg_494_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond8_fu_820_p2 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                i_4_reg_494 <= i_22_fu_825_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state72)) then 
                i_4_reg_494 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    i_5_reg_505_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                i_5_reg_505 <= i_20_cast_reg_1259;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (tmp_s_fu_835_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                i_5_reg_505 <= i_24_fu_846_p2;
            end if; 
        end if;
    end process;

    i_7_reg_526_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                i_7_reg_526 <= ap_const_lv2_1;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond1_reg_1307 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                i_7_reg_526 <= i_25_reg_1316;
            end if; 
        end if;
    end process;

    i_8_reg_549_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state81)) then 
                i_8_reg_549 <= ap_const_lv3_0;
            elsif (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (exitcond2_fu_885_p2 = ap_const_lv1_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
                i_8_reg_549 <= i_26_fu_890_p2;
            end if; 
        end if;
    end process;

    i_9_reg_560_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state85)) then 
                i_9_reg_560 <= ap_const_lv2_0;
            elsif (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (exitcond3_fu_896_p2 = ap_const_lv1_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
                i_9_reg_560 <= i_27_fu_902_p2;
            end if; 
        end if;
    end process;

    i_reg_470_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond6_fu_709_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
                i_reg_470 <= i_21_fu_714_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
                i_reg_470 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    i_s_reg_628_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
                i_s_reg_628 <= tmp_21_mid2_v_v_reg_1481;
            elsif (((exitcond4_fu_948_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then 
                i_s_reg_628 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_617_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
                indvar_flatten_reg_617 <= indvar_flatten_next_reg_1471;
            elsif (((exitcond4_fu_948_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then 
                indvar_flatten_reg_617 <= ap_const_lv128_lc_1;
            end if; 
        end if;
    end process;

    j3_reg_584_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (exitcond10_fu_937_p2 = ap_const_lv1_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
                j3_reg_584 <= j_7_fu_942_p2;
            elsif (((grp_k2c_idx2sub_fu_673_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state91))) then 
                j3_reg_584 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    j4_reg_606_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_state103_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state103))) then 
                j4_reg_606 <= j_8_reg_1443;
            elsif (((grp_k2c_idx2sub_fu_673_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state98))) then 
                j4_reg_606 <= ap_const_lv2_0;
            end if; 
        end if;
    end process;

    j9_reg_639_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state113)) then 
                j9_reg_639 <= j_9_fu_1128_p2;
            elsif (((exitcond4_fu_948_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then 
                j9_reg_639 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_1_reg_538_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
                j_1_reg_538 <= ap_const_lv1_0;
            elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond1_fu_852_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
                j_1_reg_538 <= j_6_fu_869_p2;
            end if; 
        end if;
    end process;

    j_reg_514_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state75)) then 
                j_reg_514 <= ap_const_lv64_0;
            elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (tmp_s_fu_835_p2 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
                j_reg_514 <= j_5_fu_840_p2;
            end if; 
        end if;
    end process;

    k_reg_662_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (exitcond_reg_1501 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
                k_reg_662 <= k_2_reg_1505;
            elsif (((exitcond_flatten_fu_1020_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
                k_reg_662 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    tmp_22_reg_650_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage3_11001) and (exitcond_reg_1501_pp6_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage3))) then 
                tmp_22_reg_650 <= grp_fu_694_p2;
            elsif (((exitcond_flatten_fu_1020_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
                tmp_22_reg_650 <= ap_const_lv32_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then
                Ar_shape_load_reg_1212 <= Ar_shape_q0;
                tmp_28_reg_1218 <= tmp_28_fu_778_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_948_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state97))) then
                B_array_addr_reg_1430 <= i_11_cast5_fu_960_p1(19 - 1 downto 0);
                    i_11_cast5_reg_1425(18 downto 0) <= i_11_cast5_fu_960_p1(18 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_flatten_fu_1020_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state104))) then
                C_array_addr_reg_1496 <= tmp_25_cast_fu_1079_p1(12 - 1 downto 0);
                j9_mid2_reg_1476 <= j9_mid2_fu_1036_p3;
                tmp_21_mid2_v_v_reg_1481 <= tmp_21_mid2_v_v_fu_1050_p3;
                tmp_22_mid2_reg_1486 <= tmp_22_mid2_fu_1066_p2;
                tmp_35_reg_1491 <= tmp_35_fu_1071_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                axesA_load_reg_1172 <= axesA_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond4_fu_948_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then
                bound_reg_1435 <= bound_fu_972_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then
                exitcond10_reg_1393 <= exitcond10_fu_937_p2;
                exitcond10_reg_1393_pp5_iter1_reg <= exitcond10_reg_1393;
                    j3_cast_reg_1388(2 downto 0) <= j3_cast_fu_932_p1(2 downto 0);
                    j3_cast_reg_1388_pp5_iter1_reg(2 downto 0) <= j3_cast_reg_1388(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                exitcond1_reg_1307 <= exitcond1_fu_852_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then
                exitcond2_reg_1331 <= exitcond2_fu_885_p2;
                exitcond2_reg_1331_pp3_iter1_reg <= exitcond2_reg_1331;
                    i_8_cast_reg_1326(2 downto 0) <= i_8_cast_fu_880_p1(2 downto 0);
                    i_8_cast_reg_1326_pp3_iter1_reg(2 downto 0) <= i_8_cast_reg_1326(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                exitcond3_reg_1350 <= exitcond3_fu_896_p2;
                exitcond3_reg_1350_pp4_iter1_reg <= exitcond3_reg_1350;
                    i_9_cast6_reg_1359_pp4_iter1_reg(1 downto 0) <= i_9_cast6_reg_1359(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then
                exitcond8_reg_1269 <= exitcond8_fu_820_p2;
                    i_4_cast_reg_1264(2 downto 0) <= i_4_cast_fu_815_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                exitcond_reg_1501 <= exitcond_fu_1083_p2;
                exitcond_reg_1501_pp6_iter1_reg <= exitcond_reg_1501;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state72)) then
                free_axesA_reg_1233 <= grp_fu_782_p2;
                free_axesB_reg_1238 <= grp_fu_787_p2;
                i_20_cast_reg_1259 <= i_20_cast_fu_809_p2;
                i_20_reg_1254 <= i_20_fu_804_p2;
                tmp_29_reg_1244 <= tmp_29_fu_793_p1;
                tmp_30_reg_1249 <= tmp_30_fu_797_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage1_11001) and (exitcond_reg_1501 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1))) then
                fwork_load_2_reg_1525 <= fwork_q1;
                fwork_load_reg_1520 <= fwork_q0;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond1_fu_852_p2 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then
                i_25_reg_1316 <= i_25_fu_863_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state90)) then
                i_28_reg_1377 <= i_28_fu_923_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state97)) then
                i_29_reg_1420 <= i_29_fu_954_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then
                    i_5_cast_reg_1283(2 downto 0) <= i_5_cast_fu_831_p1(2 downto 0);
                tmp_s_reg_1288 <= tmp_s_fu_835_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (exitcond3_fu_896_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then
                    i_9_cast6_reg_1359(1 downto 0) <= i_9_cast6_fu_908_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond9_fu_978_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state99))) then
                ifzero_reg_1458 <= ifzero_fu_995_p2;
                    j4_cast4_reg_1448(1 downto 0) <= j4_cast4_fu_990_p1(1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state104)) then
                indvar_flatten_next_reg_1471 <= indvar_flatten_next_fu_1025_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state99)) then
                j_8_reg_1443 <= j_8_fu_984_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then
                k_2_reg_1505 <= k_2_fu_1088_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_boolean_0 = ap_block_pp6_stage3_11001) and (exitcond_reg_1501 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage3))) then
                tmp_25_reg_1530 <= grp_fu_700_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond5_fu_918_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state90))) then
                tmp_32_reg_1382 <= tmp_32_fu_929_p1;
            end if;
        end if;
    end process;
    i_4_cast_reg_1264(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_5_cast_reg_1283(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_8_cast_reg_1326(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_8_cast_reg_1326_pp3_iter1_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_9_cast6_reg_1359(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    i_9_cast6_reg_1359_pp4_iter1_reg(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";
    j3_cast_reg_1388(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    j3_cast_reg_1388_pp5_iter1_reg(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    i_11_cast5_reg_1425(63 downto 19) <= "000000000000000000000000000000000000000000000";
    j4_cast4_reg_1448(63 downto 2) <= "00000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state3, ap_CS_fsm_state4, exitcond7_fu_745_p2, exitcond8_fu_820_p2, ap_enable_reg_pp0_iter0, tmp_s_fu_835_p2, ap_enable_reg_pp1_iter0, exitcond1_fu_852_p2, ap_enable_reg_pp2_iter0, exitcond2_fu_885_p2, ap_enable_reg_pp3_iter0, exitcond3_fu_896_p2, ap_enable_reg_pp4_iter0, ap_CS_fsm_state90, exitcond5_fu_918_p2, exitcond10_fu_937_p2, ap_enable_reg_pp5_iter0, ap_CS_fsm_state97, exitcond4_fu_948_p2, ap_CS_fsm_state99, exitcond9_fu_978_p2, ifzero_reg_1458, exitcond_flatten_fu_1020_p2, ap_CS_fsm_state104, exitcond_fu_1083_p2, ap_enable_reg_pp6_iter0, ap_CS_fsm_pp6_stage3, ap_enable_reg_pp6_iter1, ap_block_pp0_stage0_subdone, ap_block_pp1_stage0_subdone, ap_block_pp2_stage0_subdone, ap_block_pp3_stage0_subdone, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2, ap_block_pp4_stage0_subdone, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter2, ap_CS_fsm_state91, grp_k2c_idx2sub_fu_673_ap_done, ap_block_pp5_stage0_subdone, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2, ap_block_pp6_stage0_subdone, ap_block_pp6_stage3_subdone, grp_k2c_sub2idx_fu_685_ap_done, exitcond6_fu_709_p2, ap_CS_fsm_state96, ap_CS_fsm_state98, ap_CS_fsm_state103, ap_block_state103_on_subcall_done, ap_CS_fsm_state101, ap_block_pp6_stage1_subdone, ap_block_pp6_stage2_subdone)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state3 => 
                if (((exitcond6_fu_709_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state3))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state4 => 
                if (((exitcond7_fu_745_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state4;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state7;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state8;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                ap_NS_fsm <= ap_ST_fsm_state10;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when ap_ST_fsm_state11 => 
                ap_NS_fsm <= ap_ST_fsm_state12;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state13;
            when ap_ST_fsm_state13 => 
                ap_NS_fsm <= ap_ST_fsm_state14;
            when ap_ST_fsm_state14 => 
                ap_NS_fsm <= ap_ST_fsm_state15;
            when ap_ST_fsm_state15 => 
                ap_NS_fsm <= ap_ST_fsm_state16;
            when ap_ST_fsm_state16 => 
                ap_NS_fsm <= ap_ST_fsm_state17;
            when ap_ST_fsm_state17 => 
                ap_NS_fsm <= ap_ST_fsm_state18;
            when ap_ST_fsm_state18 => 
                ap_NS_fsm <= ap_ST_fsm_state19;
            when ap_ST_fsm_state19 => 
                ap_NS_fsm <= ap_ST_fsm_state20;
            when ap_ST_fsm_state20 => 
                ap_NS_fsm <= ap_ST_fsm_state21;
            when ap_ST_fsm_state21 => 
                ap_NS_fsm <= ap_ST_fsm_state22;
            when ap_ST_fsm_state22 => 
                ap_NS_fsm <= ap_ST_fsm_state23;
            when ap_ST_fsm_state23 => 
                ap_NS_fsm <= ap_ST_fsm_state24;
            when ap_ST_fsm_state24 => 
                ap_NS_fsm <= ap_ST_fsm_state25;
            when ap_ST_fsm_state25 => 
                ap_NS_fsm <= ap_ST_fsm_state26;
            when ap_ST_fsm_state26 => 
                ap_NS_fsm <= ap_ST_fsm_state27;
            when ap_ST_fsm_state27 => 
                ap_NS_fsm <= ap_ST_fsm_state28;
            when ap_ST_fsm_state28 => 
                ap_NS_fsm <= ap_ST_fsm_state29;
            when ap_ST_fsm_state29 => 
                ap_NS_fsm <= ap_ST_fsm_state30;
            when ap_ST_fsm_state30 => 
                ap_NS_fsm <= ap_ST_fsm_state31;
            when ap_ST_fsm_state31 => 
                ap_NS_fsm <= ap_ST_fsm_state32;
            when ap_ST_fsm_state32 => 
                ap_NS_fsm <= ap_ST_fsm_state33;
            when ap_ST_fsm_state33 => 
                ap_NS_fsm <= ap_ST_fsm_state34;
            when ap_ST_fsm_state34 => 
                ap_NS_fsm <= ap_ST_fsm_state35;
            when ap_ST_fsm_state35 => 
                ap_NS_fsm <= ap_ST_fsm_state36;
            when ap_ST_fsm_state36 => 
                ap_NS_fsm <= ap_ST_fsm_state37;
            when ap_ST_fsm_state37 => 
                ap_NS_fsm <= ap_ST_fsm_state38;
            when ap_ST_fsm_state38 => 
                ap_NS_fsm <= ap_ST_fsm_state39;
            when ap_ST_fsm_state39 => 
                ap_NS_fsm <= ap_ST_fsm_state40;
            when ap_ST_fsm_state40 => 
                ap_NS_fsm <= ap_ST_fsm_state41;
            when ap_ST_fsm_state41 => 
                ap_NS_fsm <= ap_ST_fsm_state42;
            when ap_ST_fsm_state42 => 
                ap_NS_fsm <= ap_ST_fsm_state43;
            when ap_ST_fsm_state43 => 
                ap_NS_fsm <= ap_ST_fsm_state44;
            when ap_ST_fsm_state44 => 
                ap_NS_fsm <= ap_ST_fsm_state45;
            when ap_ST_fsm_state45 => 
                ap_NS_fsm <= ap_ST_fsm_state46;
            when ap_ST_fsm_state46 => 
                ap_NS_fsm <= ap_ST_fsm_state47;
            when ap_ST_fsm_state47 => 
                ap_NS_fsm <= ap_ST_fsm_state48;
            when ap_ST_fsm_state48 => 
                ap_NS_fsm <= ap_ST_fsm_state49;
            when ap_ST_fsm_state49 => 
                ap_NS_fsm <= ap_ST_fsm_state50;
            when ap_ST_fsm_state50 => 
                ap_NS_fsm <= ap_ST_fsm_state51;
            when ap_ST_fsm_state51 => 
                ap_NS_fsm <= ap_ST_fsm_state52;
            when ap_ST_fsm_state52 => 
                ap_NS_fsm <= ap_ST_fsm_state53;
            when ap_ST_fsm_state53 => 
                ap_NS_fsm <= ap_ST_fsm_state54;
            when ap_ST_fsm_state54 => 
                ap_NS_fsm <= ap_ST_fsm_state55;
            when ap_ST_fsm_state55 => 
                ap_NS_fsm <= ap_ST_fsm_state56;
            when ap_ST_fsm_state56 => 
                ap_NS_fsm <= ap_ST_fsm_state57;
            when ap_ST_fsm_state57 => 
                ap_NS_fsm <= ap_ST_fsm_state58;
            when ap_ST_fsm_state58 => 
                ap_NS_fsm <= ap_ST_fsm_state59;
            when ap_ST_fsm_state59 => 
                ap_NS_fsm <= ap_ST_fsm_state60;
            when ap_ST_fsm_state60 => 
                ap_NS_fsm <= ap_ST_fsm_state61;
            when ap_ST_fsm_state61 => 
                ap_NS_fsm <= ap_ST_fsm_state62;
            when ap_ST_fsm_state62 => 
                ap_NS_fsm <= ap_ST_fsm_state63;
            when ap_ST_fsm_state63 => 
                ap_NS_fsm <= ap_ST_fsm_state64;
            when ap_ST_fsm_state64 => 
                ap_NS_fsm <= ap_ST_fsm_state65;
            when ap_ST_fsm_state65 => 
                ap_NS_fsm <= ap_ST_fsm_state66;
            when ap_ST_fsm_state66 => 
                ap_NS_fsm <= ap_ST_fsm_state67;
            when ap_ST_fsm_state67 => 
                ap_NS_fsm <= ap_ST_fsm_state68;
            when ap_ST_fsm_state68 => 
                ap_NS_fsm <= ap_ST_fsm_state69;
            when ap_ST_fsm_state69 => 
                ap_NS_fsm <= ap_ST_fsm_state70;
            when ap_ST_fsm_state70 => 
                ap_NS_fsm <= ap_ST_fsm_state71;
            when ap_ST_fsm_state71 => 
                ap_NS_fsm <= ap_ST_fsm_state72;
            when ap_ST_fsm_state72 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond8_fu_820_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (exitcond8_fu_820_p2 = ap_const_lv1_1) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state75;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state75 => 
                ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
            when ap_ST_fsm_pp1_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (tmp_s_fu_835_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp1_stage0_subdone) and (tmp_s_fu_835_p2 = ap_const_lv1_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state78;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp1_stage0;
                end if;
            when ap_ST_fsm_state78 => 
                ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
            when ap_ST_fsm_pp2_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond1_fu_852_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp2_stage0_subdone) and (exitcond1_fu_852_p2 = ap_const_lv1_1) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state81;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp2_stage0;
                end if;
            when ap_ST_fsm_state81 => 
                ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
            when ap_ST_fsm_pp3_stage0 => 
                if ((not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (exitcond2_fu_885_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                elsif ((((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp3_stage0_subdone) and (exitcond2_fu_885_p2 = ap_const_lv1_1) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state85;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp3_stage0;
                end if;
            when ap_ST_fsm_state85 => 
                ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
            when ap_ST_fsm_pp4_stage0 => 
                if ((not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (exitcond3_fu_896_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                elsif ((((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp4_stage0_subdone) and (exitcond3_fu_896_p2 = ap_const_lv1_1) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state89;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp4_stage0;
                end if;
            when ap_ST_fsm_state89 => 
                ap_NS_fsm <= ap_ST_fsm_state90;
            when ap_ST_fsm_state90 => 
                if (((exitcond5_fu_918_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state90))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_state91 => 
                if (((grp_k2c_idx2sub_fu_673_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state91))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                else
                    ap_NS_fsm <= ap_ST_fsm_state91;
                end if;
            when ap_ST_fsm_pp5_stage0 => 
                if ((not(((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (exitcond10_fu_937_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1))) and not(((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                elsif ((((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1)) or ((ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_const_boolean_0 = ap_block_pp5_stage0_subdone) and (exitcond10_fu_937_p2 = ap_const_lv1_1) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_state95;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp5_stage0;
                end if;
            when ap_ST_fsm_state95 => 
                ap_NS_fsm <= ap_ST_fsm_state96;
            when ap_ST_fsm_state96 => 
                if (((grp_k2c_sub2idx_fu_685_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state96))) then
                    ap_NS_fsm <= ap_ST_fsm_state90;
                else
                    ap_NS_fsm <= ap_ST_fsm_state96;
                end if;
            when ap_ST_fsm_state97 => 
                if (((exitcond4_fu_948_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state97))) then
                    ap_NS_fsm <= ap_ST_fsm_state104;
                else
                    ap_NS_fsm <= ap_ST_fsm_state98;
                end if;
            when ap_ST_fsm_state98 => 
                if (((grp_k2c_idx2sub_fu_673_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state98))) then
                    ap_NS_fsm <= ap_ST_fsm_state99;
                else
                    ap_NS_fsm <= ap_ST_fsm_state98;
                end if;
            when ap_ST_fsm_state99 => 
                if (((exitcond9_fu_978_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state99))) then
                    ap_NS_fsm <= ap_ST_fsm_state97;
                else
                    ap_NS_fsm <= ap_ST_fsm_state100;
                end if;
            when ap_ST_fsm_state100 => 
                ap_NS_fsm <= ap_ST_fsm_state101;
            when ap_ST_fsm_state101 => 
                if (((ifzero_reg_1458 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state101))) then
                    ap_NS_fsm <= ap_ST_fsm_state103;
                else
                    ap_NS_fsm <= ap_ST_fsm_state102;
                end if;
            when ap_ST_fsm_state102 => 
                ap_NS_fsm <= ap_ST_fsm_state103;
            when ap_ST_fsm_state103 => 
                if (((ap_const_boolean_0 = ap_block_state103_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state103))) then
                    ap_NS_fsm <= ap_ST_fsm_state99;
                else
                    ap_NS_fsm <= ap_ST_fsm_state103;
                end if;
            when ap_ST_fsm_state104 => 
                if (((exitcond_flatten_fu_1020_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state104))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_pp6_stage0 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (exitcond_fu_1083_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1))) and (ap_const_boolean_0 = ap_block_pp6_stage0_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage1;
                elsif (((ap_const_boolean_0 = ap_block_pp6_stage0_subdone) and (ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (exitcond_fu_1083_p2 = ap_const_lv1_1) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state113;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                end if;
            when ap_ST_fsm_pp6_stage1 => 
                if ((ap_const_boolean_0 = ap_block_pp6_stage1_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage2;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage1;
                end if;
            when ap_ST_fsm_pp6_stage2 => 
                if ((ap_const_boolean_0 = ap_block_pp6_stage2_subdone)) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage3;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage2;
                end if;
            when ap_ST_fsm_pp6_stage3 => 
                if ((not(((ap_const_boolean_0 = ap_block_pp6_stage3_subdone) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage3))) and (ap_const_boolean_0 = ap_block_pp6_stage3_subdone))) then
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp6_stage3_subdone) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage3))) then
                    ap_NS_fsm <= ap_ST_fsm_state113;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp6_stage3;
                end if;
            when ap_ST_fsm_state113 => 
                ap_NS_fsm <= ap_ST_fsm_state104;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end case;
    end process;
    Ar_array_address0 <= i_10_reg_571(12 - 1 downto 0);

    Ar_array_ce0_assign_proc : process(ap_CS_fsm_state95)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state95)) then 
            Ar_array_ce0 <= ap_const_logic_1;
        else 
            Ar_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Ar_shape_address0_assign_proc : process(axesA_load_reg_1172, ap_CS_fsm_state4, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter1, ap_CS_fsm_state91, permA_q0, grp_k2c_idx2sub_fu_673_shape_address0, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            Ar_shape_address0 <= permA_q0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            Ar_shape_address0 <= axesA_load_reg_1172(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            Ar_shape_address0 <= grp_k2c_idx2sub_fu_673_shape_address0;
        else 
            Ar_shape_address0 <= "XXX";
        end if; 
    end process;


    Ar_shape_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter1, ap_CS_fsm_state91, grp_k2c_idx2sub_fu_673_shape_ce0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)))) then 
            Ar_shape_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            Ar_shape_ce0 <= grp_k2c_idx2sub_fu_673_shape_ce0;
        else 
            Ar_shape_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Asub_address0_assign_proc : process(ap_CS_fsm_pp5_stage0, j4_cast4_reg_1448, ifzero_reg_1458, ap_CS_fsm_state91, ap_enable_reg_pp5_iter1, permA_q0, grp_k2c_idx2sub_fu_673_sub_address0, grp_k2c_sub2idx_fu_685_sub_address0, ap_CS_fsm_state103, ap_block_pp5_stage0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            Asub_address0 <= j4_cast4_reg_1448(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            Asub_address0 <= permA_q0(3 - 1 downto 0);
        elsif (((ifzero_reg_1458 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state103))) then 
            Asub_address0 <= grp_k2c_sub2idx_fu_685_sub_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            Asub_address0 <= grp_k2c_idx2sub_fu_673_sub_address0;
        else 
            Asub_address0 <= "XXX";
        end if; 
    end process;


    Asub_ce0_assign_proc : process(ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ifzero_reg_1458, ap_CS_fsm_state91, ap_enable_reg_pp5_iter1, grp_k2c_idx2sub_fu_673_sub_ce0, grp_k2c_sub2idx_fu_685_sub_ce0, ap_CS_fsm_state103, ap_CS_fsm_state101)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state101) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)))) then 
            Asub_ce0 <= ap_const_logic_1;
        elsif (((ifzero_reg_1458 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state103))) then 
            Asub_ce0 <= grp_k2c_sub2idx_fu_685_sub_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            Asub_ce0 <= grp_k2c_idx2sub_fu_673_sub_ce0;
        else 
            Asub_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Asub_d0_assign_proc : process(ap_CS_fsm_state91, Bsub_q0, grp_k2c_idx2sub_fu_673_sub_d0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            Asub_d0 <= Bsub_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            Asub_d0 <= grp_k2c_idx2sub_fu_673_sub_d0;
        else 
            Asub_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Asub_we0_assign_proc : process(ap_CS_fsm_state91, grp_k2c_idx2sub_fu_673_sub_we0, ap_CS_fsm_state101)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state101)) then 
            Asub_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            Asub_we0 <= grp_k2c_idx2sub_fu_673_sub_we0;
        else 
            Asub_we0 <= ap_const_logic_0;
        end if; 
    end process;

    B_array_address0 <= B_array_addr_reg_1430;

    B_array_ce0_assign_proc : process(ap_CS_fsm_state102)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state102)) then 
            B_array_ce0 <= ap_const_logic_1;
        else 
            B_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    B_shape_address0_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter1, grp_k2c_idx2sub_fu_673_shape_address0, ap_CS_fsm_state98, ap_block_pp4_stage0, extLd_fu_913_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            B_shape_address0 <= extLd_fu_913_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state46)) then 
            B_shape_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            B_shape_address0 <= grp_k2c_idx2sub_fu_673_shape_address0;
        else 
            B_shape_address0 <= "XXX";
        end if; 
    end process;


    B_shape_ce0_assign_proc : process(ap_CS_fsm_state46, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter1, grp_k2c_idx2sub_fu_673_shape_ce0, ap_CS_fsm_state98)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state46) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)))) then 
            B_shape_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            B_shape_ce0 <= grp_k2c_idx2sub_fu_673_shape_ce0;
        else 
            B_shape_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Bsub_address0_assign_proc : process(j3_cast_reg_1388_pp5_iter1_reg, ap_CS_fsm_state100, ap_enable_reg_pp5_iter2, grp_k2c_idx2sub_fu_673_sub_address0, grp_k2c_sub2idx_fu_685_sub_address0, ap_CS_fsm_state96, ap_CS_fsm_state98, ap_block_pp5_stage0, extLd1_fu_1001_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state100)) then 
            Bsub_address0 <= extLd1_fu_1001_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            Bsub_address0 <= j3_cast_reg_1388_pp5_iter1_reg(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            Bsub_address0 <= grp_k2c_sub2idx_fu_685_sub_address0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            Bsub_address0 <= grp_k2c_idx2sub_fu_673_sub_address0;
        else 
            Bsub_address0 <= "XXX";
        end if; 
    end process;


    Bsub_ce0_assign_proc : process(ap_block_pp5_stage0_11001, ap_CS_fsm_state100, ap_enable_reg_pp5_iter2, grp_k2c_idx2sub_fu_673_sub_ce0, grp_k2c_sub2idx_fu_685_sub_ce0, ap_CS_fsm_state96, ap_CS_fsm_state98)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state100) or ((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1)))) then 
            Bsub_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            Bsub_ce0 <= grp_k2c_sub2idx_fu_685_sub_ce0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            Bsub_ce0 <= grp_k2c_idx2sub_fu_673_sub_ce0;
        else 
            Bsub_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    Bsub_d0_assign_proc : process(ap_enable_reg_pp5_iter2, Asub_q0, grp_k2c_idx2sub_fu_673_sub_d0, ap_CS_fsm_state98, ap_block_pp5_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            Bsub_d0 <= Asub_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            Bsub_d0 <= grp_k2c_idx2sub_fu_673_sub_d0;
        else 
            Bsub_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    Bsub_we0_assign_proc : process(ap_block_pp5_stage0_11001, exitcond10_reg_1393_pp5_iter1_reg, ap_enable_reg_pp5_iter2, grp_k2c_idx2sub_fu_673_sub_we0, ap_CS_fsm_state98)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (exitcond10_reg_1393_pp5_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp5_iter2 = ap_const_logic_1))) then 
            Bsub_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            Bsub_we0 <= grp_k2c_idx2sub_fu_673_sub_we0;
        else 
            Bsub_we0 <= ap_const_logic_0;
        end if; 
    end process;


    C_array_address0_assign_proc : process(ap_CS_fsm_state104, C_array_addr_reg_1496, ap_CS_fsm_pp6_stage3, ap_enable_reg_pp6_iter1, tmp_25_cast_fu_1079_p1, ap_block_pp6_stage3)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage3) and (ap_const_boolean_0 = ap_block_pp6_stage3))) then 
            C_array_address0 <= C_array_addr_reg_1496;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            C_array_address0 <= tmp_25_cast_fu_1079_p1(12 - 1 downto 0);
        else 
            C_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    C_array_ce0_assign_proc : process(ap_CS_fsm_state104, ap_CS_fsm_pp6_stage3, ap_block_pp6_stage3_11001, ap_enable_reg_pp6_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state104) or ((ap_const_boolean_0 = ap_block_pp6_stage3_11001) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage3)))) then 
            C_array_ce0 <= ap_const_logic_1;
        else 
            C_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    C_array_d0_assign_proc : process(ap_CS_fsm_state104, ap_CS_fsm_pp6_stage3, grp_fu_694_p2, ap_enable_reg_pp6_iter1, ap_block_pp6_stage3)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage3) and (ap_const_boolean_0 = ap_block_pp6_stage3))) then 
            C_array_d0 <= grp_fu_694_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state104)) then 
            C_array_d0 <= ap_const_lv32_0;
        else 
            C_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    C_array_we0_assign_proc : process(exitcond_flatten_fu_1020_p2, ap_CS_fsm_state104, exitcond_reg_1501_pp6_iter1_reg, ap_CS_fsm_pp6_stage3, ap_block_pp6_stage3_11001, ap_enable_reg_pp6_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp6_stage3_11001) and (exitcond_reg_1501_pp6_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage3)) or ((exitcond_flatten_fu_1020_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state104)))) then 
            C_array_we0 <= ap_const_logic_1;
        else 
            C_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(72);
    ap_CS_fsm_pp1_stage0 <= ap_CS_fsm(74);
    ap_CS_fsm_pp2_stage0 <= ap_CS_fsm(76);
    ap_CS_fsm_pp3_stage0 <= ap_CS_fsm(78);
    ap_CS_fsm_pp4_stage0 <= ap_CS_fsm(80);
    ap_CS_fsm_pp5_stage0 <= ap_CS_fsm(84);
    ap_CS_fsm_pp6_stage0 <= ap_CS_fsm(95);
    ap_CS_fsm_pp6_stage1 <= ap_CS_fsm(96);
    ap_CS_fsm_pp6_stage2 <= ap_CS_fsm(97);
    ap_CS_fsm_pp6_stage3 <= ap_CS_fsm(98);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state100 <= ap_CS_fsm(90);
    ap_CS_fsm_state101 <= ap_CS_fsm(91);
    ap_CS_fsm_state102 <= ap_CS_fsm(92);
    ap_CS_fsm_state103 <= ap_CS_fsm(93);
    ap_CS_fsm_state104 <= ap_CS_fsm(94);
    ap_CS_fsm_state113 <= ap_CS_fsm(99);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state46 <= ap_CS_fsm(45);
    ap_CS_fsm_state47 <= ap_CS_fsm(46);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state72 <= ap_CS_fsm(71);
    ap_CS_fsm_state75 <= ap_CS_fsm(73);
    ap_CS_fsm_state78 <= ap_CS_fsm(75);
    ap_CS_fsm_state81 <= ap_CS_fsm(77);
    ap_CS_fsm_state85 <= ap_CS_fsm(79);
    ap_CS_fsm_state89 <= ap_CS_fsm(81);
    ap_CS_fsm_state90 <= ap_CS_fsm(82);
    ap_CS_fsm_state91 <= ap_CS_fsm(83);
    ap_CS_fsm_state95 <= ap_CS_fsm(85);
    ap_CS_fsm_state96 <= ap_CS_fsm(86);
    ap_CS_fsm_state97 <= ap_CS_fsm(87);
    ap_CS_fsm_state98 <= ap_CS_fsm(88);
    ap_CS_fsm_state99 <= ap_CS_fsm(89);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp1_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp2_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp3_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp4_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp5_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage1_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage1_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage2_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage3 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage3_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp6_stage3_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_block_state103_on_subcall_done_assign_proc : process(ifzero_reg_1458, grp_k2c_sub2idx_fu_685_ap_done)
    begin
                ap_block_state103_on_subcall_done <= ((grp_k2c_sub2idx_fu_685_ap_done = ap_const_logic_0) and (ifzero_reg_1458 = ap_const_lv1_1));
    end process;

        ap_block_state105_pp6_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state106_pp6_stage1_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state107_pp6_stage2_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state108_pp6_stage3_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state109_pp6_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state110_pp6_stage1_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state111_pp6_stage2_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state112_pp6_stage3_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state73_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state74_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state76_pp1_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state77_pp1_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state79_pp2_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state80_pp2_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state82_pp3_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state83_pp3_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state84_pp3_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state86_pp4_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state87_pp4_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state88_pp4_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state92_pp5_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state93_pp5_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state94_pp5_stage0_iter2 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state73_assign_proc : process(exitcond8_fu_820_p2)
    begin
        if ((exitcond8_fu_820_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state73 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state73 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp1_exit_iter0_state76_assign_proc : process(tmp_s_fu_835_p2)
    begin
        if ((tmp_s_fu_835_p2 = ap_const_lv1_0)) then 
            ap_condition_pp1_exit_iter0_state76 <= ap_const_logic_1;
        else 
            ap_condition_pp1_exit_iter0_state76 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp2_exit_iter0_state79_assign_proc : process(exitcond1_fu_852_p2)
    begin
        if ((exitcond1_fu_852_p2 = ap_const_lv1_1)) then 
            ap_condition_pp2_exit_iter0_state79 <= ap_const_logic_1;
        else 
            ap_condition_pp2_exit_iter0_state79 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp3_exit_iter0_state82_assign_proc : process(exitcond2_fu_885_p2)
    begin
        if ((exitcond2_fu_885_p2 = ap_const_lv1_1)) then 
            ap_condition_pp3_exit_iter0_state82 <= ap_const_logic_1;
        else 
            ap_condition_pp3_exit_iter0_state82 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp4_exit_iter0_state86_assign_proc : process(exitcond3_fu_896_p2)
    begin
        if ((exitcond3_fu_896_p2 = ap_const_lv1_1)) then 
            ap_condition_pp4_exit_iter0_state86 <= ap_const_logic_1;
        else 
            ap_condition_pp4_exit_iter0_state86 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp5_exit_iter0_state92_assign_proc : process(exitcond10_fu_937_p2)
    begin
        if ((exitcond10_fu_937_p2 = ap_const_lv1_1)) then 
            ap_condition_pp5_exit_iter0_state92 <= ap_const_logic_1;
        else 
            ap_condition_pp5_exit_iter0_state92 <= ap_const_logic_0;
        end if; 
    end process;


    ap_condition_pp6_exit_iter0_state105_assign_proc : process(exitcond_fu_1083_p2)
    begin
        if ((exitcond_fu_1083_p2 = ap_const_lv1_1)) then 
            ap_condition_pp6_exit_iter0_state105 <= ap_const_logic_1;
        else 
            ap_condition_pp6_exit_iter0_state105 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, exitcond_flatten_fu_1020_p2, ap_CS_fsm_state104)
    begin
        if ((((exitcond_flatten_fu_1020_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state104)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);
    ap_enable_pp1 <= (ap_idle_pp1 xor ap_const_logic_1);
    ap_enable_pp2 <= (ap_idle_pp2 xor ap_const_logic_1);
    ap_enable_pp3 <= (ap_idle_pp3 xor ap_const_logic_1);
    ap_enable_pp4 <= (ap_idle_pp4 xor ap_const_logic_1);
    ap_enable_pp5 <= (ap_idle_pp5 xor ap_const_logic_1);
    ap_enable_pp6 <= (ap_idle_pp6 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp1_assign_proc : process(ap_enable_reg_pp1_iter0, ap_enable_reg_pp1_iter1)
    begin
        if (((ap_enable_reg_pp1_iter1 = ap_const_logic_0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_0))) then 
            ap_idle_pp1 <= ap_const_logic_1;
        else 
            ap_idle_pp1 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp2_assign_proc : process(ap_enable_reg_pp2_iter0, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_enable_reg_pp2_iter1 = ap_const_logic_0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_0))) then 
            ap_idle_pp2 <= ap_const_logic_1;
        else 
            ap_idle_pp2 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp3_assign_proc : process(ap_enable_reg_pp3_iter0, ap_enable_reg_pp3_iter1, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_enable_reg_pp3_iter2 = ap_const_logic_0) and (ap_enable_reg_pp3_iter1 = ap_const_logic_0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_0))) then 
            ap_idle_pp3 <= ap_const_logic_1;
        else 
            ap_idle_pp3 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp4_assign_proc : process(ap_enable_reg_pp4_iter0, ap_enable_reg_pp4_iter1, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_enable_reg_pp4_iter2 = ap_const_logic_0) and (ap_enable_reg_pp4_iter1 = ap_const_logic_0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_0))) then 
            ap_idle_pp4 <= ap_const_logic_1;
        else 
            ap_idle_pp4 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp5_assign_proc : process(ap_enable_reg_pp5_iter0, ap_enable_reg_pp5_iter1, ap_enable_reg_pp5_iter2)
    begin
        if (((ap_enable_reg_pp5_iter2 = ap_const_logic_0) and (ap_enable_reg_pp5_iter1 = ap_const_logic_0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_0))) then 
            ap_idle_pp5 <= ap_const_logic_1;
        else 
            ap_idle_pp5 <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp6_assign_proc : process(ap_enable_reg_pp6_iter0, ap_enable_reg_pp6_iter1)
    begin
        if (((ap_enable_reg_pp6_iter1 = ap_const_logic_0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_0))) then 
            ap_idle_pp6 <= ap_const_logic_1;
        else 
            ap_idle_pp6 <= ap_const_logic_0;
        end if; 
    end process;


    ap_phi_mux_i_7_phi_fu_530_p4_assign_proc : process(i_7_reg_526, exitcond1_reg_1307, ap_CS_fsm_pp2_stage0, i_25_reg_1316, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (exitcond1_reg_1307 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            ap_phi_mux_i_7_phi_fu_530_p4 <= i_25_reg_1316;
        else 
            ap_phi_mux_i_7_phi_fu_530_p4 <= i_7_reg_526;
        end if; 
    end process;


    ap_phi_mux_k_phi_fu_666_p4_assign_proc : process(k_reg_662, exitcond_reg_1501, ap_CS_fsm_pp6_stage0, k_2_reg_1505, ap_enable_reg_pp6_iter1, ap_block_pp6_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0) and (exitcond_reg_1501 = ap_const_lv1_0) and (ap_enable_reg_pp6_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            ap_phi_mux_k_phi_fu_666_p4 <= k_2_reg_1505;
        else 
            ap_phi_mux_k_phi_fu_666_p4 <= k_reg_662;
        end if; 
    end process;


    ap_ready_assign_proc : process(exitcond_flatten_fu_1020_p2, ap_CS_fsm_state104)
    begin
        if (((exitcond_flatten_fu_1020_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state104))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    axesA_address0_assign_proc : process(ap_CS_fsm_state1, j_reg_514, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp1_iter0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            axesA_address0 <= j_reg_514(1 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state1)) then 
            axesA_address0 <= ap_const_lv64_0(1 - 1 downto 0);
        else 
            axesA_address0 <= "X";
        end if; 
    end process;


    axesA_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_enable_reg_pp1_iter0)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1)))) then 
            axesA_ce0 <= ap_const_logic_1;
        else 
            axesA_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_972_p0 <= bound_fu_972_p00(64 - 1 downto 0);
    bound_fu_972_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(free_axesB_reg_1238),128));
    bound_fu_972_p1 <= bound_fu_972_p10(64 - 1 downto 0);
    bound_fu_972_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(free_axesA_reg_1233),128));
    bound_fu_972_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_972_p0) * unsigned(bound_fu_972_p1), 128));
    count_4_fu_729_p2 <= std_logic_vector(unsigned(count_fu_94) + unsigned(ap_const_lv64_1));
    count_5_fu_767_p2 <= std_logic_vector(unsigned(count_2_fu_130) + unsigned(ap_const_lv64_1));
    exitcond10_fu_937_p2 <= "1" when (j3_cast_fu_932_p1 = Ar_ndim_read) else "0";
    exitcond1_fu_852_p2 <= "1" when (ap_phi_mux_i_7_phi_fu_530_p4 = ap_const_lv2_2) else "0";
    exitcond2_fu_885_p2 <= "1" when (i_8_cast_fu_880_p1 = Ar_ndim_read) else "0";
    exitcond3_fu_896_p2 <= "1" when (i_9_reg_560 = ap_const_lv2_2) else "0";
    exitcond4_fu_948_p2 <= "1" when (i_11_reg_595 = ap_const_lv19_40038) else "0";
    exitcond5_fu_918_p2 <= "1" when (i_10_reg_571 = Ar_numel_read) else "0";
    exitcond6_fu_709_p2 <= "1" when (i_reg_470 = Ar_ndim_read) else "0";
    exitcond7_fu_745_p2 <= "1" when (i_1_reg_482 = ap_const_lv2_2) else "0";
    exitcond8_fu_820_p2 <= "1" when (i_4_cast_fu_815_p1 = i_20_reg_1254) else "0";
    exitcond9_fu_978_p2 <= "1" when (j4_reg_606 = ap_const_lv2_2) else "0";
    exitcond_flatten_fu_1020_p2 <= "1" when (indvar_flatten_reg_617 = bound_reg_1435) else "0";
    exitcond_fu_1083_p2 <= "1" when (ap_phi_mux_k_phi_fu_666_p4 = Ar_shape_load_reg_1212) else "0";
    extLd1_fu_1001_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(permB_q0),64));
    extLd_fu_913_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(permB_q0),64));

    freeA_address0_assign_proc : process(ap_CS_fsm_state3, i_4_cast_fu_815_p1, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0, count_fu_94)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            freeA_address0 <= i_4_cast_fu_815_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            freeA_address0 <= count_fu_94(3 - 1 downto 0);
        else 
            freeA_address0 <= "XXX";
        end if; 
    end process;


    freeA_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            freeA_ce0 <= ap_const_logic_1;
        else 
            freeA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    freeA_we0_assign_proc : process(ap_CS_fsm_state3, exitcond6_fu_709_p2, tmp_12_fu_720_p2)
    begin
        if (((tmp_12_fu_720_p2 = ap_const_lv1_0) and (exitcond6_fu_709_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            freeA_we0 <= ap_const_logic_1;
        else 
            freeA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    freeB_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp2_stage0, ap_enable_reg_pp2_iter0, ap_block_pp2_stage0, j_1_cast_fu_858_p1, count_2_fu_130)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            freeB_address0 <= j_1_cast_fu_858_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            freeB_address0 <= count_2_fu_130(3 - 1 downto 0);
        else 
            freeB_address0 <= "XXX";
        end if; 
    end process;


    freeB_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_enable_reg_pp2_iter0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            freeB_ce0 <= ap_const_logic_1;
        else 
            freeB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    freeB_we0_assign_proc : process(ap_CS_fsm_state4, exitcond7_fu_745_p2, tmp_fu_757_p2)
    begin
        if (((tmp_fu_757_p2 = ap_const_lv1_0) and (exitcond7_fu_745_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            freeB_we0 <= ap_const_logic_1;
        else 
            freeB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    fwork_address0_assign_proc : process(ap_CS_fsm_pp6_stage0, ap_enable_reg_pp6_iter0, grp_k2c_sub2idx_fu_685_ap_return, ap_CS_fsm_state96, ap_CS_fsm_state103, ap_block_pp6_stage0, sum9_cast_fu_1015_p1, sum_cast_fu_1103_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            fwork_address0 <= sum_cast_fu_1103_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            fwork_address0 <= sum9_cast_fu_1015_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            fwork_address0 <= grp_k2c_sub2idx_fu_685_ap_return(19 - 1 downto 0);
        else 
            fwork_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    fwork_address1 <= sum2_cast_fu_1123_p1(19 - 1 downto 0);

    fwork_ce0_assign_proc : process(ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_enable_reg_pp6_iter0, grp_k2c_sub2idx_fu_685_ap_done, ap_CS_fsm_state96, ap_CS_fsm_state103, ap_block_state103_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state103_on_subcall_done) and (ap_const_logic_1 = ap_CS_fsm_state103)) or ((grp_k2c_sub2idx_fu_685_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state96)) or ((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0)))) then 
            fwork_ce0 <= ap_const_logic_1;
        else 
            fwork_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    fwork_ce1_assign_proc : process(ap_CS_fsm_pp6_stage0, ap_block_pp6_stage0_11001, ap_enable_reg_pp6_iter0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp6_stage0_11001) and (ap_enable_reg_pp6_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp6_stage0))) then 
            fwork_ce1 <= ap_const_logic_1;
        else 
            fwork_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    fwork_d0_assign_proc : process(Ar_array_q0, B_array_q0, ap_CS_fsm_state96, ap_CS_fsm_state103)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state103)) then 
            fwork_d0 <= B_array_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            fwork_d0 <= Ar_array_q0;
        else 
            fwork_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    fwork_we0_assign_proc : process(ifzero_reg_1458, grp_k2c_sub2idx_fu_685_ap_done, ap_CS_fsm_state96, ap_CS_fsm_state103, ap_block_state103_on_subcall_done)
    begin
        if ((((ap_const_boolean_0 = ap_block_state103_on_subcall_done) and (ifzero_reg_1458 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state103)) or ((grp_k2c_sub2idx_fu_685_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state96)))) then 
            fwork_we0 <= ap_const_logic_1;
        else 
            fwork_we0 <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_1133_p0 <= tmp_21_mid2_v_v_fu_1050_p3(13 - 1 downto 0);
    grp_fu_1133_p2 <= j9_mid2_fu_1036_p3(13 - 1 downto 0);

    grp_fu_782_ap_start_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_782_ap_start <= ap_const_logic_1;
        else 
            grp_fu_782_ap_start <= ap_const_logic_0;
        end if; 
    end process;


    grp_fu_787_ap_start_assign_proc : process(ap_CS_fsm_state47)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state47)) then 
            grp_fu_787_ap_start <= ap_const_logic_1;
        else 
            grp_fu_787_ap_start <= ap_const_logic_0;
        end if; 
    end process;

    grp_fu_787_p0 <= ap_const_lv64_40038(22 - 1 downto 0);
    grp_k2c_idx2sub_fu_673_ap_start <= grp_k2c_idx2sub_fu_673_ap_start_reg;

    grp_k2c_idx2sub_fu_673_idx_assign_proc : process(i_11_cast5_reg_1425, ap_CS_fsm_state91, i_10_reg_571, ap_CS_fsm_state98)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            grp_k2c_idx2sub_fu_673_idx <= i_11_cast5_reg_1425;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_k2c_idx2sub_fu_673_idx <= i_10_reg_571;
        else 
            grp_k2c_idx2sub_fu_673_idx <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_k2c_idx2sub_fu_673_ndim_assign_proc : process(Ar_ndim_read, ap_CS_fsm_state91, ap_CS_fsm_state98)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            grp_k2c_idx2sub_fu_673_ndim <= ap_const_lv64_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_k2c_idx2sub_fu_673_ndim <= Ar_ndim_read;
        else 
            grp_k2c_idx2sub_fu_673_ndim <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_k2c_idx2sub_fu_673_shape_q0_assign_proc : process(Ar_shape_q0, B_shape_q0, ap_CS_fsm_state91, ap_CS_fsm_state98)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state98)) then 
            grp_k2c_idx2sub_fu_673_shape_q0 <= B_shape_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state91)) then 
            grp_k2c_idx2sub_fu_673_shape_q0 <= Ar_shape_q0;
        else 
            grp_k2c_idx2sub_fu_673_shape_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_k2c_sub2idx_fu_685_ap_start <= grp_k2c_sub2idx_fu_685_ap_start_reg;

    grp_k2c_sub2idx_fu_685_ndim_assign_proc : process(Ar_ndim_read, ifzero_reg_1458, ap_CS_fsm_state96, ap_CS_fsm_state103)
    begin
        if (((ifzero_reg_1458 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state103))) then 
            grp_k2c_sub2idx_fu_685_ndim <= ap_const_lv64_2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_k2c_sub2idx_fu_685_ndim <= Ar_ndim_read;
        else 
            grp_k2c_sub2idx_fu_685_ndim <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_k2c_sub2idx_fu_685_shape_q0_assign_proc : process(ifzero_reg_1458, newshpA_q0, newshpB_q0, ap_CS_fsm_state96, ap_CS_fsm_state103)
    begin
        if (((ifzero_reg_1458 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state103))) then 
            grp_k2c_sub2idx_fu_685_shape_q0 <= newshpB_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_k2c_sub2idx_fu_685_shape_q0 <= newshpA_q0;
        else 
            grp_k2c_sub2idx_fu_685_shape_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_k2c_sub2idx_fu_685_sub_q0_assign_proc : process(ifzero_reg_1458, Asub_q0, Bsub_q0, ap_CS_fsm_state96, ap_CS_fsm_state103)
    begin
        if (((ifzero_reg_1458 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state103))) then 
            grp_k2c_sub2idx_fu_685_sub_q0 <= Asub_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            grp_k2c_sub2idx_fu_685_sub_q0 <= Bsub_q0;
        else 
            grp_k2c_sub2idx_fu_685_sub_q0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    i_11_cast5_fu_960_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_11_reg_595),64));
    i_20_cast_fu_809_p2 <= std_logic_vector(signed(ap_const_lv3_7) + signed(tmp_31_fu_801_p1));
    i_20_fu_804_p2 <= std_logic_vector(signed(ap_const_lv64_FFFFFFFFFFFFFFFF) + signed(Ar_ndim_read));
    i_21_fu_714_p2 <= std_logic_vector(unsigned(i_reg_470) + unsigned(ap_const_lv64_1));
    i_22_fu_825_p2 <= std_logic_vector(unsigned(i_4_reg_494) + unsigned(ap_const_lv3_1));
    i_23_fu_751_p2 <= std_logic_vector(unsigned(i_1_reg_482) + unsigned(ap_const_lv2_1));
    i_24_fu_846_p2 <= std_logic_vector(unsigned(i_5_reg_505) + unsigned(ap_const_lv3_1));
    i_25_fu_863_p2 <= std_logic_vector(unsigned(ap_phi_mux_i_7_phi_fu_530_p4) + unsigned(ap_const_lv2_1));
    i_26_fu_890_p2 <= std_logic_vector(unsigned(i_8_reg_549) + unsigned(ap_const_lv3_1));
    i_27_fu_902_p2 <= std_logic_vector(unsigned(i_9_reg_560) + unsigned(ap_const_lv2_1));
    i_28_fu_923_p2 <= std_logic_vector(unsigned(i_10_reg_571) + unsigned(ap_const_lv64_1));
    i_29_fu_954_p2 <= std_logic_vector(unsigned(i_11_reg_595) + unsigned(ap_const_lv19_1));
    i_30_fu_1044_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(i_s_reg_628));
    i_4_cast_fu_815_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_4_reg_494),64));
    i_5_cast_fu_831_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_5_reg_505),64));
    i_7_cast7_fu_875_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_7_reg_526),64));
    i_8_cast_fu_880_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_8_reg_549),64));
    i_9_cast6_fu_908_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_9_reg_560),64));
    ifzero_fu_995_p2 <= "1" when (j_8_fu_984_p2 = ap_const_lv2_2) else "0";
    indvar_flatten_next_fu_1025_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_617) + unsigned(ap_const_lv128_lc_2));
    j3_cast_fu_932_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j3_reg_584),64));
    j4_cast4_fu_990_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j4_reg_606),64));
    j9_mid2_fu_1036_p3 <= 
        j9_reg_639 when (tmp_19_fu_1031_p2(0) = '1') else 
        ap_const_lv64_0;
    j_1_cast_fu_858_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(j_1_reg_538),64));
    j_5_fu_840_p2 <= std_logic_vector(unsigned(j_reg_514) + unsigned(ap_const_lv64_1));
    j_6_fu_869_p2 <= (j_1_reg_538 xor ap_const_lv1_1);
    j_7_fu_942_p2 <= std_logic_vector(unsigned(j3_reg_584) + unsigned(ap_const_lv3_1));
    j_8_fu_984_p2 <= std_logic_vector(unsigned(j4_reg_606) + unsigned(ap_const_lv2_1));
    j_9_fu_1128_p2 <= std_logic_vector(unsigned(j9_mid2_reg_1476) + unsigned(ap_const_lv64_1));
    k_2_fu_1088_p2 <= std_logic_vector(unsigned(ap_phi_mux_k_phi_fu_666_p4) + unsigned(ap_const_lv64_1));

    newshpA_address0_assign_proc : process(i_8_cast_reg_1326_pp3_iter1_reg, ap_enable_reg_pp3_iter2, grp_k2c_sub2idx_fu_685_shape_address0, ap_CS_fsm_state96, ap_block_pp3_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            newshpA_address0 <= i_8_cast_reg_1326_pp3_iter1_reg(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            newshpA_address0 <= grp_k2c_sub2idx_fu_685_shape_address0;
        else 
            newshpA_address0 <= "XXX";
        end if; 
    end process;


    newshpA_ce0_assign_proc : process(ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter2, grp_k2c_sub2idx_fu_685_shape_ce0, ap_CS_fsm_state96)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            newshpA_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state96)) then 
            newshpA_ce0 <= grp_k2c_sub2idx_fu_685_shape_ce0;
        else 
            newshpA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    newshpA_we0_assign_proc : process(ap_block_pp3_stage0_11001, exitcond2_reg_1331_pp3_iter1_reg, ap_enable_reg_pp3_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (exitcond2_reg_1331_pp3_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp3_iter2 = ap_const_logic_1))) then 
            newshpA_we0 <= ap_const_logic_1;
        else 
            newshpA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    newshpB_address0_assign_proc : process(i_9_cast6_reg_1359_pp4_iter1_reg, ifzero_reg_1458, ap_enable_reg_pp4_iter2, grp_k2c_sub2idx_fu_685_shape_address0, ap_CS_fsm_state103, ap_block_pp4_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            newshpB_address0 <= i_9_cast6_reg_1359_pp4_iter1_reg(3 - 1 downto 0);
        elsif (((ifzero_reg_1458 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state103))) then 
            newshpB_address0 <= grp_k2c_sub2idx_fu_685_shape_address0;
        else 
            newshpB_address0 <= "XXX";
        end if; 
    end process;


    newshpB_ce0_assign_proc : process(ap_block_pp4_stage0_11001, ifzero_reg_1458, ap_enable_reg_pp4_iter2, grp_k2c_sub2idx_fu_685_shape_ce0, ap_CS_fsm_state103)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            newshpB_ce0 <= ap_const_logic_1;
        elsif (((ifzero_reg_1458 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state103))) then 
            newshpB_ce0 <= grp_k2c_sub2idx_fu_685_shape_ce0;
        else 
            newshpB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    newshpB_we0_assign_proc : process(ap_block_pp4_stage0_11001, exitcond3_reg_1350_pp4_iter1_reg, ap_enable_reg_pp4_iter2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (exitcond3_reg_1350_pp4_iter1_reg = ap_const_lv1_0) and (ap_enable_reg_pp4_iter2 = ap_const_logic_1))) then 
            newshpB_we0 <= ap_const_logic_1;
        else 
            newshpB_we0 <= ap_const_logic_0;
        end if; 
    end process;


    permA_address0_assign_proc : process(i_4_cast_reg_1264, ap_CS_fsm_pp0_stage0, i_5_cast_reg_1283, ap_CS_fsm_pp1_stage0, i_8_cast_fu_880_p1, ap_CS_fsm_pp3_stage0, ap_enable_reg_pp3_iter0, j3_cast_fu_932_p1, ap_CS_fsm_pp5_stage0, ap_enable_reg_pp5_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, ap_block_pp0_stage0, ap_block_pp1_stage0, ap_block_pp3_stage0, ap_block_pp5_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp5_stage0) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0))) then 
            permA_address0 <= j3_cast_fu_932_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp3_stage0) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0))) then 
            permA_address0 <= i_8_cast_fu_880_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            permA_address0 <= i_5_cast_reg_1283(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            permA_address0 <= i_4_cast_reg_1264(3 - 1 downto 0);
        else 
            permA_address0 <= "XXX";
        end if; 
    end process;


    permA_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, ap_CS_fsm_pp3_stage0, ap_block_pp3_stage0_11001, ap_enable_reg_pp3_iter0, ap_CS_fsm_pp5_stage0, ap_block_pp5_stage0_11001, ap_enable_reg_pp5_iter0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp5_stage0_11001) and (ap_enable_reg_pp5_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp5_stage0)) or ((ap_const_boolean_0 = ap_block_pp3_stage0_11001) and (ap_enable_reg_pp3_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp3_stage0)) or ((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            permA_ce0 <= ap_const_logic_1;
        else 
            permA_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    permA_d0_assign_proc : process(axesA_q0, ap_CS_fsm_pp0_stage0, ap_CS_fsm_pp1_stage0, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1, freeA_q0, ap_block_pp0_stage0, ap_block_pp1_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp1_stage0) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0))) then 
            permA_d0 <= axesA_q0;
        elsif (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            permA_d0 <= freeA_q0;
        else 
            permA_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    permA_we0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, exitcond8_reg_1269, ap_CS_fsm_pp1_stage0, ap_block_pp1_stage0_11001, tmp_s_reg_1288, ap_enable_reg_pp0_iter1, ap_enable_reg_pp1_iter1)
    begin
        if ((((ap_const_boolean_0 = ap_block_pp1_stage0_11001) and (tmp_s_reg_1288 = ap_const_lv1_1) and (ap_enable_reg_pp1_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp1_stage0)) or ((exitcond8_reg_1269 = ap_const_lv1_0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            permA_we0 <= ap_const_logic_1;
        else 
            permA_we0 <= ap_const_logic_0;
        end if; 
    end process;


    permB_address0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_pp4_stage0, ap_enable_reg_pp4_iter0, i_9_cast6_fu_908_p1, ap_CS_fsm_state99, j4_cast4_fu_990_p1, ap_CS_fsm_state78, ap_enable_reg_pp2_iter1, ap_block_pp2_stage0, i_7_cast7_fu_875_p1, ap_block_pp4_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state99)) then 
            permB_address0 <= j4_cast4_fu_990_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp4_stage0) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0))) then 
            permB_address0 <= i_9_cast6_fu_908_p1(3 - 1 downto 0);
        elsif (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            permB_address0 <= i_7_cast7_fu_875_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            permB_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        else 
            permB_address0 <= "XXX";
        end if; 
    end process;


    permB_ce0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_pp4_stage0, ap_block_pp4_stage0_11001, ap_enable_reg_pp4_iter0, ap_CS_fsm_state99, ap_CS_fsm_state78, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or (ap_const_logic_1 = ap_CS_fsm_state99) or ((ap_const_boolean_0 = ap_block_pp4_stage0_11001) and (ap_enable_reg_pp4_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp4_stage0)) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            permB_ce0 <= ap_const_logic_1;
        else 
            permB_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    permB_d0_assign_proc : process(ap_CS_fsm_pp2_stage0, ap_CS_fsm_state78, ap_enable_reg_pp2_iter1, freeB_q0, ap_block_pp2_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp2_stage0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0))) then 
            permB_d0 <= freeB_q0;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state78)) then 
            permB_d0 <= ap_const_lv2_0;
        else 
            permB_d0 <= "XX";
        end if; 
    end process;


    permB_we0_assign_proc : process(exitcond1_reg_1307, ap_CS_fsm_pp2_stage0, ap_block_pp2_stage0_11001, ap_CS_fsm_state78, ap_enable_reg_pp2_iter1)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state78) or ((ap_const_boolean_0 = ap_block_pp2_stage0_11001) and (exitcond1_reg_1307 = ap_const_lv1_0) and (ap_enable_reg_pp2_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp2_stage0)))) then 
            permB_we0 <= ap_const_logic_1;
        else 
            permB_we0 <= ap_const_logic_0;
        end if; 
    end process;

    sum2_cast_fu_1123_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum2_fu_1118_p2),64));
    sum2_fu_1118_p2 <= std_logic_vector(unsigned(tmp1_fu_1113_p2) + unsigned(tmp_35_reg_1491));
    sum9_cast_fu_1015_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum9_fu_1010_p2),64));
    sum9_fu_1010_p2 <= std_logic_vector(unsigned(tmp_37_fu_1006_p1) + unsigned(tmp_32_reg_1382));
    sum_cast_fu_1103_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(sum_fu_1098_p2),64));
    sum_fu_1098_p2 <= std_logic_vector(signed(tmp_38_fu_1094_p1) + signed(tmp_22_mid2_reg_1486));
    tmp1_fu_1113_p2 <= std_logic_vector(unsigned(tmp_24_fu_1108_p2) + unsigned(tmp_32_reg_1382));
    tmp_12_fu_720_p2 <= "1" when (i_reg_470 = axesA_load_reg_1172) else "0";
    tmp_19_fu_1031_p2 <= "1" when (unsigned(j9_reg_639) < unsigned(free_axesB_reg_1238)) else "0";
    tmp_21_mid2_v_v_fu_1050_p3 <= 
        i_s_reg_628 when (tmp_19_fu_1031_p2(0) = '1') else 
        i_30_fu_1044_p2;
    tmp_22_mid2_fu_1066_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_28_reg_1218) * signed(tmp_34_fu_1062_p1))), 20));
    tmp_24_fu_1108_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_38_fu_1094_p1) * signed(tmp_29_reg_1244))), 20));
    tmp_25_cast_fu_1079_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_1133_p3),64));
    tmp_28_fu_778_p1 <= Ar_shape_q0(20 - 1 downto 0);
    tmp_29_fu_793_p1 <= grp_fu_787_p2(20 - 1 downto 0);
    tmp_30_fu_797_p1 <= grp_fu_787_p2(13 - 1 downto 0);
    tmp_31_fu_801_p1 <= Ar_ndim_read(3 - 1 downto 0);
    tmp_32_fu_929_p1 <= Ar_numel_read(20 - 1 downto 0);
    tmp_34_fu_1062_p1 <= tmp_21_mid2_v_v_fu_1050_p3(20 - 1 downto 0);
    tmp_35_fu_1071_p1 <= j9_mid2_fu_1036_p3(20 - 1 downto 0);
    tmp_37_fu_1006_p1 <= grp_k2c_sub2idx_fu_685_ap_return(20 - 1 downto 0);
    tmp_38_fu_1094_p1 <= ap_phi_mux_k_phi_fu_666_p4(20 - 1 downto 0);
    tmp_fu_757_p2 <= "1" when (i_1_reg_482 = ap_const_lv2_0) else "0";
    tmp_s_fu_835_p2 <= "1" when (unsigned(i_5_cast_fu_831_p1) < unsigned(Ar_ndim_read)) else "0";
end behav;
