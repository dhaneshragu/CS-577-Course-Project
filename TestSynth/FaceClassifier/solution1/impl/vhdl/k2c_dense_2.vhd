-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k2c_dense_2 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_array_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    output_array_ce0 : OUT STD_LOGIC;
    output_array_we0 : OUT STD_LOGIC;
    output_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    input_array_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    input_array_ce0 : OUT STD_LOGIC;
    input_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
    input_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    input_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_shape_ce0 : OUT STD_LOGIC;
    input_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_array_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    kernel_array_ce0 : OUT STD_LOGIC;
    kernel_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    kernel_shape_ce0 : OUT STD_LOGIC;
    kernel_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_shape_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    kernel_shape_ce1 : OUT STD_LOGIC;
    kernel_shape_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    bias_array_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    bias_array_ce0 : OUT STD_LOGIC;
    bias_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    fwork_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    fwork_ce0 : OUT STD_LOGIC;
    fwork_we0 : OUT STD_LOGIC;
    fwork_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fwork_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fwork_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    fwork_ce1 : OUT STD_LOGIC;
    fwork_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of k2c_dense_2 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (9 downto 0) := "0000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (9 downto 0) := "0000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (9 downto 0) := "0000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (9 downto 0) := "0000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (9 downto 0) := "0000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (9 downto 0) := "0001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (9 downto 0) := "0010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (9 downto 0) := "0100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (9 downto 0) := "1000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (9 downto 0) := "0000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_fu_298_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_503 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_304_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_507 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_54_fu_311_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal tmp_54_reg_512 : STD_LOGIC_VECTOR (18 downto 0);
    signal icmp_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_517 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_34_fu_346_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_34_reg_543 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal outrowidx_fu_352_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal outrowidx_reg_548 : STD_LOGIC_VECTOR (19 downto 0);
    signal exitcond2_fu_341_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal inneridx_fu_357_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal inneridx_reg_553 : STD_LOGIC_VECTOR (19 downto 0);
    signal j_9_fu_371_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_9_reg_561 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_i_fu_366_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_array_addr_1_reg_571 : STD_LOGIC_VECTOR (18 downto 0);
    signal i_35_fu_392_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal outrows1_fu_397_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal outrows1_reg_581 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal outcols_reg_586 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_52_fu_404_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_52_reg_591 : STD_LOGIC_VECTOR (19 downto 0);
    signal innerdim_reg_597 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_53_fu_408_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_53_reg_602 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_56_fu_412_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_56_reg_607 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal j_8_fu_421_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_8_reg_615 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond1_fu_416_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_array_addr_reg_625 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal k_2_fu_446_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal k_2_reg_638 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal exitcond_fu_441_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_fu_283_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal grp_k2c_dot_fu_259_ap_start : STD_LOGIC;
    signal grp_k2c_dot_fu_259_ap_done : STD_LOGIC;
    signal grp_k2c_dot_fu_259_ap_idle : STD_LOGIC;
    signal grp_k2c_dot_fu_259_ap_ready : STD_LOGIC;
    signal grp_k2c_dot_fu_259_C_array_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_k2c_dot_fu_259_C_array_ce0 : STD_LOGIC;
    signal grp_k2c_dot_fu_259_C_array_we0 : STD_LOGIC;
    signal grp_k2c_dot_fu_259_C_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_dot_fu_259_Ar_array_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_k2c_dot_fu_259_Ar_array_ce0 : STD_LOGIC;
    signal grp_k2c_dot_fu_259_Ar_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_dot_fu_259_Ar_shape_ce0 : STD_LOGIC;
    signal grp_k2c_dot_fu_259_B_array_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_k2c_dot_fu_259_B_array_ce0 : STD_LOGIC;
    signal grp_k2c_dot_fu_259_B_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_dot_fu_259_B_shape_ce0 : STD_LOGIC;
    signal grp_k2c_dot_fu_259_fwork_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_k2c_dot_fu_259_fwork_ce0 : STD_LOGIC;
    signal grp_k2c_dot_fu_259_fwork_we0 : STD_LOGIC;
    signal grp_k2c_dot_fu_259_fwork_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_dot_fu_259_fwork_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_k2c_dot_fu_259_fwork_ce1 : STD_LOGIC;
    signal i_i_reg_190 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_reg_202 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_i_reg_213 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_i_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal j_reg_225 : STD_LOGIC_VECTOR (63 downto 0);
    signal storemerge_reg_237 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_248 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_k2c_dot_fu_259_ap_start_reg : STD_LOGIC := '0';
    signal tmp_i_cast_fu_387_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_18_cast_fu_432_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_cast_fu_457_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_22_cast_fu_472_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_283_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_283_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_20_fu_291_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_51_fu_316_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal tmp_55_fu_337_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_58_fu_377_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_57_fu_362_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_i_39_fu_381_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_16_fu_427_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_59_fu_437_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_17_fu_452_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_18_fu_462_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_19_fu_467_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (9 downto 0);

    component k2c_dot IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_array_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        C_array_ce0 : OUT STD_LOGIC;
        C_array_we0 : OUT STD_LOGIC;
        C_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Ar_array_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        Ar_array_ce0 : OUT STD_LOGIC;
        Ar_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Ar_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
        Ar_numel_read : IN STD_LOGIC_VECTOR (18 downto 0);
        Ar_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        Ar_shape_ce0 : OUT STD_LOGIC;
        Ar_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_array_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        B_array_ce0 : OUT STD_LOGIC;
        B_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
        B_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
        B_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_shape_ce0 : OUT STD_LOGIC;
        B_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        axesA_0_read : IN STD_LOGIC_VECTOR (63 downto 0);
        fwork_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        fwork_ce0 : OUT STD_LOGIC;
        fwork_we0 : OUT STD_LOGIC;
        fwork_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fwork_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fwork_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        fwork_ce1 : OUT STD_LOGIC;
        fwork_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_cbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_ccud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;



begin
    grp_k2c_dot_fu_259 : component k2c_dot
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_dot_fu_259_ap_start,
        ap_done => grp_k2c_dot_fu_259_ap_done,
        ap_idle => grp_k2c_dot_fu_259_ap_idle,
        ap_ready => grp_k2c_dot_fu_259_ap_ready,
        C_array_address0 => grp_k2c_dot_fu_259_C_array_address0,
        C_array_ce0 => grp_k2c_dot_fu_259_C_array_ce0,
        C_array_we0 => grp_k2c_dot_fu_259_C_array_we0,
        C_array_d0 => grp_k2c_dot_fu_259_C_array_d0,
        Ar_array_address0 => grp_k2c_dot_fu_259_Ar_array_address0,
        Ar_array_ce0 => grp_k2c_dot_fu_259_Ar_array_ce0,
        Ar_array_q0 => input_array_q0,
        Ar_ndim_read => input_ndim_read,
        Ar_numel_read => tmp_54_reg_512,
        Ar_shape_address0 => grp_k2c_dot_fu_259_Ar_shape_address0,
        Ar_shape_ce0 => grp_k2c_dot_fu_259_Ar_shape_ce0,
        Ar_shape_q0 => input_shape_q0,
        B_array_address0 => grp_k2c_dot_fu_259_B_array_address0,
        B_array_ce0 => grp_k2c_dot_fu_259_B_array_ce0,
        B_array_q0 => kernel_array_q0,
        B_ndim_read => kernel_ndim_read,
        B_numel_read => kernel_numel_read,
        B_shape_address0 => grp_k2c_dot_fu_259_B_shape_address0,
        B_shape_ce0 => grp_k2c_dot_fu_259_B_shape_ce0,
        B_shape_q0 => kernel_shape_q0,
        axesA_0_read => tmp_s_reg_507,
        fwork_address0 => grp_k2c_dot_fu_259_fwork_address0,
        fwork_ce0 => grp_k2c_dot_fu_259_fwork_ce0,
        fwork_we0 => grp_k2c_dot_fu_259_fwork_we0,
        fwork_d0 => grp_k2c_dot_fu_259_fwork_d0,
        fwork_q0 => fwork_q0,
        fwork_address1 => grp_k2c_dot_fu_259_fwork_address1,
        fwork_ce1 => grp_k2c_dot_fu_259_fwork_ce1,
        fwork_q1 => fwork_q1);

    face_classifier_cbkb_U102 : component face_classifier_cbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_283_p0,
        din1 => grp_fu_283_p1,
        dout => grp_fu_283_p2);

    face_classifier_ccud_U103 : component face_classifier_ccud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => input_array_q0,
        din1 => kernel_array_q0,
        dout => tmp_20_fu_291_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    grp_k2c_dot_fu_259_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_dot_fu_259_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_298_p2 = ap_const_lv1_0))) then 
                    grp_k2c_dot_fu_259_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_dot_fu_259_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_dot_fu_259_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_190_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i_fu_366_p2 = ap_const_lv1_1))) then 
                i_i_reg_190 <= i_35_fu_392_p2;
            elsif (((grp_k2c_dot_fu_259_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_i_reg_190 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    i_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_fu_416_p2 = ap_const_lv1_1))) then 
                i_reg_202 <= i_34_reg_543;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_202 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    j_i_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_i_fu_332_p2 = ap_const_lv1_1) and (tmp_reg_503 = ap_const_lv1_0))) then 
                j_i_reg_213 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_i_reg_213 <= j_9_reg_561;
            end if; 
        end if;
    end process;

    j_reg_225_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_441_p2 = ap_const_lv1_1))) then 
                j_reg_225 <= j_8_reg_615;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_341_p2 = ap_const_lv1_0) and (tmp_reg_503 = ap_const_lv1_1))) then 
                j_reg_225 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    k_reg_248_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                k_reg_248 <= k_2_reg_638;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                k_reg_248 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    storemerge_reg_237_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                storemerge_reg_237 <= grp_fu_283_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state8)) then 
                storemerge_reg_237 <= bias_array_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_reg_503 = ap_const_lv1_1))) then
                i_34_reg_543 <= i_34_fu_346_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_298_p2 = ap_const_lv1_1))) then
                icmp_reg_517 <= icmp_fu_326_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                innerdim_reg_597 <= kernel_shape_q1;
                outcols_reg_586 <= kernel_shape_q0;
                outrows1_reg_581 <= outrows1_fu_397_p3;
                tmp_52_reg_591 <= tmp_52_fu_404_p1;
                tmp_53_reg_602 <= tmp_53_fu_408_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_341_p2 = ap_const_lv1_0) and (tmp_reg_503 = ap_const_lv1_1))) then
                inneridx_reg_553 <= inneridx_fu_357_p2;
                outrowidx_reg_548 <= outrowidx_fu_352_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state7)) then
                j_8_reg_615 <= j_8_fu_421_p2;
                tmp_56_reg_607 <= tmp_56_fu_412_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_9_reg_561 <= j_9_fu_371_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                k_2_reg_638 <= k_2_fu_446_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i_fu_366_p2 = ap_const_lv1_0))) then
                output_array_addr_1_reg_571 <= tmp_i_cast_fu_387_p1(19 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_fu_416_p2 = ap_const_lv1_0))) then
                output_array_addr_reg_625 <= tmp_18_cast_fu_432_p1(19 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_298_p2 = ap_const_lv1_0))) then
                tmp_54_reg_512 <= tmp_54_fu_311_p1;
                tmp_s_reg_507 <= tmp_s_fu_304_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_reg_503 <= tmp_fu_298_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_fu_298_p2, tmp_reg_503, ap_CS_fsm_state3, exitcond2_fu_341_p2, ap_CS_fsm_state4, exitcond_i_fu_366_p2, ap_CS_fsm_state7, exitcond1_fu_416_p2, ap_CS_fsm_state9, exitcond_fu_441_p2, grp_k2c_dot_fu_259_ap_done, ap_CS_fsm_state2, tmp_i_fu_332_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_298_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_298_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_k2c_dot_fu_259_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (((tmp_i_fu_332_p2 = ap_const_lv1_0) and (tmp_reg_503 = ap_const_lv1_0)) or ((exitcond2_fu_341_p2 = ap_const_lv1_1) and (tmp_reg_503 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond2_fu_341_p2 = ap_const_lv1_0) and (tmp_reg_503 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i_fu_366_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state7) and (exitcond1_fu_416_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state8;
                end if;
            when ap_ST_fsm_state8 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (exitcond_fu_441_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_reg_503, ap_CS_fsm_state3, exitcond2_fu_341_p2, tmp_i_fu_332_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (((tmp_i_fu_332_p2 = ap_const_lv1_0) and (tmp_reg_503 = ap_const_lv1_0)) or ((exitcond2_fu_341_p2 = ap_const_lv1_1) and (tmp_reg_503 = ap_const_lv1_1)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_reg_503, ap_CS_fsm_state3, exitcond2_fu_341_p2, tmp_i_fu_332_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (((tmp_i_fu_332_p2 = ap_const_lv1_0) and (tmp_reg_503 = ap_const_lv1_0)) or ((exitcond2_fu_341_p2 = ap_const_lv1_1) and (tmp_reg_503 = ap_const_lv1_1))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bias_array_address0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, j_i_reg_213, j_reg_225)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            bias_array_address0 <= j_reg_225(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_array_address0 <= j_i_reg_213(19 - 1 downto 0);
        else 
            bias_array_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    bias_array_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            bias_array_ce0 <= ap_const_logic_1;
        else 
            bias_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    exitcond1_fu_416_p2 <= "1" when (j_reg_225 = outcols_reg_586) else "0";
    exitcond2_fu_341_p2 <= "1" when (i_reg_202 = outrows1_reg_581) else "0";
    exitcond_fu_441_p2 <= "1" when (k_reg_248 = innerdim_reg_597) else "0";
    exitcond_i_fu_366_p2 <= "1" when (j_i_reg_213 = bias_numel_read) else "0";
    fwork_address0 <= grp_k2c_dot_fu_259_fwork_address0;
    fwork_address1 <= grp_k2c_dot_fu_259_fwork_address1;
    fwork_ce0 <= grp_k2c_dot_fu_259_fwork_ce0;
    fwork_ce1 <= grp_k2c_dot_fu_259_fwork_ce1;
    fwork_d0 <= grp_k2c_dot_fu_259_fwork_d0;
    fwork_we0 <= grp_k2c_dot_fu_259_fwork_we0;

    grp_fu_283_p0_assign_proc : process(output_array_q0, ap_CS_fsm_state10, ap_CS_fsm_state5, storemerge_reg_237)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_283_p0 <= storemerge_reg_237;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_283_p0 <= output_array_q0;
        else 
            grp_fu_283_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_283_p1_assign_proc : process(bias_array_q0, ap_CS_fsm_state10, ap_CS_fsm_state5, tmp_20_fu_291_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            grp_fu_283_p1 <= tmp_20_fu_291_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_283_p1 <= bias_array_q0;
        else 
            grp_fu_283_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_k2c_dot_fu_259_ap_start <= grp_k2c_dot_fu_259_ap_start_reg;
    i_34_fu_346_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(i_reg_202));
    i_35_fu_392_p2 <= std_logic_vector(unsigned(i_i_reg_190) + unsigned(bias_numel_read));
    icmp_fu_326_p2 <= "0" when (tmp_51_fu_316_p4 = ap_const_lv63_0) else "1";
    inneridx_fu_357_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_53_reg_602) * signed(tmp_55_fu_337_p1))), 20));

    input_array_address0_assign_proc : process(ap_CS_fsm_state9, grp_k2c_dot_fu_259_Ar_array_address0, ap_CS_fsm_state2, tmp_20_cast_fu_457_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_array_address0 <= tmp_20_cast_fu_457_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_address0 <= grp_k2c_dot_fu_259_Ar_array_address0;
        else 
            input_array_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    input_array_ce0_assign_proc : process(ap_CS_fsm_state9, grp_k2c_dot_fu_259_Ar_array_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            input_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_ce0 <= grp_k2c_dot_fu_259_Ar_array_ce0;
        else 
            input_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_shape_address0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_298_p2, grp_k2c_dot_fu_259_Ar_shape_address0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_298_p2 = ap_const_lv1_1))) then 
            input_shape_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_shape_address0 <= grp_k2c_dot_fu_259_Ar_shape_address0;
        else 
            input_shape_address0 <= "XXX";
        end if; 
    end process;


    input_shape_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_fu_298_p2, grp_k2c_dot_fu_259_Ar_shape_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_298_p2 = ap_const_lv1_1))) then 
            input_shape_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_shape_ce0 <= grp_k2c_dot_fu_259_Ar_shape_ce0;
        else 
            input_shape_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_8_fu_421_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(j_reg_225));
    j_9_fu_371_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(j_i_reg_213));
    k_2_fu_446_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(k_reg_248));

    kernel_array_address0_assign_proc : process(ap_CS_fsm_state9, grp_k2c_dot_fu_259_B_array_address0, ap_CS_fsm_state2, tmp_22_cast_fu_472_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            kernel_array_address0 <= tmp_22_cast_fu_472_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_array_address0 <= grp_k2c_dot_fu_259_B_array_address0;
        else 
            kernel_array_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    kernel_array_ce0_assign_proc : process(ap_CS_fsm_state9, grp_k2c_dot_fu_259_B_array_ce0, ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            kernel_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_array_ce0 <= grp_k2c_dot_fu_259_B_array_ce0;
        else 
            kernel_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_shape_address0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_298_p2, grp_k2c_dot_fu_259_B_shape_address0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_298_p2 = ap_const_lv1_1))) then 
            kernel_shape_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_shape_address0 <= grp_k2c_dot_fu_259_B_shape_address0;
        else 
            kernel_shape_address0 <= "XXX";
        end if; 
    end process;

    kernel_shape_address1 <= ap_const_lv64_0(3 - 1 downto 0);

    kernel_shape_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_fu_298_p2, grp_k2c_dot_fu_259_B_shape_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_298_p2 = ap_const_lv1_1))) then 
            kernel_shape_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_shape_ce0 <= grp_k2c_dot_fu_259_B_shape_ce0;
        else 
            kernel_shape_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_shape_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_fu_298_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_298_p2 = ap_const_lv1_1))) then 
            kernel_shape_ce1 <= ap_const_logic_1;
        else 
            kernel_shape_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_array_address0_assign_proc : process(ap_CS_fsm_state4, output_array_addr_1_reg_571, output_array_addr_reg_625, ap_CS_fsm_state9, grp_k2c_dot_fu_259_C_array_address0, ap_CS_fsm_state2, ap_CS_fsm_state5, tmp_i_cast_fu_387_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_array_address0 <= output_array_addr_reg_625;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_array_address0 <= output_array_addr_1_reg_571;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_array_address0 <= tmp_i_cast_fu_387_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_address0 <= grp_k2c_dot_fu_259_C_array_address0;
        else 
            output_array_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_array_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state9, grp_k2c_dot_fu_259_C_array_ce0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9) or (ap_const_logic_1 = ap_CS_fsm_state4))) then 
            output_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_ce0 <= grp_k2c_dot_fu_259_C_array_ce0;
        else 
            output_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_array_d0_assign_proc : process(ap_CS_fsm_state9, grp_fu_283_p2, grp_k2c_dot_fu_259_C_array_d0, ap_CS_fsm_state2, ap_CS_fsm_state5, storemerge_reg_237)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            output_array_d0 <= storemerge_reg_237;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_array_d0 <= grp_fu_283_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_d0 <= grp_k2c_dot_fu_259_C_array_d0;
        else 
            output_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_array_we0_assign_proc : process(ap_CS_fsm_state9, grp_k2c_dot_fu_259_C_array_we0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            output_array_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_we0 <= grp_k2c_dot_fu_259_C_array_we0;
        else 
            output_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    outrowidx_fu_352_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_52_reg_591) * signed(tmp_55_fu_337_p1))), 20));
    outrows1_fu_397_p3 <= 
        input_shape_q0 when (icmp_reg_517(0) = '1') else 
        ap_const_lv64_1;
    tmp_16_fu_427_p2 <= std_logic_vector(unsigned(tmp_56_fu_412_p1) + unsigned(outrowidx_reg_548));
    tmp_17_fu_452_p2 <= std_logic_vector(signed(tmp_59_fu_437_p1) + signed(inneridx_reg_553));
    tmp_18_cast_fu_432_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_16_fu_427_p2),64));
    tmp_18_fu_462_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_52_reg_591) * signed(tmp_59_fu_437_p1))), 20));
    tmp_19_fu_467_p2 <= std_logic_vector(unsigned(tmp_18_fu_462_p2) + unsigned(tmp_56_reg_607));
    tmp_20_cast_fu_457_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_17_fu_452_p2),64));
    tmp_22_cast_fu_472_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_19_fu_467_p2),64));
    tmp_51_fu_316_p4 <= input_ndim_read(63 downto 1);
    tmp_52_fu_404_p1 <= kernel_shape_q0(20 - 1 downto 0);
    tmp_53_fu_408_p1 <= kernel_shape_q1(20 - 1 downto 0);
    tmp_54_fu_311_p1 <= input_numel_read(19 - 1 downto 0);
    tmp_55_fu_337_p1 <= i_reg_202(20 - 1 downto 0);
    tmp_56_fu_412_p1 <= j_reg_225(20 - 1 downto 0);
    tmp_57_fu_362_p1 <= j_i_reg_213(20 - 1 downto 0);
    tmp_58_fu_377_p1 <= i_i_reg_190(20 - 1 downto 0);
    tmp_59_fu_437_p1 <= k_reg_248(20 - 1 downto 0);
    tmp_fu_298_p2 <= "1" when (unsigned(input_ndim_read) < unsigned(ap_const_lv64_3)) else "0";
    tmp_i_39_fu_381_p2 <= std_logic_vector(unsigned(tmp_58_fu_377_p1) + unsigned(tmp_57_fu_362_p1));
    tmp_i_cast_fu_387_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_39_fu_381_p2),64));
    tmp_i_fu_332_p2 <= "1" when (unsigned(i_i_reg_190) < unsigned(output_numel_read)) else "0";
    tmp_s_fu_304_p2 <= std_logic_vector(signed(ap_const_lv64_FFFFFFFFFFFFFFFF) + signed(input_ndim_read));
end behav;
