// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __face_classifier_cFfa_H__
#define __face_classifier_cFfa_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct face_classifier_cFfa_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 100;
  static const unsigned AddressWidth = 7;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(face_classifier_cFfa_ram) {
        ram[0] = "0b00111111100000000000110111001111";
        ram[1] = "0b00111111011110111011000010000010";
        ram[2] = "0b00111111100000011000110101000100";
        ram[3] = "0b00111111100000001000011110111101";
        ram[4] = "0b00111111011111110011001101110001";
        ram[5] = "0b00111111100000010000110100100110";
        ram[6] = "0b00111111011111101011010111011011";
        ram[7] = "0b00111111100000000011001000010000";
        ram[8] = "0b00111111100001000110110001100001";
        ram[9] = "0b00111111011111101001110000110111";
        ram[10] = "0b00111111100000010111100110111101";
        ram[11] = "0b00111111100000101010100000111011";
        ram[12] = "0b00111111011111100000000110110010";
        ram[13] = "0b00111111011111111000001001110101";
        ram[14] = "0b00111111100000010110101110001010";
        ram[15] = "0b00111111100000010111101101010011";
        ram[16] = "0b00111111100001010011011011001101";
        ram[17] = "0b00111111011111111100000110110111";
        ram[18] = "0b00111111011111011111001011000000";
        ram[19] = "0b00111111100000000100010110101000";
        ram[20] = "0b00111111011111111100111100110001";
        ram[21] = "0b00111111100000000011010000100101";
        ram[22] = "0b00111111100000000100001010110101";
        ram[23] = "0b00111111100000010011100010100110";
        ram[24] = "0b00111111100000010111100110100011";
        ram[25] = "0b00111111100000100111000001110110";
        ram[26] = "0b00111111011110100000011010101111";
        ram[27] = "0b00111111100000000110011110100011";
        ram[28] = "0b00111111100000011100001111100111";
        ram[29] = "0b00111111011111100111110101101011";
        ram[30] = "0b00111111100000110110000110101101";
        ram[31] = "0b00111111100000001101110010111100";
        ram[32] = "0b00111111100000000001100001100010";
        ram[33] = "0b00111111100000000100001111011010";
        ram[34] = "0b00111111100000001001101100001010";
        ram[35] = "0b00111111011110100100101011000100";
        ram[36] = "0b00111111011110010011010011111000";
        ram[37] = "0b00111111011101110101010010001000";
        ram[38] = "0b00111111100000000111111011010101";
        ram[39] = "0b00111111011111100101000111110001";
        ram[40] = "0b00111111100000001100111111001011";
        ram[41] = "0b00111111100000010110010111000110";
        ram[42] = "0b00111111100000010100110111011110";
        ram[43] = "0b00111111011111111110100111110011";
        ram[44] = "0b00111111100000100111101010110111";
        ram[45] = "0b00111111100000111110111110001010";
        ram[46] = "0b00111111100000000100100001111011";
        ram[47] = "0b00111111100000011110001100111100";
        ram[48] = "0b00111111011110110111000101010111";
        ram[49] = "0b00111111100000001010011001011011";
        ram[50] = "0b00111111100000010110111101000010";
        ram[51] = "0b00111111100000000001000011011000";
        ram[52] = "0b00111111011110001100101110000001";
        ram[53] = "0b00111111011111100110011001010001";
        ram[54] = "0b00111111011111111101111111001100";
        ram[55] = "0b00111111100000101101111000001101";
        ram[56] = "0b00111111100000010110011110010010";
        ram[57] = "0b00111111011111110000000000100110";
        ram[58] = "0b00111111100000011101000110010011";
        ram[59] = "0b00111111011111010100000011100010";
        ram[60] = "0b00111111011111011011010001000101";
        ram[61] = "0b00111111100000010100011001010000";
        ram[62] = "0b00111111011111100110111001101101";
        ram[63] = "0b00111111011111110001010110000101";
        ram[64] = "0b00111111100000101101010110101011";
        ram[65] = "0b00111111011111110011000001000100";
        ram[66] = "0b00111111100000000011011101011111";
        ram[67] = "0b00111111100000001000100110111110";
        ram[68] = "0b00111111011111101100110000010011";
        ram[69] = "0b00111111011111101100011101101010";
        ram[70] = "0b00111111100000000110001101111010";
        ram[71] = "0b00111111100000010100110101101010";
        ram[72] = "0b00111111100000001001010100100111";
        ram[73] = "0b00111111100000100010100101010000";
        ram[74] = "0b00111111100000000001001010010101";
        ram[75] = "0b00111111100000010010100100011111";
        ram[76] = "0b00111111011111001011100101000111";
        ram[77] = "0b00111111100000000111011010110011";
        ram[78] = "0b00111111100000010110001100101010";
        ram[79] = "0b00111111100000010000000100100001";
        ram[80] = "0b00111111100000011010100001010101";
        ram[81] = "0b00111111100000000100110110111011";
        ram[82] = "0b00111111100000000011110011100100";
        ram[83] = "0b00111111011111111010110000011111";
        ram[84] = "0b00111111100000111100110010000010";
        ram[85] = "0b00111111100000110100010110111011";
        ram[86] = "0b00111111011110100000010001110011";
        ram[87] = "0b00111111011111111100100110011100";
        ram[88] = "0b00111111011111111001001111100100";
        ram[89] = "0b00111111100000011010111001111101";
        ram[90] = "0b00111111100000000101101101100101";
        ram[91] = "0b00111111011111111110100000100111";
        ram[92] = "0b00111111100001001011000001011110";
        ram[93] = "0b00111111011110100110011110001100";
        ram[94] = "0b00111111011110100101010110101010";
        ram[95] = "0b00111111100000101111010101111100";
        ram[96] = "0b00111111011111001101010001000100";
        ram[97] = "0b00111111100000000000101011001100";
        ram[98] = "0b00111111100000001100100101011011";
        ram[99] = "0b00111111011111100111010000010101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(face_classifier_cFfa) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 100;
static const unsigned AddressWidth = 7;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


face_classifier_cFfa_ram* meminst;


SC_CTOR(face_classifier_cFfa) {
meminst = new face_classifier_cFfa_ram("face_classifier_cFfa_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~face_classifier_cFfa() {
    delete meminst;
}


};//endmodule
#endif
