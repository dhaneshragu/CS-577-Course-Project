// ==============================================================
// File generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ==============================================================

#ifndef __face_classifier_c3i2_H__
#define __face_classifier_c3i2_H__


#include <systemc>
using namespace sc_core;
using namespace sc_dt;




#include <iostream>
#include <fstream>

struct face_classifier_c3i2_ram : public sc_core::sc_module {

  static const unsigned DataWidth = 32;
  static const unsigned AddressRange = 60;
  static const unsigned AddressWidth = 6;

//latency = 1
//input_reg = 1
//output_reg = 0
sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in <sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


sc_lv<DataWidth> ram[AddressRange];


   SC_CTOR(face_classifier_c3i2_ram) {
        ram[0] = "0b10111100111100000100111000101011";
        ram[1] = "0b00111111010110000101111011101101";
        ram[2] = "0b10111111010100011110111010000111";
        ram[3] = "0b10111110000010101000001011000001";
        ram[4] = "0b10111110000110110001100100111101";
        ram[5] = "0b10111111010100101110101001000001";
        ram[6] = "0b10111111001100010001011100010110";
        ram[7] = "0b00111101101110110100010000011111";
        ram[8] = "0b10111111001100100001110110100000";
        ram[9] = "0b10111101100100000001100110001110";
        ram[10] = "0b10111111000110011110011111011111";
        ram[11] = "0b00111110110010110111111110011000";
        ram[12] = "0b00111111001100101100001100111011";
        ram[13] = "0b10111110010010110001100010000100";
        ram[14] = "0b10111111000101100101000011111010";
        ram[15] = "0b10111110001110100100101111100011";
        ram[16] = "0b00111111001111101000110010001110";
        ram[17] = "0b00111111010111100101001101101010";
        ram[18] = "0b10111110001110110101110001010111";
        ram[19] = "0b10111111010011010010110000100111";
        ram[20] = "0b00111110111110111010110001111110";
        ram[21] = "0b00111111001000011110110110000000";
        ram[22] = "0b00111111010110011011001110000011";
        ram[23] = "0b10111110000100011111001100010100";
        ram[24] = "0b10111111011001111100011101010101";
        ram[25] = "0b10111111010000101001000001010000";
        ram[26] = "0b10111111001011100100100110001010";
        ram[27] = "0b00111111010100101000100001110111";
        ram[28] = "0b00111101111110011010010010111101";
        ram[29] = "0b10111110100110010101100100011001";
        ram[30] = "0b10111111010110000011101100001011";
        ram[31] = "0b10111111000110001000101110011110";
        ram[32] = "0b00111110111000010011101011000001";
        ram[33] = "0b10111111011010000010000111101100";
        ram[34] = "0b10111101001001000010011110111101";
        ram[35] = "0b10111111000100001110010110111000";
        ram[36] = "0b00111110111000001000110000010000";
        ram[37] = "0b00111101011110110000000000001100";
        ram[38] = "0b10111110101111000101000111110100";
        ram[39] = "0b00111101000111100011110111010011";
        ram[40] = "0b10111110101000000111100000001111";
        ram[41] = "0b00111110101010000101101010011011";
        ram[42] = "0b00111110001011000001111110100001";
        ram[43] = "0b00111111010111010010000100100110";
        ram[44] = "0b00111110100111001100000000010001";
        ram[45] = "0b10111110110100101001010110100011";
        ram[46] = "0b00111111010101110011010001010010";
        ram[47] = "0b10111111001000010011111001111101";
        ram[48] = "0b10111111001110101110100010010101";
        ram[49] = "0b10111110010011000111100000011111";
        ram[50] = "0b00111111000011110111010000110000";
        ram[51] = "0b00111111010010001000101110000111";
        ram[52] = "0b10111111010000000101001111010011";
        ram[53] = "0b00111110000001000110111100111000";
        ram[54] = "0b10111111000001001010111001100111";
        ram[55] = "0b00111101110011010111001101110100";
        ram[56] = "0b00111110100011001011101011101010";
        ram[57] = "0b10111110111000101010010001001011";
        ram[58] = "0b10111110110101110111010100110001";
        ram[59] = "0b00111111010110100100000101100101";


SC_METHOD(prc_write_0);
  sensitive<<clk.pos();
   }


void prc_write_0()
{
    if (ce0.read() == sc_dt::Log_1) 
    {
            if(address0.read().is_01() && address0.read().to_uint()<AddressRange)
              q0 = ram[address0.read().to_uint()];
            else
              q0 = sc_lv<DataWidth>();
    }
}


}; //endmodule


SC_MODULE(face_classifier_c3i2) {


static const unsigned DataWidth = 32;
static const unsigned AddressRange = 60;
static const unsigned AddressWidth = 6;

sc_core::sc_in <sc_lv<AddressWidth> > address0;
sc_core::sc_in<sc_logic> ce0;
sc_core::sc_out <sc_lv<DataWidth> > q0;
sc_core::sc_in<sc_logic> reset;
sc_core::sc_in<bool> clk;


face_classifier_c3i2_ram* meminst;


SC_CTOR(face_classifier_c3i2) {
meminst = new face_classifier_c3i2_ram("face_classifier_c3i2_ram");
meminst->address0(address0);
meminst->ce0(ce0);
meminst->q0(q0);

meminst->reset(reset);
meminst->clk(clk);
}
~face_classifier_c3i2() {
    delete meminst;
}


};//endmodule
#endif
