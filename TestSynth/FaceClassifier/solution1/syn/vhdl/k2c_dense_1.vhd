-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k2c_dense_1 is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    output_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    output_array_ce0 : OUT STD_LOGIC;
    output_array_we0 : OUT STD_LOGIC;
    output_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    output_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    output_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    input_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    input_array_ce0 : OUT STD_LOGIC;
    input_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    input_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
    input_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    input_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    input_shape_ce0 : OUT STD_LOGIC;
    input_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_array_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
    kernel_array_ce0 : OUT STD_LOGIC;
    kernel_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    kernel_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    kernel_shape_ce0 : OUT STD_LOGIC;
    kernel_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    kernel_shape_address1 : OUT STD_LOGIC_VECTOR (2 downto 0);
    kernel_shape_ce1 : OUT STD_LOGIC;
    kernel_shape_q1 : IN STD_LOGIC_VECTOR (63 downto 0);
    bias_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    bias_array_ce0 : OUT STD_LOGIC;
    bias_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    bias_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
    fwork_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
    fwork_ce0 : OUT STD_LOGIC;
    fwork_we0 : OUT STD_LOGIC;
    fwork_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
    fwork_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
    fwork_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
    fwork_ce1 : OUT STD_LOGIC;
    fwork_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
end;


architecture behav of k2c_dense_1 is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (8 downto 0) := "000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (8 downto 0) := "000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (8 downto 0) := "000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (8 downto 0) := "000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (8 downto 0) := "000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (8 downto 0) := "001000000";
    constant ap_ST_fsm_pp0_stage0 : STD_LOGIC_VECTOR (8 downto 0) := "010000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (8 downto 0) := "100000000";
    constant ap_const_boolean_1 : BOOLEAN := true;
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_boolean_0 : BOOLEAN := false;
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv128_lc_1 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_1 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000001";
    constant ap_const_lv64_3 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000011";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_lv32_3F : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000111111";
    constant ap_const_lv63_0 : STD_LOGIC_VECTOR (62 downto 0) := "000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv128_lc_2 : STD_LOGIC_VECTOR (127 downto 0) := "00000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000001";

    signal ap_CS_fsm : STD_LOGIC_VECTOR (8 downto 0) := "000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_36_reg_268 : STD_LOGIC_VECTOR (31 downto 0);
    signal k_reg_278 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_fu_328_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_reg_578 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_s_fu_334_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_s_reg_582 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_65_fu_341_p1 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_65_reg_587 : STD_LOGIC_VECTOR (11 downto 0);
    signal icmp_fu_356_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal icmp_reg_592 : STD_LOGIC_VECTOR (0 downto 0);
    signal indvar_flatten_next_fu_372_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal indvar_flatten_next_reg_618 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_mid2_fu_383_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_mid2_reg_623 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_flatten_fu_367_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal outrowidx_mid2_v_v_fu_398_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal outrowidx_mid2_v_v_reg_628 : STD_LOGIC_VECTOR (63 downto 0);
    signal inneridx_mid2_fu_547_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal inneridx_mid2_reg_633 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_67_fu_410_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_67_reg_638 : STD_LOGIC_VECTOR (19 downto 0);
    signal output_array_addr_reg_648 : STD_LOGIC_VECTOR (11 downto 0);
    signal j_14_fu_431_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_14_reg_656 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal exitcond_i_fu_426_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal output_array_addr_1_reg_666 : STD_LOGIC_VECTOR (11 downto 0);
    signal i_40_fu_452_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal outcols_reg_676 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_62_fu_464_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_62_reg_681 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_63_fu_468_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_63_reg_686 : STD_LOGIC_VECTOR (12 downto 0);
    signal innerdim_reg_691 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_64_fu_472_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_64_reg_696 : STD_LOGIC_VECTOR (12 downto 0);
    signal bound_fu_484_p2 : STD_LOGIC_VECTOR (127 downto 0);
    signal bound_reg_701 : STD_LOGIC_VECTOR (127 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal exitcond_fu_490_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal exitcond_reg_711 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_pp0_stage0 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_pp0_stage0 : signal is "none";
    signal ap_block_state8_pp0_stage0_iter0 : BOOLEAN;
    signal ap_block_state9_pp0_stage0_iter1 : BOOLEAN;
    signal ap_block_pp0_stage0_11001 : BOOLEAN;
    signal k_4_fu_495_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_enable_reg_pp0_iter0 : STD_LOGIC := '0';
    signal grp_fu_313_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal ap_enable_reg_pp0_iter1 : STD_LOGIC := '0';
    signal j_1_fu_534_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ap_block_pp0_stage0_subdone : BOOLEAN;
    signal ap_condition_pp0_exit_iter0_state8 : STD_LOGIC;
    signal grp_k2c_dot_fu_289_ap_start : STD_LOGIC;
    signal grp_k2c_dot_fu_289_ap_done : STD_LOGIC;
    signal grp_k2c_dot_fu_289_ap_idle : STD_LOGIC;
    signal grp_k2c_dot_fu_289_ap_ready : STD_LOGIC;
    signal grp_k2c_dot_fu_289_C_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_k2c_dot_fu_289_C_array_ce0 : STD_LOGIC;
    signal grp_k2c_dot_fu_289_C_array_we0 : STD_LOGIC;
    signal grp_k2c_dot_fu_289_C_array_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_dot_fu_289_Ar_array_address0 : STD_LOGIC_VECTOR (11 downto 0);
    signal grp_k2c_dot_fu_289_Ar_array_ce0 : STD_LOGIC;
    signal grp_k2c_dot_fu_289_Ar_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_dot_fu_289_Ar_shape_ce0 : STD_LOGIC;
    signal grp_k2c_dot_fu_289_B_array_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal grp_k2c_dot_fu_289_B_array_ce0 : STD_LOGIC;
    signal grp_k2c_dot_fu_289_B_shape_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal grp_k2c_dot_fu_289_B_shape_ce0 : STD_LOGIC;
    signal grp_k2c_dot_fu_289_fwork_address0 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_k2c_dot_fu_289_fwork_ce0 : STD_LOGIC;
    signal grp_k2c_dot_fu_289_fwork_we0 : STD_LOGIC;
    signal grp_k2c_dot_fu_289_fwork_d0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_k2c_dot_fu_289_fwork_address1 : STD_LOGIC_VECTOR (10 downto 0);
    signal grp_k2c_dot_fu_289_fwork_ce1 : STD_LOGIC;
    signal i_i_reg_211 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal indvar_flatten_reg_223 : STD_LOGIC_VECTOR (127 downto 0);
    signal i_reg_234 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_245 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_i_reg_256 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal tmp_i_fu_362_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal grp_k2c_dot_fu_289_ap_start_reg : STD_LOGIC := '0';
    signal tmp_42_cast_fu_418_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_i_cast_fu_447_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_44_cast_fu_514_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_block_pp0_stage0 : BOOLEAN;
    signal tmp_46_cast_fu_529_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_313_p0 : STD_LOGIC_VECTOR (31 downto 0);
    signal grp_fu_313_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_40_fu_321_p2 : STD_LOGIC_VECTOR (31 downto 0);
    signal tmp_61_fu_346_p4 : STD_LOGIC_VECTOR (62 downto 0);
    signal exitcond16_fu_378_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal i_s_fu_392_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal grp_fu_539_p3 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_72_fu_437_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_69_fu_422_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_i_40_fu_441_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal outrows2_fu_457_p3 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_484_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal bound_fu_484_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_71_fu_505_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal tmp_37_fu_509_p2 : STD_LOGIC_VECTOR (12 downto 0);
    attribute use_dsp48 : string;
    attribute use_dsp48 of tmp_37_fu_509_p2 : signal is "no";
    signal tmp_70_fu_501_p1 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_38_fu_519_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_39_fu_524_p2 : STD_LOGIC_VECTOR (19 downto 0);
    signal tmp_66_fu_406_p1 : STD_LOGIC_VECTOR (12 downto 0);
    signal grp_fu_539_p2 : STD_LOGIC_VECTOR (12 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (8 downto 0);
    signal ap_idle_pp0 : STD_LOGIC;
    signal ap_enable_pp0 : STD_LOGIC;
    signal bound_fu_484_p00 : STD_LOGIC_VECTOR (127 downto 0);
    signal bound_fu_484_p10 : STD_LOGIC_VECTOR (127 downto 0);

    component k2c_dot IS
    port (
        ap_clk : IN STD_LOGIC;
        ap_rst : IN STD_LOGIC;
        ap_start : IN STD_LOGIC;
        ap_done : OUT STD_LOGIC;
        ap_idle : OUT STD_LOGIC;
        ap_ready : OUT STD_LOGIC;
        C_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        C_array_ce0 : OUT STD_LOGIC;
        C_array_we0 : OUT STD_LOGIC;
        C_array_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        Ar_array_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
        Ar_array_ce0 : OUT STD_LOGIC;
        Ar_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        Ar_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
        Ar_numel_read : IN STD_LOGIC_VECTOR (11 downto 0);
        Ar_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        Ar_shape_ce0 : OUT STD_LOGIC;
        Ar_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        B_array_address0 : OUT STD_LOGIC_VECTOR (18 downto 0);
        B_array_ce0 : OUT STD_LOGIC;
        B_array_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        B_ndim_read : IN STD_LOGIC_VECTOR (63 downto 0);
        B_numel_read : IN STD_LOGIC_VECTOR (63 downto 0);
        B_shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
        B_shape_ce0 : OUT STD_LOGIC;
        B_shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
        axesA_0_read : IN STD_LOGIC_VECTOR (63 downto 0);
        fwork_address0 : OUT STD_LOGIC_VECTOR (10 downto 0);
        fwork_ce0 : OUT STD_LOGIC;
        fwork_we0 : OUT STD_LOGIC;
        fwork_d0 : OUT STD_LOGIC_VECTOR (31 downto 0);
        fwork_q0 : IN STD_LOGIC_VECTOR (31 downto 0);
        fwork_address1 : OUT STD_LOGIC_VECTOR (10 downto 0);
        fwork_ce1 : OUT STD_LOGIC;
        fwork_q1 : IN STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_cbkb IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_ccud IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (31 downto 0);
        din1 : IN STD_LOGIC_VECTOR (31 downto 0);
        dout : OUT STD_LOGIC_VECTOR (31 downto 0) );
    end component;


    component face_classifier_chbi IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        din2_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        din2 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component face_classifier_cg8j IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (12 downto 0);
        din1 : IN STD_LOGIC_VECTOR (12 downto 0);
        dout : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;



begin
    grp_k2c_dot_fu_289 : component k2c_dot
    port map (
        ap_clk => ap_clk,
        ap_rst => ap_rst,
        ap_start => grp_k2c_dot_fu_289_ap_start,
        ap_done => grp_k2c_dot_fu_289_ap_done,
        ap_idle => grp_k2c_dot_fu_289_ap_idle,
        ap_ready => grp_k2c_dot_fu_289_ap_ready,
        C_array_address0 => grp_k2c_dot_fu_289_C_array_address0,
        C_array_ce0 => grp_k2c_dot_fu_289_C_array_ce0,
        C_array_we0 => grp_k2c_dot_fu_289_C_array_we0,
        C_array_d0 => grp_k2c_dot_fu_289_C_array_d0,
        Ar_array_address0 => grp_k2c_dot_fu_289_Ar_array_address0,
        Ar_array_ce0 => grp_k2c_dot_fu_289_Ar_array_ce0,
        Ar_array_q0 => input_array_q0,
        Ar_ndim_read => input_ndim_read,
        Ar_numel_read => tmp_65_reg_587,
        Ar_shape_address0 => grp_k2c_dot_fu_289_Ar_shape_address0,
        Ar_shape_ce0 => grp_k2c_dot_fu_289_Ar_shape_ce0,
        Ar_shape_q0 => input_shape_q0,
        B_array_address0 => grp_k2c_dot_fu_289_B_array_address0,
        B_array_ce0 => grp_k2c_dot_fu_289_B_array_ce0,
        B_array_q0 => kernel_array_q0,
        B_ndim_read => kernel_ndim_read,
        B_numel_read => kernel_numel_read,
        B_shape_address0 => grp_k2c_dot_fu_289_B_shape_address0,
        B_shape_ce0 => grp_k2c_dot_fu_289_B_shape_ce0,
        B_shape_q0 => kernel_shape_q0,
        axesA_0_read => tmp_s_reg_582,
        fwork_address0 => grp_k2c_dot_fu_289_fwork_address0,
        fwork_ce0 => grp_k2c_dot_fu_289_fwork_ce0,
        fwork_we0 => grp_k2c_dot_fu_289_fwork_we0,
        fwork_d0 => grp_k2c_dot_fu_289_fwork_d0,
        fwork_q0 => fwork_q0,
        fwork_address1 => grp_k2c_dot_fu_289_fwork_address1,
        fwork_ce1 => grp_k2c_dot_fu_289_fwork_ce1,
        fwork_q1 => fwork_q1);

    face_classifier_cbkb_U108 : component face_classifier_cbkb
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => grp_fu_313_p0,
        din1 => grp_fu_313_p1,
        dout => grp_fu_313_p2);

    face_classifier_ccud_U109 : component face_classifier_ccud
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 32,
        din1_WIDTH => 32,
        dout_WIDTH => 32)
    port map (
        din0 => input_array_q0,
        din1 => kernel_array_q0,
        dout => tmp_40_fu_321_p2);

    face_classifier_chbi_U110 : component face_classifier_chbi
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        din2_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        din0 => tmp_63_reg_686,
        din1 => tmp_66_fu_406_p1,
        din2 => grp_fu_539_p2,
        dout => grp_fu_539_p3);

    face_classifier_cg8j_U111 : component face_classifier_cg8j
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 13,
        din1_WIDTH => 13,
        dout_WIDTH => 13)
    port map (
        din0 => tmp_64_reg_696,
        din1 => tmp_66_fu_406_p1,
        dout => inneridx_mid2_fu_547_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter0_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter0 <= ap_const_logic_1;
                end if; 
            end if;
        end if;
    end process;


    ap_enable_reg_pp0_iter1_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
            else
                if (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_const_logic_1 = ap_condition_pp0_exit_iter0_state8))) then 
                    ap_enable_reg_pp0_iter1 <= (ap_const_logic_1 xor ap_condition_pp0_exit_iter0_state8);
                elsif ((ap_const_boolean_0 = ap_block_pp0_stage0_subdone)) then 
                    ap_enable_reg_pp0_iter1 <= ap_enable_reg_pp0_iter0;
                elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                    ap_enable_reg_pp0_iter1 <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    grp_k2c_dot_fu_289_ap_start_reg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                grp_k2c_dot_fu_289_ap_start_reg <= ap_const_logic_0;
            else
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_328_p2 = ap_const_lv1_0))) then 
                    grp_k2c_dot_fu_289_ap_start_reg <= ap_const_logic_1;
                elsif ((grp_k2c_dot_fu_289_ap_ready = ap_const_logic_1)) then 
                    grp_k2c_dot_fu_289_ap_start_reg <= ap_const_logic_0;
                end if; 
            end if;
        end if;
    end process;


    i_i_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i_fu_426_p2 = ap_const_lv1_1))) then 
                i_i_reg_211 <= i_40_fu_452_p2;
            elsif (((grp_k2c_dot_fu_289_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                i_i_reg_211 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    i_reg_234_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                i_reg_234 <= outrowidx_mid2_v_v_reg_628;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                i_reg_234 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    indvar_flatten_reg_223_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                indvar_flatten_reg_223 <= indvar_flatten_next_reg_618;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                indvar_flatten_reg_223 <= ap_const_lv128_lc_1;
            end if; 
        end if;
    end process;

    j_i_reg_256_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_i_fu_362_p2 = ap_const_lv1_1) and (tmp_reg_578 = ap_const_lv1_0))) then 
                j_i_reg_256 <= ap_const_lv64_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_i_reg_256 <= j_14_reg_656;
            end if; 
        end if;
    end process;

    j_reg_245_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                j_reg_245 <= j_1_fu_534_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
                j_reg_245 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    k_reg_278_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_fu_490_p2 = ap_const_lv1_0))) then 
                k_reg_278 <= k_4_fu_495_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                k_reg_278 <= ap_const_lv64_0;
            end if; 
        end if;
    end process;

    tmp_36_reg_268_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_711 = ap_const_lv1_0))) then 
                tmp_36_reg_268 <= grp_fu_313_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                tmp_36_reg_268 <= bias_array_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                bound_reg_701 <= bound_fu_484_p2;
                innerdim_reg_691 <= kernel_shape_q1;
                outcols_reg_676 <= kernel_shape_q0;
                tmp_62_reg_681 <= tmp_62_fu_464_p1;
                tmp_63_reg_686 <= tmp_63_fu_468_p1;
                tmp_64_reg_696 <= tmp_64_fu_472_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then
                exitcond_reg_711 <= exitcond_fu_490_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_328_p2 = ap_const_lv1_1))) then
                icmp_reg_592 <= icmp_fu_356_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (tmp_reg_578 = ap_const_lv1_1))) then
                indvar_flatten_next_reg_618 <= indvar_flatten_next_fu_372_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_flatten_fu_367_p2 = ap_const_lv1_0) and (tmp_reg_578 = ap_const_lv1_1))) then
                inneridx_mid2_reg_633 <= inneridx_mid2_fu_547_p2;
                j_mid2_reg_623 <= j_mid2_fu_383_p3;
                output_array_addr_reg_648 <= tmp_42_cast_fu_418_p1(12 - 1 downto 0);
                outrowidx_mid2_v_v_reg_628 <= outrowidx_mid2_v_v_fu_398_p3;
                tmp_67_reg_638 <= tmp_67_fu_410_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_14_reg_656 <= j_14_fu_431_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i_fu_426_p2 = ap_const_lv1_0))) then
                output_array_addr_1_reg_666 <= tmp_i_cast_fu_447_p1(12 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_328_p2 = ap_const_lv1_0))) then
                tmp_65_reg_587 <= tmp_65_fu_341_p1;
                tmp_s_reg_582 <= tmp_s_fu_334_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_reg_578 <= tmp_fu_328_p2;
            end if;
        end if;
    end process;

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, tmp_fu_328_p2, tmp_reg_578, ap_CS_fsm_state3, exitcond_flatten_fu_367_p2, ap_CS_fsm_state4, exitcond_i_fu_426_p2, exitcond_fu_490_p2, ap_enable_reg_pp0_iter0, ap_block_pp0_stage0_subdone, grp_k2c_dot_fu_289_ap_done, ap_CS_fsm_state2, tmp_i_fu_362_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_328_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_328_p2 = ap_const_lv1_0))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((grp_k2c_dot_fu_289_ap_done = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state2;
                end if;
            when ap_ST_fsm_state3 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state3) and (((tmp_i_fu_362_p2 = ap_const_lv1_0) and (tmp_reg_578 = ap_const_lv1_0)) or ((exitcond_flatten_fu_367_p2 = ap_const_lv1_1) and (tmp_reg_578 = ap_const_lv1_1))))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                elsif (((ap_const_logic_1 = ap_CS_fsm_state3) and (exitcond_flatten_fu_367_p2 = ap_const_lv1_0) and (tmp_reg_578 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state7;
                else
                    ap_NS_fsm <= ap_ST_fsm_state4;
                end if;
            when ap_ST_fsm_state4 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state4) and (exitcond_i_fu_426_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state3;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
            when ap_ST_fsm_pp0_stage0 => 
                if (not(((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_490_p2 = ap_const_lv1_1)))) then
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                elsif (((ap_const_boolean_0 = ap_block_pp0_stage0_subdone) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (exitcond_fu_490_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state10;
                else
                    ap_NS_fsm <= ap_ST_fsm_pp0_stage0;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state3;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXX";
        end case;
    end process;
    ap_CS_fsm_pp0_stage0 <= ap_CS_fsm(7);
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(8);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
        ap_block_pp0_stage0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_11001 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_pp0_stage0_subdone <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state8_pp0_stage0_iter0 <= not((ap_const_boolean_1 = ap_const_boolean_1));
        ap_block_state9_pp0_stage0_iter1 <= not((ap_const_boolean_1 = ap_const_boolean_1));

    ap_condition_pp0_exit_iter0_state8_assign_proc : process(exitcond_fu_490_p2)
    begin
        if ((exitcond_fu_490_p2 = ap_const_lv1_1)) then 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_1;
        else 
            ap_condition_pp0_exit_iter0_state8 <= ap_const_logic_0;
        end if; 
    end process;


    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_reg_578, ap_CS_fsm_state3, exitcond_flatten_fu_367_p2, tmp_i_fu_362_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state3) and (((tmp_i_fu_362_p2 = ap_const_lv1_0) and (tmp_reg_578 = ap_const_lv1_0)) or ((exitcond_flatten_fu_367_p2 = ap_const_lv1_1) and (tmp_reg_578 = ap_const_lv1_1)))))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;

    ap_enable_pp0 <= (ap_idle_pp0 xor ap_const_logic_1);

    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_pp0_assign_proc : process(ap_enable_reg_pp0_iter0, ap_enable_reg_pp0_iter1)
    begin
        if (((ap_enable_reg_pp0_iter1 = ap_const_logic_0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_0))) then 
            ap_idle_pp0 <= ap_const_logic_1;
        else 
            ap_idle_pp0 <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(tmp_reg_578, ap_CS_fsm_state3, exitcond_flatten_fu_367_p2, tmp_i_fu_362_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state3) and (((tmp_i_fu_362_p2 = ap_const_lv1_0) and (tmp_reg_578 = ap_const_lv1_0)) or ((exitcond_flatten_fu_367_p2 = ap_const_lv1_1) and (tmp_reg_578 = ap_const_lv1_1))))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    bias_array_address0_assign_proc : process(ap_CS_fsm_state3, j_mid2_fu_383_p3, ap_CS_fsm_state4, j_i_reg_256)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            bias_array_address0 <= j_i_reg_256(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
            bias_array_address0 <= j_mid2_fu_383_p3(12 - 1 downto 0);
        else 
            bias_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    bias_array_ce0_assign_proc : process(ap_CS_fsm_state3, ap_CS_fsm_state4)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state4) or (ap_const_logic_1 = ap_CS_fsm_state3))) then 
            bias_array_ce0 <= ap_const_logic_1;
        else 
            bias_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    bound_fu_484_p0 <= bound_fu_484_p00(64 - 1 downto 0);
    bound_fu_484_p00 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(kernel_shape_q0),128));
    bound_fu_484_p1 <= bound_fu_484_p10(64 - 1 downto 0);
    bound_fu_484_p10 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(outrows2_fu_457_p3),128));
    bound_fu_484_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(bound_fu_484_p0) * unsigned(bound_fu_484_p1), 128));
    exitcond16_fu_378_p2 <= "1" when (j_reg_245 = outcols_reg_676) else "0";
    exitcond_flatten_fu_367_p2 <= "1" when (indvar_flatten_reg_223 = bound_reg_701) else "0";
    exitcond_fu_490_p2 <= "1" when (k_reg_278 = innerdim_reg_691) else "0";
    exitcond_i_fu_426_p2 <= "1" when (j_i_reg_256 = bias_numel_read) else "0";
    fwork_address0 <= grp_k2c_dot_fu_289_fwork_address0;
    fwork_address1 <= grp_k2c_dot_fu_289_fwork_address1;
    fwork_ce0 <= grp_k2c_dot_fu_289_fwork_ce0;
    fwork_ce1 <= grp_k2c_dot_fu_289_fwork_ce1;
    fwork_d0 <= grp_k2c_dot_fu_289_fwork_d0;
    fwork_we0 <= grp_k2c_dot_fu_289_fwork_we0;

    grp_fu_313_p0_assign_proc : process(output_array_q0, tmp_36_reg_268, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state5, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_313_p0 <= tmp_36_reg_268;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_313_p0 <= output_array_q0;
        else 
            grp_fu_313_p0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    grp_fu_313_p1_assign_proc : process(bias_array_q0, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, ap_CS_fsm_state5, ap_block_pp0_stage0, tmp_40_fu_321_p2)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            grp_fu_313_p1 <= tmp_40_fu_321_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            grp_fu_313_p1 <= bias_array_q0;
        else 
            grp_fu_313_p1 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;

    grp_fu_539_p2 <= j_mid2_fu_383_p3(13 - 1 downto 0);
    grp_k2c_dot_fu_289_ap_start <= grp_k2c_dot_fu_289_ap_start_reg;
    i_40_fu_452_p2 <= std_logic_vector(unsigned(i_i_reg_211) + unsigned(bias_numel_read));
    i_s_fu_392_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(i_reg_234));
    icmp_fu_356_p2 <= "0" when (tmp_61_fu_346_p4 = ap_const_lv63_0) else "1";
    indvar_flatten_next_fu_372_p2 <= std_logic_vector(unsigned(indvar_flatten_reg_223) + unsigned(ap_const_lv128_lc_2));

    input_array_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_k2c_dot_fu_289_Ar_array_address0, ap_CS_fsm_state2, tmp_44_cast_fu_514_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            input_array_address0 <= tmp_44_cast_fu_514_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_address0 <= grp_k2c_dot_fu_289_Ar_array_address0;
        else 
            input_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    input_array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_k2c_dot_fu_289_Ar_array_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            input_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_array_ce0 <= grp_k2c_dot_fu_289_Ar_array_ce0;
        else 
            input_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    input_shape_address0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_328_p2, grp_k2c_dot_fu_289_Ar_shape_address0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_328_p2 = ap_const_lv1_1))) then 
            input_shape_address0 <= ap_const_lv64_0(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_shape_address0 <= grp_k2c_dot_fu_289_Ar_shape_address0;
        else 
            input_shape_address0 <= "XXX";
        end if; 
    end process;


    input_shape_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_fu_328_p2, grp_k2c_dot_fu_289_Ar_shape_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_328_p2 = ap_const_lv1_1))) then 
            input_shape_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            input_shape_ce0 <= grp_k2c_dot_fu_289_Ar_shape_ce0;
        else 
            input_shape_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    j_14_fu_431_p2 <= std_logic_vector(unsigned(ap_const_lv64_1) + unsigned(j_i_reg_256));
    j_1_fu_534_p2 <= std_logic_vector(unsigned(j_mid2_reg_623) + unsigned(ap_const_lv64_1));
    j_mid2_fu_383_p3 <= 
        ap_const_lv64_0 when (exitcond16_fu_378_p2(0) = '1') else 
        j_reg_245;
    k_4_fu_495_p2 <= std_logic_vector(unsigned(k_reg_278) + unsigned(ap_const_lv64_1));

    kernel_array_address0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter0, grp_k2c_dot_fu_289_B_array_address0, ap_CS_fsm_state2, ap_block_pp0_stage0, tmp_46_cast_fu_529_p1)
    begin
        if (((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0))) then 
            kernel_array_address0 <= tmp_46_cast_fu_529_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_array_address0 <= grp_k2c_dot_fu_289_B_array_address0;
        else 
            kernel_array_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    kernel_array_ce0_assign_proc : process(ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter0, grp_k2c_dot_fu_289_B_array_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_enable_reg_pp0_iter0 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001))) then 
            kernel_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_array_ce0 <= grp_k2c_dot_fu_289_B_array_ce0;
        else 
            kernel_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_shape_address0_assign_proc : process(ap_CS_fsm_state1, tmp_fu_328_p2, grp_k2c_dot_fu_289_B_shape_address0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (tmp_fu_328_p2 = ap_const_lv1_1))) then 
            kernel_shape_address0 <= ap_const_lv64_1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_shape_address0 <= grp_k2c_dot_fu_289_B_shape_address0;
        else 
            kernel_shape_address0 <= "XXX";
        end if; 
    end process;

    kernel_shape_address1 <= ap_const_lv64_0(3 - 1 downto 0);

    kernel_shape_ce0_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_fu_328_p2, grp_k2c_dot_fu_289_B_shape_ce0, ap_CS_fsm_state2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_328_p2 = ap_const_lv1_1))) then 
            kernel_shape_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            kernel_shape_ce0 <= grp_k2c_dot_fu_289_B_shape_ce0;
        else 
            kernel_shape_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    kernel_shape_ce1_assign_proc : process(ap_start, ap_CS_fsm_state1, tmp_fu_328_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1) and (tmp_fu_328_p2 = ap_const_lv1_1))) then 
            kernel_shape_ce1 <= ap_const_logic_1;
        else 
            kernel_shape_ce1 <= ap_const_logic_0;
        end if; 
    end process;


    output_array_address0_assign_proc : process(output_array_addr_reg_648, ap_CS_fsm_state4, output_array_addr_1_reg_666, ap_CS_fsm_state7, ap_CS_fsm_pp0_stage0, ap_enable_reg_pp0_iter1, grp_k2c_dot_fu_289_C_array_address0, ap_CS_fsm_state2, ap_CS_fsm_state5, tmp_i_cast_fu_447_p1, ap_block_pp0_stage0)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            output_array_address0 <= output_array_addr_reg_648;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            output_array_address0 <= output_array_addr_1_reg_666;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            output_array_address0 <= tmp_i_cast_fu_447_p1(12 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_address0 <= grp_k2c_dot_fu_289_C_array_address0;
        else 
            output_array_address0 <= "XXXXXXXXXXXX";
        end if; 
    end process;


    output_array_ce0_assign_proc : process(ap_CS_fsm_state4, ap_CS_fsm_state7, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, grp_k2c_dot_fu_289_C_array_ce0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state4) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001)))) then 
            output_array_ce0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_ce0 <= grp_k2c_dot_fu_289_C_array_ce0;
        else 
            output_array_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    output_array_d0_assign_proc : process(bias_array_q0, ap_CS_fsm_state7, ap_CS_fsm_pp0_stage0, grp_fu_313_p2, ap_enable_reg_pp0_iter1, grp_k2c_dot_fu_289_C_array_d0, ap_CS_fsm_state2, ap_CS_fsm_state5, ap_block_pp0_stage0)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            output_array_d0 <= bias_array_q0;
        elsif (((ap_const_logic_1 = ap_CS_fsm_state5) or ((ap_const_boolean_0 = ap_block_pp0_stage0) and (ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0)))) then 
            output_array_d0 <= grp_fu_313_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_d0 <= grp_k2c_dot_fu_289_C_array_d0;
        else 
            output_array_d0 <= "XXXXXXXXXXXXXXXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    output_array_we0_assign_proc : process(ap_CS_fsm_state7, exitcond_reg_711, ap_CS_fsm_pp0_stage0, ap_block_pp0_stage0_11001, ap_enable_reg_pp0_iter1, grp_k2c_dot_fu_289_C_array_we0, ap_CS_fsm_state2, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state7) or ((ap_enable_reg_pp0_iter1 = ap_const_logic_1) and (ap_const_logic_1 = ap_CS_fsm_pp0_stage0) and (ap_const_boolean_0 = ap_block_pp0_stage0_11001) and (exitcond_reg_711 = ap_const_lv1_0)))) then 
            output_array_we0 <= ap_const_logic_1;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            output_array_we0 <= grp_k2c_dot_fu_289_C_array_we0;
        else 
            output_array_we0 <= ap_const_logic_0;
        end if; 
    end process;

    outrowidx_mid2_v_v_fu_398_p3 <= 
        i_s_fu_392_p2 when (exitcond16_fu_378_p2(0) = '1') else 
        i_reg_234;
    outrows2_fu_457_p3 <= 
        input_shape_q0 when (icmp_reg_592(0) = '1') else 
        ap_const_lv64_1;
    tmp_37_fu_509_p2 <= std_logic_vector(unsigned(tmp_71_fu_505_p1) + unsigned(inneridx_mid2_reg_633));
    tmp_38_fu_519_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(tmp_62_reg_681) * signed(tmp_70_fu_501_p1))), 20));
    tmp_39_fu_524_p2 <= std_logic_vector(unsigned(tmp_38_fu_519_p2) + unsigned(tmp_67_reg_638));
    tmp_42_cast_fu_418_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(grp_fu_539_p3),64));
    tmp_44_cast_fu_514_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_37_fu_509_p2),64));
    tmp_46_cast_fu_529_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_39_fu_524_p2),64));
    tmp_61_fu_346_p4 <= input_ndim_read(63 downto 1);
    tmp_62_fu_464_p1 <= kernel_shape_q0(20 - 1 downto 0);
    tmp_63_fu_468_p1 <= kernel_shape_q0(13 - 1 downto 0);
    tmp_64_fu_472_p1 <= kernel_shape_q1(13 - 1 downto 0);
    tmp_65_fu_341_p1 <= input_numel_read(12 - 1 downto 0);
    tmp_66_fu_406_p1 <= outrowidx_mid2_v_v_fu_398_p3(13 - 1 downto 0);
    tmp_67_fu_410_p1 <= j_mid2_fu_383_p3(20 - 1 downto 0);
    tmp_69_fu_422_p1 <= j_i_reg_256(13 - 1 downto 0);
    tmp_70_fu_501_p1 <= k_reg_278(20 - 1 downto 0);
    tmp_71_fu_505_p1 <= k_reg_278(13 - 1 downto 0);
    tmp_72_fu_437_p1 <= i_i_reg_211(13 - 1 downto 0);
    tmp_fu_328_p2 <= "1" when (unsigned(input_ndim_read) < unsigned(ap_const_lv64_3)) else "0";
    tmp_i_40_fu_441_p2 <= std_logic_vector(unsigned(tmp_72_fu_437_p1) + unsigned(tmp_69_fu_422_p1));
    tmp_i_cast_fu_447_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp_i_40_fu_441_p2),64));
    tmp_i_fu_362_p2 <= "1" when (unsigned(i_i_reg_211) < unsigned(output_numel_read)) else "0";
    tmp_s_fu_334_p2 <= std_logic_vector(signed(ap_const_lv64_FFFFFFFFFFFFFFFF) + signed(input_ndim_read));
end behav;
