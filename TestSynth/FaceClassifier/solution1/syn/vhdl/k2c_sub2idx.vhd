-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity k2c_sub2idx is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    sub_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    sub_ce0 : OUT STD_LOGIC;
    sub_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    shape_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    shape_ce0 : OUT STD_LOGIC;
    shape_q0 : IN STD_LOGIC_VECTOR (63 downto 0);
    ndim : IN STD_LOGIC_VECTOR (63 downto 0);
    ap_return : OUT STD_LOGIC_VECTOR (63 downto 0) );
end;


architecture behav of k2c_sub2idx is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (4 downto 0) := "00010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (4 downto 0) := "00100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (4 downto 0) := "01000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (4 downto 0) := "10000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv64_0 : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv64_FFFFFFFFFFFFFFFF : STD_LOGIC_VECTOR (63 downto 0) := "1111111111111111111111111111111111111111111111111111111111111111";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (4 downto 0) := "00001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal tmp_2_fu_106_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_2_reg_159 : STD_LOGIC_VECTOR (3 downto 0);
    signal i_1_fu_119_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal i_1_reg_167 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal i_cast1_fu_125_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast1_reg_172 : STD_LOGIC_VECTOR (63 downto 0);
    signal exitcond_fu_114_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal j_fu_130_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_reg_187 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_fu_137_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal idx_1_fu_142_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal temp_1_fu_148_p2 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal idx_reg_64 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_reg_76 : STD_LOGIC_VECTOR (2 downto 0);
    signal temp1_reg_87 : STD_LOGIC_VECTOR (63 downto 0);
    signal j_0_in_reg_97 : STD_LOGIC_VECTOR (63 downto 0);
    signal i_cast_fu_110_p1 : STD_LOGIC_VECTOR (3 downto 0);
    signal temp_1_fu_148_p0 : STD_LOGIC_VECTOR (63 downto 0);
    signal ap_return_preg : STD_LOGIC_VECTOR (63 downto 0) := "0000000000000000000000000000000000000000000000000000000000000000";
    signal ap_NS_fsm : STD_LOGIC_VECTOR (4 downto 0);


begin




    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    ap_return_preg_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_return_preg <= ap_const_lv64_0;
            else
                if (((exitcond_fu_114_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                    ap_return_preg <= idx_reg_64;
                end if; 
            end if;
        end if;
    end process;


    i_reg_76_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                i_reg_76 <= ap_const_lv3_0;
            elsif (((tmp_fu_137_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                i_reg_76 <= i_1_reg_167;
            end if; 
        end if;
    end process;

    idx_reg_64_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                idx_reg_64 <= ap_const_lv64_0;
            elsif (((tmp_fu_137_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                idx_reg_64 <= idx_1_fu_142_p2;
            end if; 
        end if;
    end process;

    j_0_in_reg_97_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                j_0_in_reg_97 <= j_reg_187;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                j_0_in_reg_97 <= ndim;
            end if; 
        end if;
    end process;

    temp1_reg_87_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                temp1_reg_87 <= temp_1_fu_148_p2;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                temp1_reg_87 <= sub_q0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                i_1_reg_167 <= i_1_fu_119_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((exitcond_fu_114_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    i_cast1_reg_172(2 downto 0) <= i_cast1_fu_125_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                j_reg_187 <= j_fu_130_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                tmp_2_reg_159 <= tmp_2_fu_106_p1;
            end if;
        end if;
    end process;
    i_cast1_reg_172(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_114_p2, ap_CS_fsm_state4, tmp_fu_137_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((exitcond_fu_114_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((tmp_fu_137_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when others =>  
                ap_NS_fsm <= "XXXXX";
        end case;
    end process;
    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state2, exitcond_fu_114_p2)
    begin
        if ((((exitcond_fu_114_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2)) or ((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_114_p2)
    begin
        if (((exitcond_fu_114_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;


    ap_return_assign_proc : process(ap_CS_fsm_state2, exitcond_fu_114_p2, idx_reg_64, ap_return_preg)
    begin
        if (((exitcond_fu_114_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
            ap_return <= idx_reg_64;
        else 
            ap_return <= ap_return_preg;
        end if; 
    end process;

    exitcond_fu_114_p2 <= "1" when (i_cast_fu_110_p1 = tmp_2_reg_159) else "0";
    i_1_fu_119_p2 <= std_logic_vector(unsigned(i_reg_76) + unsigned(ap_const_lv3_1));
    i_cast1_fu_125_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_76),64));
    i_cast_fu_110_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(i_reg_76),4));
    idx_1_fu_142_p2 <= std_logic_vector(signed(temp1_reg_87) + signed(idx_reg_64));
    j_fu_130_p2 <= std_logic_vector(unsigned(j_0_in_reg_97) + unsigned(ap_const_lv64_FFFFFFFFFFFFFFFF));
    shape_address0 <= j_fu_130_p2(3 - 1 downto 0);

    shape_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            shape_ce0 <= ap_const_logic_1;
        else 
            shape_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    sub_address0 <= i_cast1_fu_125_p1(3 - 1 downto 0);

    sub_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            sub_ce0 <= ap_const_logic_1;
        else 
            sub_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    temp_1_fu_148_p0 <= shape_q0;
    temp_1_fu_148_p2 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(std_logic_vector(signed(temp_1_fu_148_p0) * signed(temp1_reg_87))), 64));
    tmp_2_fu_106_p1 <= ndim(4 - 1 downto 0);
    tmp_fu_137_p2 <= "1" when (unsigned(j_fu_130_p2) > unsigned(i_cast1_reg_172)) else "0";
end behav;
