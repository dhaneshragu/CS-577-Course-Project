// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_address0,
        data_V_ce0,
        data_V_q0,
        res_V_address0,
        res_V_ce0,
        res_V_we0,
        res_V_d0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [11:0] data_V_address0;
output   data_V_ce0;
input  [15:0] data_V_q0;
output  [6:0] res_V_address0;
output   res_V_ce0;
output   res_V_we0;
output  [15:0] res_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_ce0;
reg res_V_ce0;
reg res_V_we0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [18:0] w2_V_address0;
reg    w2_V_ce0;
wire  signed [5:0] w2_V_q0;
wire   [6:0] b2_V_address0;
reg    b2_V_ce0;
wire   [11:0] b2_V_q0;
wire   [18:0] next_mul_fu_254_p2;
reg   [18:0] next_mul_reg_432;
wire    ap_CS_fsm_state2;
wire   [11:0] ii_3_fu_266_p2;
reg   [11:0] ii_3_reg_440;
wire   [0:0] tmp_fu_260_p2;
wire  signed [21:0] OP1_V_cast_cast_fu_277_p1;
reg  signed [21:0] OP1_V_cast_cast_reg_450;
wire    ap_CS_fsm_state3;
wire   [6:0] jj_3_fu_291_p2;
reg   [6:0] jj_3_reg_458;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_23_fu_303_p1;
reg   [63:0] tmp_23_reg_463;
wire   [0:0] tmp_20_fu_285_p2;
wire   [6:0] iacc_2_fu_332_p2;
reg   [6:0] iacc_2_reg_476;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_19_fu_338_p1;
reg   [63:0] tmp_19_reg_481;
wire   [0:0] tmp_16_fu_326_p2;
wire   [18:0] next_mul2_fu_348_p2;
reg   [18:0] next_mul2_reg_491;
wire    ap_CS_fsm_state8;
wire   [11:0] ii_4_fu_360_p2;
reg   [11:0] ii_4_reg_499;
wire   [6:0] jj_4_fu_376_p2;
reg   [6:0] jj_4_reg_507;
wire    ap_CS_fsm_state9;
reg   [6:0] acc_V_addr_4_reg_512;
wire   [0:0] tmp_27_fu_370_p2;
wire   [6:0] ires_2_fu_415_p2;
reg   [6:0] ires_2_reg_525;
wire    ap_CS_fsm_state11;
wire   [63:0] tmp_26_fu_421_p1;
reg   [63:0] tmp_26_reg_530;
wire   [0:0] tmp_21_fu_409_p2;
reg   [18:0] mult_V_address0;
reg    mult_V_ce0;
reg    mult_V_we0;
wire   [12:0] mult_V_d0;
wire   [12:0] mult_V_q0;
reg   [6:0] acc_V_address0;
reg    acc_V_ce0;
reg    acc_V_we0;
reg   [15:0] acc_V_d0;
wire   [15:0] acc_V_q0;
reg   [11:0] ii_reg_164;
reg   [18:0] phi_mul_reg_175;
reg   [6:0] jj_reg_187;
wire    ap_CS_fsm_state5;
reg   [6:0] iacc_reg_198;
wire    ap_CS_fsm_state7;
reg   [11:0] ii2_reg_209;
reg   [18:0] phi_mul1_reg_220;
reg   [6:0] jj3_reg_232;
wire   [0:0] tmp_18_fu_354_p2;
wire    ap_CS_fsm_state10;
reg   [6:0] ires_reg_243;
wire    ap_CS_fsm_state12;
wire   [63:0] tmp_s_fu_272_p1;
wire   [63:0] tmp_28_fu_388_p1;
wire   [63:0] tmp_29_fu_393_p1;
wire  signed [15:0] b2_V_load_cast_fu_343_p1;
wire   [15:0] p_Val2_s_43_fu_402_p2;
wire   [18:0] jj_cast6_fu_281_p1;
wire   [18:0] index_fu_297_p2;
wire  signed [21:0] p_Val2_s_fu_426_p2;
wire   [11:0] tmp_767_fu_312_p4;
wire   [18:0] jj3_cast3_fu_366_p1;
wire   [18:0] index_2_fu_382_p2;
wire  signed [15:0] p_Val2_37_fu_398_p1;
wire  signed [15:0] p_Val2_s_fu_426_p1;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_w2_V #(
    .DataWidth( 6 ),
    .AddressRange( 262200 ),
    .AddressWidth( 19 ))
w2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w2_V_address0),
    .ce0(w2_V_ce0),
    .q0(w2_V_q0)
);

dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_b2_V #(
    .DataWidth( 12 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
b2_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b2_V_address0),
    .ce0(b2_V_ce0),
    .q0(b2_V_q0)
);

dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_mult_V #(
    .DataWidth( 13 ),
    .AddressRange( 262200 ),
    .AddressWidth( 19 ))
mult_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mult_V_address0),
    .ce0(mult_V_ce0),
    .we0(mult_V_we0),
    .d0(mult_V_d0),
    .q0(mult_V_q0)
);

dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_acc_V #(
    .DataWidth( 16 ),
    .AddressRange( 100 ),
    .AddressWidth( 7 ))
acc_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(acc_V_address0),
    .ce0(acc_V_ce0),
    .we0(acc_V_we0),
    .d0(acc_V_d0),
    .q0(acc_V_q0)
);

myproject_mul_mul_6s_16s_22_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 6 ),
    .din1_WIDTH( 16 ),
    .dout_WIDTH( 22 ))
myproject_mul_mul_6s_16s_22_1_1_U1(
    .din0(w2_V_q0),
    .din1(p_Val2_s_fu_426_p1),
    .dout(p_Val2_s_fu_426_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_260_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        iacc_reg_198 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        iacc_reg_198 <= iacc_2_reg_476;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_16_fu_326_p2 == 1'd1))) begin
        ii2_reg_209 <= 12'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_370_p2 == 1'd1))) begin
        ii2_reg_209 <= ii_4_reg_499;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ii_reg_164 <= 12'd0;
    end else if (((tmp_20_fu_285_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ii_reg_164 <= ii_3_reg_440;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_18_fu_354_p2 == 1'd1))) begin
        ires_reg_243 <= 7'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ires_reg_243 <= ires_2_reg_525;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        jj3_reg_232 <= jj_4_reg_507;
    end else if (((tmp_18_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        jj3_reg_232 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        jj_reg_187 <= jj_3_reg_458;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        jj_reg_187 <= 7'd0;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_16_fu_326_p2 == 1'd1))) begin
        phi_mul1_reg_220 <= 19'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_370_p2 == 1'd1))) begin
        phi_mul1_reg_220 <= next_mul2_reg_491;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        phi_mul_reg_175 <= 19'd0;
    end else if (((tmp_20_fu_285_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        phi_mul_reg_175 <= next_mul_reg_432;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OP1_V_cast_cast_reg_450 <= OP1_V_cast_cast_fu_277_p1;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_27_fu_370_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        acc_V_addr_4_reg_512 <= tmp_28_fu_388_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        iacc_2_reg_476 <= iacc_2_fu_332_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ii_3_reg_440 <= ii_3_fu_266_p2;
        next_mul_reg_432 <= next_mul_fu_254_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ii_4_reg_499 <= ii_4_fu_360_p2;
        next_mul2_reg_491 <= next_mul2_fu_348_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ires_2_reg_525 <= ires_2_fu_415_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        jj_3_reg_458 <= jj_3_fu_291_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        jj_4_reg_507 <= jj_4_fu_376_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_16_fu_326_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_19_reg_481[6 : 0] <= tmp_19_fu_338_p1[6 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_20_fu_285_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_23_reg_463[18 : 0] <= tmp_23_fu_303_p1[18 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_21_fu_409_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        tmp_26_reg_530[6 : 0] <= tmp_26_fu_421_p1[6 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        acc_V_address0 = tmp_26_fu_421_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        acc_V_address0 = acc_V_addr_4_reg_512;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        acc_V_address0 = tmp_28_fu_388_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        acc_V_address0 = tmp_19_reg_481;
    end else begin
        acc_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        acc_V_ce0 = 1'b1;
    end else begin
        acc_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        acc_V_d0 = p_Val2_s_43_fu_402_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        acc_V_d0 = b2_V_load_cast_fu_343_p1;
    end else begin
        acc_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        acc_V_we0 = 1'b1;
    end else begin
        acc_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state11) & (tmp_21_fu_409_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (tmp_21_fu_409_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        b2_V_ce0 = 1'b1;
    end else begin
        b2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mult_V_address0 = tmp_29_fu_393_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        mult_V_address0 = tmp_23_reg_463;
    end else begin
        mult_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9))) begin
        mult_V_ce0 = 1'b1;
    end else begin
        mult_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mult_V_we0 = 1'b1;
    end else begin
        mult_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        res_V_ce0 = 1'b1;
    end else begin
        res_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        res_V_we0 = 1'b1;
    end else begin
        res_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w2_V_ce0 = 1'b1;
    end else begin
        w2_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_260_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_20_fu_285_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (tmp_16_fu_326_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (tmp_18_fu_354_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (tmp_27_fu_370_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (tmp_21_fu_409_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_cast_cast_fu_277_p1 = $signed(data_V_q0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b2_V_address0 = tmp_19_fu_338_p1;

assign b2_V_load_cast_fu_343_p1 = $signed(b2_V_q0);

assign data_V_address0 = tmp_s_fu_272_p1;

assign iacc_2_fu_332_p2 = (iacc_reg_198 + 7'd1);

assign ii_3_fu_266_p2 = (ii_reg_164 + 12'd1);

assign ii_4_fu_360_p2 = (ii2_reg_209 + 12'd1);

assign index_2_fu_382_p2 = (phi_mul1_reg_220 + jj3_cast3_fu_366_p1);

assign index_fu_297_p2 = (jj_cast6_fu_281_p1 + phi_mul_reg_175);

assign ires_2_fu_415_p2 = (ires_reg_243 + 7'd1);

assign jj3_cast3_fu_366_p1 = jj3_reg_232;

assign jj_3_fu_291_p2 = (jj_reg_187 + 7'd1);

assign jj_4_fu_376_p2 = (jj3_reg_232 + 7'd1);

assign jj_cast6_fu_281_p1 = jj_reg_187;

assign mult_V_d0 = $signed(tmp_767_fu_312_p4);

assign next_mul2_fu_348_p2 = (phi_mul1_reg_220 + 19'd100);

assign next_mul_fu_254_p2 = (phi_mul_reg_175 + 19'd100);

assign p_Val2_37_fu_398_p1 = $signed(mult_V_q0);

assign p_Val2_s_43_fu_402_p2 = ($signed(acc_V_q0) + $signed(p_Val2_37_fu_398_p1));

assign p_Val2_s_fu_426_p1 = OP1_V_cast_cast_reg_450;

assign res_V_address0 = tmp_26_reg_530;

assign res_V_d0 = acc_V_q0;

assign tmp_16_fu_326_p2 = ((iacc_reg_198 == 7'd100) ? 1'b1 : 1'b0);

assign tmp_18_fu_354_p2 = ((ii2_reg_209 == 12'd2622) ? 1'b1 : 1'b0);

assign tmp_19_fu_338_p1 = iacc_reg_198;

assign tmp_20_fu_285_p2 = ((jj_reg_187 == 7'd100) ? 1'b1 : 1'b0);

assign tmp_21_fu_409_p2 = ((ires_reg_243 == 7'd100) ? 1'b1 : 1'b0);

assign tmp_23_fu_303_p1 = index_fu_297_p2;

assign tmp_26_fu_421_p1 = ires_reg_243;

assign tmp_27_fu_370_p2 = ((jj3_reg_232 == 7'd100) ? 1'b1 : 1'b0);

assign tmp_28_fu_388_p1 = jj3_reg_232;

assign tmp_29_fu_393_p1 = index_2_fu_382_p2;

assign tmp_767_fu_312_p4 = {{p_Val2_s_fu_426_p2[21:10]}};

assign tmp_fu_260_p2 = ((ii_reg_164 == 12'd2622) ? 1'b1 : 1'b0);

assign tmp_s_fu_272_p1 = ii_reg_164;

assign w2_V_address0 = tmp_23_fu_303_p1;

always @ (posedge ap_clk) begin
    tmp_23_reg_463[63:19] <= 45'b000000000000000000000000000000000000000000000;
    tmp_19_reg_481[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
    tmp_26_reg_530[63:7] <= 57'b000000000000000000000000000000000000000000000000000000000;
end

endmodule //dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s
