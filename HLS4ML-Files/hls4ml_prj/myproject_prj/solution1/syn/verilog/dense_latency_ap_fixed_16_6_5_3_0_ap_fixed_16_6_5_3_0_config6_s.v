// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_address0,
        data_V_ce0,
        data_V_q0,
        res_V_address0,
        res_V_ce0,
        res_V_we0,
        res_V_d0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [6:0] data_V_address0;
output   data_V_ce0;
input  [10:0] data_V_q0;
output  [3:0] res_V_address0;
output   res_V_ce0;
output   res_V_we0;
output  [15:0] res_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_ce0;
reg res_V_ce0;
reg res_V_we0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [9:0] w6_V_address0;
reg    w6_V_ce0;
wire  signed [8:0] w6_V_q0;
wire   [3:0] b6_V_address0;
reg    b6_V_ce0;
wire   [7:0] b6_V_q0;
wire   [6:0] ii_1_fu_241_p2;
reg   [6:0] ii_1_reg_448;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_235_p2;
wire   [9:0] p_shl_fu_252_p3;
reg   [9:0] p_shl_reg_458;
wire    ap_CS_fsm_state3;
wire   [7:0] p_shl7_fu_260_p3;
reg   [7:0] p_shl7_reg_463;
wire  signed [24:0] OP1_V_cast_cast_fu_268_p1;
reg  signed [24:0] OP1_V_cast_cast_reg_468;
wire   [3:0] jj_1_fu_282_p2;
reg   [3:0] jj_1_reg_476;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_9_fu_302_p1;
reg   [63:0] tmp_9_reg_481;
wire   [0:0] tmp_6_fu_276_p2;
wire   [3:0] iacc_1_fu_331_p2;
reg   [3:0] iacc_1_reg_494;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_5_fu_337_p1;
reg   [63:0] tmp_5_reg_499;
wire   [0:0] tmp_2_fu_325_p2;
wire   [6:0] ii_2_fu_353_p2;
reg   [6:0] ii_2_reg_512;
wire    ap_CS_fsm_state8;
wire   [9:0] p_shl8_fu_359_p3;
reg   [9:0] p_shl8_reg_517;
wire   [0:0] tmp_4_fu_347_p2;
wire   [7:0] p_shl9_fu_367_p3;
reg   [7:0] p_shl9_reg_522;
wire   [3:0] jj_2_fu_385_p2;
reg   [3:0] jj_2_reg_530;
wire    ap_CS_fsm_state9;
reg   [3:0] acc_V_addr_2_reg_535;
wire   [0:0] tmp_13_fu_379_p2;
wire   [3:0] ires_1_fu_428_p2;
reg   [3:0] ires_1_reg_548;
wire    ap_CS_fsm_state11;
wire   [63:0] tmp_12_fu_434_p1;
reg   [63:0] tmp_12_reg_553;
wire   [0:0] tmp_7_fu_422_p2;
reg   [9:0] mult_V_address0;
reg    mult_V_ce0;
reg    mult_V_we0;
wire   [15:0] mult_V_d0;
wire   [15:0] mult_V_q0;
reg   [3:0] acc_V_address0;
reg    acc_V_ce0;
reg    acc_V_we0;
reg   [15:0] acc_V_d0;
wire   [15:0] acc_V_q0;
reg   [6:0] ii_reg_168;
reg   [3:0] jj_reg_180;
wire    ap_CS_fsm_state5;
reg   [3:0] iacc_reg_191;
wire    ap_CS_fsm_state7;
reg   [6:0] ii2_reg_202;
reg   [3:0] jj3_reg_213;
wire    ap_CS_fsm_state10;
reg   [3:0] ires_reg_224;
wire    ap_CS_fsm_state12;
wire   [63:0] tmp_s_fu_247_p1;
wire   [63:0] tmp_14_fu_405_p1;
wire   [63:0] tmp_15_fu_410_p1;
wire  signed [15:0] b6_V_load_cast_fu_342_p1;
wire   [15:0] p_Val2_s_35_fu_415_p2;
wire   [7:0] jj_cast8_fu_272_p1;
wire   [7:0] tmp1_fu_288_p2;
wire   [9:0] tmp1_cast_fu_293_p1;
wire   [9:0] index_fu_297_p2;
wire  signed [24:0] p_Val2_s_fu_439_p2;
wire   [14:0] tmp_766_fu_311_p4;
wire   [7:0] jj3_cast5_fu_375_p1;
wire   [7:0] tmp2_fu_391_p2;
wire   [9:0] tmp2_cast_fu_396_p1;
wire   [9:0] index_1_fu_400_p2;
wire  signed [10:0] p_Val2_s_fu_439_p1;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_w6_V #(
    .DataWidth( 9 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
w6_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w6_V_address0),
    .ce0(w6_V_ce0),
    .q0(w6_V_q0)
);

dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_b6_V #(
    .DataWidth( 8 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
b6_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b6_V_address0),
    .ce0(b6_V_ce0),
    .q0(b6_V_q0)
);

dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_mult_V #(
    .DataWidth( 16 ),
    .AddressRange( 1000 ),
    .AddressWidth( 10 ))
mult_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mult_V_address0),
    .ce0(mult_V_ce0),
    .we0(mult_V_we0),
    .d0(mult_V_d0),
    .q0(mult_V_q0)
);

dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_acc_V #(
    .DataWidth( 16 ),
    .AddressRange( 10 ),
    .AddressWidth( 4 ))
acc_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(acc_V_address0),
    .ce0(acc_V_ce0),
    .we0(acc_V_we0),
    .d0(acc_V_d0),
    .q0(acc_V_q0)
);

myproject_mul_mul_9s_11s_25_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 9 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 25 ))
myproject_mul_mul_9s_11s_25_1_1_U12(
    .din0(w6_V_q0),
    .din1(p_Val2_s_fu_439_p1),
    .dout(p_Val2_s_fu_439_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_235_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        iacc_reg_191 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        iacc_reg_191 <= iacc_1_reg_494;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_2_fu_325_p2 == 1'd1))) begin
        ii2_reg_202 <= 7'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_13_fu_379_p2 == 1'd1))) begin
        ii2_reg_202 <= ii_2_reg_512;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ii_reg_168 <= 7'd0;
    end else if (((tmp_6_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ii_reg_168 <= ii_1_reg_448;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_4_fu_347_p2 == 1'd1))) begin
        ires_reg_224 <= 4'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ires_reg_224 <= ires_1_reg_548;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        jj3_reg_213 <= jj_2_reg_530;
    end else if (((tmp_4_fu_347_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        jj3_reg_213 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        jj_reg_180 <= jj_1_reg_476;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        jj_reg_180 <= 4'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OP1_V_cast_cast_reg_468 <= OP1_V_cast_cast_fu_268_p1;
        p_shl7_reg_463[7 : 1] <= p_shl7_fu_260_p3[7 : 1];
        p_shl_reg_458[9 : 3] <= p_shl_fu_252_p3[9 : 3];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_13_fu_379_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        acc_V_addr_2_reg_535 <= tmp_14_fu_405_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        iacc_1_reg_494 <= iacc_1_fu_331_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ii_1_reg_448 <= ii_1_fu_241_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ii_2_reg_512 <= ii_2_fu_353_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ires_1_reg_548 <= ires_1_fu_428_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        jj_1_reg_476 <= jj_1_fu_282_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        jj_2_reg_530 <= jj_2_fu_385_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_4_fu_347_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        p_shl8_reg_517[9 : 3] <= p_shl8_fu_359_p3[9 : 3];
        p_shl9_reg_522[7 : 1] <= p_shl9_fu_367_p3[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_7_fu_422_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        tmp_12_reg_553[3 : 0] <= tmp_12_fu_434_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_2_fu_325_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_5_reg_499[3 : 0] <= tmp_5_fu_337_p1[3 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_6_fu_276_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_9_reg_481[9 : 0] <= tmp_9_fu_302_p1[9 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        acc_V_address0 = tmp_12_fu_434_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        acc_V_address0 = acc_V_addr_2_reg_535;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        acc_V_address0 = tmp_14_fu_405_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        acc_V_address0 = tmp_5_reg_499;
    end else begin
        acc_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        acc_V_ce0 = 1'b1;
    end else begin
        acc_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        acc_V_d0 = p_Val2_s_35_fu_415_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        acc_V_d0 = b6_V_load_cast_fu_342_p1;
    end else begin
        acc_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        acc_V_we0 = 1'b1;
    end else begin
        acc_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state11) & (tmp_7_fu_422_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (tmp_7_fu_422_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        b6_V_ce0 = 1'b1;
    end else begin
        b6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mult_V_address0 = tmp_15_fu_410_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        mult_V_address0 = tmp_9_reg_481;
    end else begin
        mult_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9))) begin
        mult_V_ce0 = 1'b1;
    end else begin
        mult_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mult_V_we0 = 1'b1;
    end else begin
        mult_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        res_V_ce0 = 1'b1;
    end else begin
        res_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        res_V_we0 = 1'b1;
    end else begin
        res_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w6_V_ce0 = 1'b1;
    end else begin
        w6_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_235_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_6_fu_276_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (tmp_2_fu_325_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (tmp_4_fu_347_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (tmp_13_fu_379_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (tmp_7_fu_422_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_cast_cast_fu_268_p1 = $signed(data_V_q0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b6_V_address0 = tmp_5_fu_337_p1;

assign b6_V_load_cast_fu_342_p1 = $signed(b6_V_q0);

assign data_V_address0 = tmp_s_fu_247_p1;

assign iacc_1_fu_331_p2 = (iacc_reg_191 + 4'd1);

assign ii_1_fu_241_p2 = (ii_reg_168 + 7'd1);

assign ii_2_fu_353_p2 = (ii2_reg_202 + 7'd1);

assign index_1_fu_400_p2 = (tmp2_cast_fu_396_p1 + p_shl8_reg_517);

assign index_fu_297_p2 = (p_shl_reg_458 + tmp1_cast_fu_293_p1);

assign ires_1_fu_428_p2 = (ires_reg_224 + 4'd1);

assign jj3_cast5_fu_375_p1 = jj3_reg_213;

assign jj_1_fu_282_p2 = (jj_reg_180 + 4'd1);

assign jj_2_fu_385_p2 = (jj3_reg_213 + 4'd1);

assign jj_cast8_fu_272_p1 = jj_reg_180;

assign mult_V_d0 = $signed(tmp_766_fu_311_p4);

assign p_Val2_s_35_fu_415_p2 = (acc_V_q0 + mult_V_q0);

assign p_Val2_s_fu_439_p1 = OP1_V_cast_cast_reg_468;

assign p_shl7_fu_260_p3 = {{ii_reg_168}, {1'd0}};

assign p_shl8_fu_359_p3 = {{ii2_reg_202}, {3'd0}};

assign p_shl9_fu_367_p3 = {{ii2_reg_202}, {1'd0}};

assign p_shl_fu_252_p3 = {{ii_reg_168}, {3'd0}};

assign res_V_address0 = tmp_12_reg_553;

assign res_V_d0 = acc_V_q0;

assign tmp1_cast_fu_293_p1 = tmp1_fu_288_p2;

assign tmp1_fu_288_p2 = (jj_cast8_fu_272_p1 + p_shl7_reg_463);

assign tmp2_cast_fu_396_p1 = tmp2_fu_391_p2;

assign tmp2_fu_391_p2 = (p_shl9_reg_522 + jj3_cast5_fu_375_p1);

assign tmp_12_fu_434_p1 = ires_reg_224;

assign tmp_13_fu_379_p2 = ((jj3_reg_213 == 4'd10) ? 1'b1 : 1'b0);

assign tmp_14_fu_405_p1 = jj3_reg_213;

assign tmp_15_fu_410_p1 = index_1_fu_400_p2;

assign tmp_2_fu_325_p2 = ((iacc_reg_191 == 4'd10) ? 1'b1 : 1'b0);

assign tmp_4_fu_347_p2 = ((ii2_reg_202 == 7'd100) ? 1'b1 : 1'b0);

assign tmp_5_fu_337_p1 = iacc_reg_191;

assign tmp_6_fu_276_p2 = ((jj_reg_180 == 4'd10) ? 1'b1 : 1'b0);

assign tmp_766_fu_311_p4 = {{p_Val2_s_fu_439_p2[24:10]}};

assign tmp_7_fu_422_p2 = ((ires_reg_224 == 4'd10) ? 1'b1 : 1'b0);

assign tmp_9_fu_302_p1 = index_fu_297_p2;

assign tmp_fu_235_p2 = ((ii_reg_168 == 7'd100) ? 1'b1 : 1'b0);

assign tmp_s_fu_247_p1 = ii_reg_168;

assign w6_V_address0 = tmp_9_fu_302_p1;

always @ (posedge ap_clk) begin
    p_shl_reg_458[2:0] <= 3'b000;
    p_shl7_reg_463[0] <= 1'b0;
    tmp_9_reg_481[63:10] <= 54'b000000000000000000000000000000000000000000000000000000;
    tmp_5_reg_499[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
    p_shl8_reg_517[2:0] <= 3'b000;
    p_shl9_reg_522[0] <= 1'b0;
    tmp_12_reg_553[63:4] <= 60'b000000000000000000000000000000000000000000000000000000000000;
end

endmodule //dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s
