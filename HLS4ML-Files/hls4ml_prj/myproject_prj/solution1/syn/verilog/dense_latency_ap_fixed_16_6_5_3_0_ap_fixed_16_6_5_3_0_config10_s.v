// ==============================================================
// RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
// Version: 2018.2
// Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
// 
// ===========================================================

`timescale 1 ns / 1 ps 

module dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config10_s (
        ap_clk,
        ap_rst,
        ap_start,
        ap_done,
        ap_idle,
        ap_ready,
        data_V_address0,
        data_V_ce0,
        data_V_q0,
        res_V_address0,
        res_V_ce0,
        res_V_we0,
        res_V_d0
);

parameter    ap_ST_fsm_state1 = 12'd1;
parameter    ap_ST_fsm_state2 = 12'd2;
parameter    ap_ST_fsm_state3 = 12'd4;
parameter    ap_ST_fsm_state4 = 12'd8;
parameter    ap_ST_fsm_state5 = 12'd16;
parameter    ap_ST_fsm_state6 = 12'd32;
parameter    ap_ST_fsm_state7 = 12'd64;
parameter    ap_ST_fsm_state8 = 12'd128;
parameter    ap_ST_fsm_state9 = 12'd256;
parameter    ap_ST_fsm_state10 = 12'd512;
parameter    ap_ST_fsm_state11 = 12'd1024;
parameter    ap_ST_fsm_state12 = 12'd2048;

input   ap_clk;
input   ap_rst;
input   ap_start;
output   ap_done;
output   ap_idle;
output   ap_ready;
output  [3:0] data_V_address0;
output   data_V_ce0;
input  [10:0] data_V_q0;
output  [2:0] res_V_address0;
output   res_V_ce0;
output   res_V_we0;
output  [15:0] res_V_d0;

reg ap_done;
reg ap_idle;
reg ap_ready;
reg data_V_ce0;
reg res_V_ce0;
reg res_V_we0;

(* fsm_encoding = "none" *) reg   [11:0] ap_CS_fsm;
wire    ap_CS_fsm_state1;
wire   [5:0] w10_V_address0;
reg    w10_V_ce0;
wire  signed [10:0] w10_V_q0;
wire   [2:0] b10_V_address0;
reg    b10_V_ce0;
wire   [6:0] b10_V_q0;
wire   [3:0] ii_5_fu_239_p2;
reg   [3:0] ii_5_reg_464;
wire    ap_CS_fsm_state2;
wire   [0:0] tmp_fu_233_p2;
wire   [7:0] tmp_31_fu_274_p2;
reg   [7:0] tmp_31_reg_474;
wire    ap_CS_fsm_state3;
wire  signed [21:0] OP1_V_cast_cast_fu_280_p1;
reg  signed [21:0] OP1_V_cast_cast_reg_479;
wire   [2:0] jj_5_fu_294_p2;
reg   [2:0] jj_5_reg_487;
wire    ap_CS_fsm_state4;
wire   [63:0] tmp_37_fu_309_p1;
reg   [63:0] tmp_37_reg_492;
wire   [0:0] tmp_34_fu_288_p2;
wire   [2:0] iacc_3_fu_338_p2;
reg   [2:0] iacc_3_reg_505;
wire    ap_CS_fsm_state6;
wire   [63:0] tmp_33_fu_344_p1;
reg   [63:0] tmp_33_reg_510;
wire   [0:0] tmp_30_fu_332_p2;
wire   [3:0] ii_6_fu_360_p2;
reg   [3:0] ii_6_reg_523;
wire    ap_CS_fsm_state8;
wire   [7:0] tmp_36_fu_390_p2;
reg   [7:0] tmp_36_reg_528;
wire   [0:0] tmp_32_fu_354_p2;
wire   [2:0] jj_6_fu_406_p2;
reg   [2:0] jj_6_reg_536;
wire    ap_CS_fsm_state9;
reg   [2:0] acc_V_addr_6_reg_541;
wire   [0:0] tmp_41_fu_400_p2;
wire   [2:0] ires_3_fu_444_p2;
reg   [2:0] ires_3_reg_554;
wire    ap_CS_fsm_state11;
wire   [63:0] tmp_40_fu_450_p1;
reg   [63:0] tmp_40_reg_559;
wire   [0:0] tmp_35_fu_438_p2;
reg   [5:0] mult_V_address0;
reg    mult_V_ce0;
reg    mult_V_we0;
wire   [15:0] mult_V_d0;
wire   [15:0] mult_V_q0;
reg   [2:0] acc_V_address0;
reg    acc_V_ce0;
reg    acc_V_we0;
reg   [15:0] acc_V_d0;
wire   [15:0] acc_V_q0;
reg   [3:0] ii_reg_166;
reg   [2:0] jj_reg_178;
wire    ap_CS_fsm_state5;
reg   [2:0] iacc_reg_189;
wire    ap_CS_fsm_state7;
reg   [3:0] ii2_reg_200;
reg   [2:0] jj3_reg_211;
wire    ap_CS_fsm_state10;
reg   [2:0] ires_reg_222;
wire    ap_CS_fsm_state12;
wire   [63:0] tmp_s_fu_245_p1;
wire   [63:0] tmp_42_fu_421_p1;
wire   [63:0] tmp_43_fu_426_p1;
wire  signed [15:0] b10_V_load_cast_fu_349_p1;
wire   [15:0] p_Val2_s_51_fu_431_p2;
wire   [6:0] p_shl_fu_250_p3;
wire   [4:0] p_shl7_fu_262_p3;
wire   [7:0] p_shl_cast_fu_258_p1;
wire   [7:0] p_shl7_cast_fu_270_p1;
wire   [7:0] jj_cast6_fu_284_p1;
wire   [7:0] index_fu_300_p2;
wire  signed [31:0] index_cast_fu_305_p1;
wire  signed [21:0] p_Val2_s_fu_455_p2;
wire   [11:0] tmp_768_fu_318_p4;
wire   [6:0] p_shl8_fu_366_p3;
wire   [4:0] p_shl9_fu_378_p3;
wire   [7:0] p_shl8_cast_fu_374_p1;
wire   [7:0] p_shl9_cast_fu_386_p1;
wire   [7:0] jj3_cast3_fu_396_p1;
wire   [7:0] index_3_fu_412_p2;
wire  signed [31:0] index_3_cast_fu_417_p1;
wire  signed [10:0] p_Val2_s_fu_455_p1;
reg   [11:0] ap_NS_fsm;

// power-on initialization
initial begin
#0 ap_CS_fsm = 12'd1;
end

dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config10_s_w10_V #(
    .DataWidth( 11 ),
    .AddressRange( 60 ),
    .AddressWidth( 6 ))
w10_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(w10_V_address0),
    .ce0(w10_V_ce0),
    .q0(w10_V_q0)
);

dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config10_s_b10_V #(
    .DataWidth( 7 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
b10_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(b10_V_address0),
    .ce0(b10_V_ce0),
    .q0(b10_V_q0)
);

dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config10_s_mult_V #(
    .DataWidth( 16 ),
    .AddressRange( 60 ),
    .AddressWidth( 6 ))
mult_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(mult_V_address0),
    .ce0(mult_V_ce0),
    .we0(mult_V_we0),
    .d0(mult_V_d0),
    .q0(mult_V_q0)
);

dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config10_s_acc_V #(
    .DataWidth( 16 ),
    .AddressRange( 6 ),
    .AddressWidth( 3 ))
acc_V_U(
    .clk(ap_clk),
    .reset(ap_rst),
    .address0(acc_V_address0),
    .ce0(acc_V_ce0),
    .we0(acc_V_we0),
    .d0(acc_V_d0),
    .q0(acc_V_q0)
);

myproject_mul_mul_11s_11s_22_1_1 #(
    .ID( 1 ),
    .NUM_STAGE( 1 ),
    .din0_WIDTH( 11 ),
    .din1_WIDTH( 11 ),
    .dout_WIDTH( 22 ))
myproject_mul_mul_11s_11s_22_1_1_U22(
    .din0(w10_V_q0),
    .din1(p_Val2_s_fu_455_p1),
    .dout(p_Val2_s_fu_455_p2)
);

always @ (posedge ap_clk) begin
    if (ap_rst == 1'b1) begin
        ap_CS_fsm <= ap_ST_fsm_state1;
    end else begin
        ap_CS_fsm <= ap_NS_fsm;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_fu_233_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
        iacc_reg_189 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        iacc_reg_189 <= iacc_3_reg_505;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state6) & (tmp_30_fu_332_p2 == 1'd1))) begin
        ii2_reg_200 <= 4'd0;
    end else if (((1'b1 == ap_CS_fsm_state9) & (tmp_41_fu_400_p2 == 1'd1))) begin
        ii2_reg_200 <= ii_6_reg_523;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
        ii_reg_166 <= 4'd0;
    end else if (((tmp_34_fu_288_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
        ii_reg_166 <= ii_5_reg_464;
    end
end

always @ (posedge ap_clk) begin
    if (((1'b1 == ap_CS_fsm_state8) & (tmp_32_fu_354_p2 == 1'd1))) begin
        ires_reg_222 <= 3'd0;
    end else if ((1'b1 == ap_CS_fsm_state12)) begin
        ires_reg_222 <= ires_3_reg_554;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        jj3_reg_211 <= jj_6_reg_536;
    end else if (((tmp_32_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        jj3_reg_211 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        jj_reg_178 <= jj_5_reg_487;
    end else if ((1'b1 == ap_CS_fsm_state3)) begin
        jj_reg_178 <= 3'd0;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state3)) begin
        OP1_V_cast_cast_reg_479 <= OP1_V_cast_cast_fu_280_p1;
        tmp_31_reg_474[7 : 1] <= tmp_31_fu_274_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_41_fu_400_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state9))) begin
        acc_V_addr_6_reg_541 <= tmp_42_fu_421_p1;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        iacc_3_reg_505 <= iacc_3_fu_338_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        ii_5_reg_464 <= ii_5_fu_239_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state8)) begin
        ii_6_reg_523 <= ii_6_fu_360_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        ires_3_reg_554 <= ires_3_fu_444_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        jj_5_reg_487 <= jj_5_fu_294_p2;
    end
end

always @ (posedge ap_clk) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        jj_6_reg_536 <= jj_6_fu_406_p2;
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_30_fu_332_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state6))) begin
        tmp_33_reg_510[2 : 0] <= tmp_33_fu_344_p1[2 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_32_fu_354_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state8))) begin
        tmp_36_reg_528[7 : 1] <= tmp_36_fu_390_p2[7 : 1];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_34_fu_288_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state4))) begin
        tmp_37_reg_492[31 : 0] <= tmp_37_fu_309_p1[31 : 0];
    end
end

always @ (posedge ap_clk) begin
    if (((tmp_35_fu_438_p2 == 1'd0) & (1'b1 == ap_CS_fsm_state11))) begin
        tmp_40_reg_559[2 : 0] <= tmp_40_fu_450_p1[2 : 0];
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state11)) begin
        acc_V_address0 = tmp_40_fu_450_p1;
    end else if ((1'b1 == ap_CS_fsm_state10)) begin
        acc_V_address0 = acc_V_addr_6_reg_541;
    end else if ((1'b1 == ap_CS_fsm_state9)) begin
        acc_V_address0 = tmp_42_fu_421_p1;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        acc_V_address0 = tmp_33_reg_510;
    end else begin
        acc_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7) | (1'b1 == ap_CS_fsm_state11) | (1'b1 == ap_CS_fsm_state9))) begin
        acc_V_ce0 = 1'b1;
    end else begin
        acc_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state10)) begin
        acc_V_d0 = p_Val2_s_51_fu_431_p2;
    end else if ((1'b1 == ap_CS_fsm_state7)) begin
        acc_V_d0 = b10_V_load_cast_fu_349_p1;
    end else begin
        acc_V_d0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state10) | (1'b1 == ap_CS_fsm_state7))) begin
        acc_V_we0 = 1'b1;
    end else begin
        acc_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1)) | ((1'b1 == ap_CS_fsm_state11) & (tmp_35_fu_438_p2 == 1'd1)))) begin
        ap_done = 1'b1;
    end else begin
        ap_done = 1'b0;
    end
end

always @ (*) begin
    if (((ap_start == 1'b0) & (1'b1 == ap_CS_fsm_state1))) begin
        ap_idle = 1'b1;
    end else begin
        ap_idle = 1'b0;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state11) & (tmp_35_fu_438_p2 == 1'd1))) begin
        ap_ready = 1'b1;
    end else begin
        ap_ready = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state6)) begin
        b10_V_ce0 = 1'b1;
    end else begin
        b10_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state2)) begin
        data_V_ce0 = 1'b1;
    end else begin
        data_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state9)) begin
        mult_V_address0 = tmp_43_fu_426_p1;
    end else if ((1'b1 == ap_CS_fsm_state5)) begin
        mult_V_address0 = tmp_37_reg_492;
    end else begin
        mult_V_address0 = 'bx;
    end
end

always @ (*) begin
    if (((1'b1 == ap_CS_fsm_state5) | (1'b1 == ap_CS_fsm_state9))) begin
        mult_V_ce0 = 1'b1;
    end else begin
        mult_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state5)) begin
        mult_V_we0 = 1'b1;
    end else begin
        mult_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        res_V_ce0 = 1'b1;
    end else begin
        res_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state12)) begin
        res_V_we0 = 1'b1;
    end else begin
        res_V_we0 = 1'b0;
    end
end

always @ (*) begin
    if ((1'b1 == ap_CS_fsm_state4)) begin
        w10_V_ce0 = 1'b1;
    end else begin
        w10_V_ce0 = 1'b0;
    end
end

always @ (*) begin
    case (ap_CS_fsm)
        ap_ST_fsm_state1 : begin
            if (((1'b1 == ap_CS_fsm_state1) & (ap_start == 1'b1))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end
        end
        ap_ST_fsm_state2 : begin
            if (((tmp_fu_233_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state2))) begin
                ap_NS_fsm = ap_ST_fsm_state6;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state3;
            end
        end
        ap_ST_fsm_state3 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state4 : begin
            if (((tmp_34_fu_288_p2 == 1'd1) & (1'b1 == ap_CS_fsm_state4))) begin
                ap_NS_fsm = ap_ST_fsm_state2;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state5;
            end
        end
        ap_ST_fsm_state5 : begin
            ap_NS_fsm = ap_ST_fsm_state4;
        end
        ap_ST_fsm_state6 : begin
            if (((1'b1 == ap_CS_fsm_state6) & (tmp_30_fu_332_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state7;
            end
        end
        ap_ST_fsm_state7 : begin
            ap_NS_fsm = ap_ST_fsm_state6;
        end
        ap_ST_fsm_state8 : begin
            if (((1'b1 == ap_CS_fsm_state8) & (tmp_32_fu_354_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state11;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state9;
            end
        end
        ap_ST_fsm_state9 : begin
            if (((1'b1 == ap_CS_fsm_state9) & (tmp_41_fu_400_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state8;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state10;
            end
        end
        ap_ST_fsm_state10 : begin
            ap_NS_fsm = ap_ST_fsm_state9;
        end
        ap_ST_fsm_state11 : begin
            if (((1'b1 == ap_CS_fsm_state11) & (tmp_35_fu_438_p2 == 1'd1))) begin
                ap_NS_fsm = ap_ST_fsm_state1;
            end else begin
                ap_NS_fsm = ap_ST_fsm_state12;
            end
        end
        ap_ST_fsm_state12 : begin
            ap_NS_fsm = ap_ST_fsm_state11;
        end
        default : begin
            ap_NS_fsm = 'bx;
        end
    endcase
end

assign OP1_V_cast_cast_fu_280_p1 = $signed(data_V_q0);

assign ap_CS_fsm_state1 = ap_CS_fsm[32'd0];

assign ap_CS_fsm_state10 = ap_CS_fsm[32'd9];

assign ap_CS_fsm_state11 = ap_CS_fsm[32'd10];

assign ap_CS_fsm_state12 = ap_CS_fsm[32'd11];

assign ap_CS_fsm_state2 = ap_CS_fsm[32'd1];

assign ap_CS_fsm_state3 = ap_CS_fsm[32'd2];

assign ap_CS_fsm_state4 = ap_CS_fsm[32'd3];

assign ap_CS_fsm_state5 = ap_CS_fsm[32'd4];

assign ap_CS_fsm_state6 = ap_CS_fsm[32'd5];

assign ap_CS_fsm_state7 = ap_CS_fsm[32'd6];

assign ap_CS_fsm_state8 = ap_CS_fsm[32'd7];

assign ap_CS_fsm_state9 = ap_CS_fsm[32'd8];

assign b10_V_address0 = tmp_33_fu_344_p1;

assign b10_V_load_cast_fu_349_p1 = $signed(b10_V_q0);

assign data_V_address0 = tmp_s_fu_245_p1;

assign iacc_3_fu_338_p2 = (iacc_reg_189 + 3'd1);

assign ii_5_fu_239_p2 = (ii_reg_166 + 4'd1);

assign ii_6_fu_360_p2 = (ii2_reg_200 + 4'd1);

assign index_3_cast_fu_417_p1 = $signed(index_3_fu_412_p2);

assign index_3_fu_412_p2 = (tmp_36_reg_528 + jj3_cast3_fu_396_p1);

assign index_cast_fu_305_p1 = $signed(index_fu_300_p2);

assign index_fu_300_p2 = (jj_cast6_fu_284_p1 + tmp_31_reg_474);

assign ires_3_fu_444_p2 = (ires_reg_222 + 3'd1);

assign jj3_cast3_fu_396_p1 = jj3_reg_211;

assign jj_5_fu_294_p2 = (jj_reg_178 + 3'd1);

assign jj_6_fu_406_p2 = (jj3_reg_211 + 3'd1);

assign jj_cast6_fu_284_p1 = jj_reg_178;

assign mult_V_d0 = $signed(tmp_768_fu_318_p4);

assign p_Val2_s_51_fu_431_p2 = (acc_V_q0 + mult_V_q0);

assign p_Val2_s_fu_455_p1 = OP1_V_cast_cast_reg_479;

assign p_shl7_cast_fu_270_p1 = p_shl7_fu_262_p3;

assign p_shl7_fu_262_p3 = {{ii_reg_166}, {1'd0}};

assign p_shl8_cast_fu_374_p1 = p_shl8_fu_366_p3;

assign p_shl8_fu_366_p3 = {{ii2_reg_200}, {3'd0}};

assign p_shl9_cast_fu_386_p1 = p_shl9_fu_378_p3;

assign p_shl9_fu_378_p3 = {{ii2_reg_200}, {1'd0}};

assign p_shl_cast_fu_258_p1 = p_shl_fu_250_p3;

assign p_shl_fu_250_p3 = {{ii_reg_166}, {3'd0}};

assign res_V_address0 = tmp_40_reg_559;

assign res_V_d0 = acc_V_q0;

assign tmp_30_fu_332_p2 = ((iacc_reg_189 == 3'd6) ? 1'b1 : 1'b0);

assign tmp_31_fu_274_p2 = (p_shl_cast_fu_258_p1 - p_shl7_cast_fu_270_p1);

assign tmp_32_fu_354_p2 = ((ii2_reg_200 == 4'd10) ? 1'b1 : 1'b0);

assign tmp_33_fu_344_p1 = iacc_reg_189;

assign tmp_34_fu_288_p2 = ((jj_reg_178 == 3'd6) ? 1'b1 : 1'b0);

assign tmp_35_fu_438_p2 = ((ires_reg_222 == 3'd6) ? 1'b1 : 1'b0);

assign tmp_36_fu_390_p2 = (p_shl8_cast_fu_374_p1 - p_shl9_cast_fu_386_p1);

assign tmp_37_fu_309_p1 = $unsigned(index_cast_fu_305_p1);

assign tmp_40_fu_450_p1 = ires_reg_222;

assign tmp_41_fu_400_p2 = ((jj3_reg_211 == 3'd6) ? 1'b1 : 1'b0);

assign tmp_42_fu_421_p1 = jj3_reg_211;

assign tmp_43_fu_426_p1 = $unsigned(index_3_cast_fu_417_p1);

assign tmp_768_fu_318_p4 = {{p_Val2_s_fu_455_p2[21:10]}};

assign tmp_fu_233_p2 = ((ii_reg_166 == 4'd10) ? 1'b1 : 1'b0);

assign tmp_s_fu_245_p1 = ii_reg_166;

assign w10_V_address0 = tmp_37_fu_309_p1;

always @ (posedge ap_clk) begin
    tmp_31_reg_474[0] <= 1'b0;
    tmp_37_reg_492[63:32] <= 32'b00000000000000000000000000000000;
    tmp_33_reg_510[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
    tmp_36_reg_528[0] <= 1'b0;
    tmp_40_reg_559[63:3] <= 61'b0000000000000000000000000000000000000000000000000000000000000;
end

endmodule //dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config10_s
