-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    data_V_ce0 : OUT STD_LOGIC;
    data_V_q0 : IN STD_LOGIC_VECTOR (10 downto 0);
    res_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    res_V_ce0 : OUT STD_LOGIC;
    res_V_we0 : OUT STD_LOGIC;
    res_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv32_18 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000011000";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal w6_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal w6_V_ce0 : STD_LOGIC;
    signal w6_V_q0 : STD_LOGIC_VECTOR (8 downto 0);
    signal b6_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal b6_V_ce0 : STD_LOGIC;
    signal b6_V_q0 : STD_LOGIC_VECTOR (7 downto 0);
    signal ii_1_fu_241_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ii_1_reg_448 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_235_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl_fu_252_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl_reg_458 : STD_LOGIC_VECTOR (9 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal p_shl7_fu_260_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl7_reg_463 : STD_LOGIC_VECTOR (7 downto 0);
    signal OP1_V_cast_cast_fu_268_p1 : STD_LOGIC_VECTOR (24 downto 0);
    signal OP1_V_cast_cast_reg_468 : STD_LOGIC_VECTOR (24 downto 0);
    signal jj_1_fu_282_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal jj_1_reg_476 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_9_fu_302_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_9_reg_481 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_6_fu_276_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iacc_1_fu_331_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal iacc_1_reg_494 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_5_fu_337_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_5_reg_499 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_2_fu_325_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ii_2_fu_353_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ii_2_reg_512 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal p_shl8_fu_359_p3 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_shl8_reg_517 : STD_LOGIC_VECTOR (9 downto 0);
    signal tmp_4_fu_347_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal p_shl9_fu_367_p3 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl9_reg_522 : STD_LOGIC_VECTOR (7 downto 0);
    signal jj_2_fu_385_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal jj_2_reg_530 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal acc_V_addr_2_reg_535 : STD_LOGIC_VECTOR (3 downto 0);
    signal tmp_13_fu_379_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ires_1_fu_428_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ires_1_reg_548 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_12_fu_434_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_12_reg_553 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_7_fu_422_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mult_V_address0 : STD_LOGIC_VECTOR (9 downto 0);
    signal mult_V_ce0 : STD_LOGIC;
    signal mult_V_we0 : STD_LOGIC;
    signal mult_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_address0 : STD_LOGIC_VECTOR (3 downto 0);
    signal acc_V_ce0 : STD_LOGIC;
    signal acc_V_we0 : STD_LOGIC;
    signal acc_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_reg_168 : STD_LOGIC_VECTOR (6 downto 0);
    signal jj_reg_180 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal iacc_reg_191 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ii2_reg_202 : STD_LOGIC_VECTOR (6 downto 0);
    signal jj3_reg_213 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ires_reg_224 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_s_fu_247_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_14_fu_405_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_15_fu_410_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b6_V_load_cast_fu_342_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_35_fu_415_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal jj_cast8_fu_272_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_fu_288_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp1_cast_fu_293_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal index_fu_297_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_s_fu_439_p2 : STD_LOGIC_VECTOR (24 downto 0);
    signal tmp_766_fu_311_p4 : STD_LOGIC_VECTOR (14 downto 0);
    signal jj3_cast5_fu_375_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_fu_391_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp2_cast_fu_396_p1 : STD_LOGIC_VECTOR (9 downto 0);
    signal index_1_fu_400_p2 : STD_LOGIC_VECTOR (9 downto 0);
    signal p_Val2_s_fu_439_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component myproject_mul_mul_9s_11s_25_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (8 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (24 downto 0) );
    end component;


    component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_w6_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (8 downto 0) );
    end component;


    component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_b6_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (7 downto 0) );
    end component;


    component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_mult_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (9 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_acc_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (3 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    w6_V_U : component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_w6_V
    generic map (
        DataWidth => 9,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w6_V_address0,
        ce0 => w6_V_ce0,
        q0 => w6_V_q0);

    b6_V_U : component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_b6_V
    generic map (
        DataWidth => 8,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b6_V_address0,
        ce0 => b6_V_ce0,
        q0 => b6_V_q0);

    mult_V_U : component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_mult_V
    generic map (
        DataWidth => 16,
        AddressRange => 1000,
        AddressWidth => 10)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mult_V_address0,
        ce0 => mult_V_ce0,
        we0 => mult_V_we0,
        d0 => mult_V_d0,
        q0 => mult_V_q0);

    acc_V_U : component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config6_s_acc_V
    generic map (
        DataWidth => 16,
        AddressRange => 10,
        AddressWidth => 4)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_V_address0,
        ce0 => acc_V_ce0,
        we0 => acc_V_we0,
        d0 => acc_V_d0,
        q0 => acc_V_q0);

    myproject_mul_mul_9s_11s_25_1_1_U12 : component myproject_mul_mul_9s_11s_25_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 9,
        din1_WIDTH => 11,
        dout_WIDTH => 25)
    port map (
        din0 => w6_V_q0,
        din1 => p_Val2_s_fu_439_p1,
        dout => p_Val2_s_fu_439_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    iacc_reg_191_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_235_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                iacc_reg_191 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                iacc_reg_191 <= iacc_1_reg_494;
            end if; 
        end if;
    end process;

    ii2_reg_202_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_2_fu_325_p2 = ap_const_lv1_1))) then 
                ii2_reg_202 <= ap_const_lv7_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_13_fu_379_p2 = ap_const_lv1_1))) then 
                ii2_reg_202 <= ii_2_reg_512;
            end if; 
        end if;
    end process;

    ii_reg_168_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ii_reg_168 <= ap_const_lv7_0;
            elsif (((tmp_6_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                ii_reg_168 <= ii_1_reg_448;
            end if; 
        end if;
    end process;

    ires_reg_224_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_4_fu_347_p2 = ap_const_lv1_1))) then 
                ires_reg_224 <= ap_const_lv4_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                ires_reg_224 <= ires_1_reg_548;
            end if; 
        end if;
    end process;

    jj3_reg_213_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                jj3_reg_213 <= jj_2_reg_530;
            elsif (((tmp_4_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                jj3_reg_213 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;

    jj_reg_180_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                jj_reg_180 <= jj_1_reg_476;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                jj_reg_180 <= ap_const_lv4_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                OP1_V_cast_cast_reg_468 <= OP1_V_cast_cast_fu_268_p1;
                    p_shl7_reg_463(7 downto 1) <= p_shl7_fu_260_p3(7 downto 1);
                    p_shl_reg_458(9 downto 3) <= p_shl_fu_252_p3(9 downto 3);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_13_fu_379_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                acc_V_addr_2_reg_535 <= tmp_14_fu_405_p1(4 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                iacc_1_reg_494 <= iacc_1_fu_331_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ii_1_reg_448 <= ii_1_fu_241_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                ii_2_reg_512 <= ii_2_fu_353_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                ires_1_reg_548 <= ires_1_fu_428_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                jj_1_reg_476 <= jj_1_fu_282_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                jj_2_reg_530 <= jj_2_fu_385_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_4_fu_347_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    p_shl8_reg_517(9 downto 3) <= p_shl8_fu_359_p3(9 downto 3);
                    p_shl9_reg_522(7 downto 1) <= p_shl9_fu_367_p3(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_7_fu_422_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    tmp_12_reg_553(3 downto 0) <= tmp_12_fu_434_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_2_fu_325_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    tmp_5_reg_499(3 downto 0) <= tmp_5_fu_337_p1(3 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_6_fu_276_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_9_reg_481(9 downto 0) <= tmp_9_fu_302_p1(9 downto 0);
            end if;
        end if;
    end process;
    p_shl_reg_458(2 downto 0) <= "000";
    p_shl7_reg_463(0) <= '0';
    tmp_9_reg_481(63 downto 10) <= "000000000000000000000000000000000000000000000000000000";
    tmp_5_reg_499(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";
    p_shl8_reg_517(2 downto 0) <= "000";
    p_shl9_reg_522(0) <= '0';
    tmp_12_reg_553(63 downto 4) <= "000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_235_p2, ap_CS_fsm_state4, tmp_6_fu_276_p2, ap_CS_fsm_state6, tmp_2_fu_325_p2, ap_CS_fsm_state8, tmp_4_fu_347_p2, ap_CS_fsm_state9, tmp_13_fu_379_p2, ap_CS_fsm_state11, tmp_7_fu_422_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_235_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((tmp_6_fu_276_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_2_fu_325_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_4_fu_347_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_13_fu_379_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_7_fu_422_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
        OP1_V_cast_cast_fu_268_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_V_q0),25));


    acc_V_address0_assign_proc : process(tmp_5_reg_499, ap_CS_fsm_state9, acc_V_addr_2_reg_535, ap_CS_fsm_state11, tmp_12_fu_434_p1, ap_CS_fsm_state7, ap_CS_fsm_state10, tmp_14_fu_405_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            acc_V_address0 <= tmp_12_fu_434_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            acc_V_address0 <= acc_V_addr_2_reg_535;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            acc_V_address0 <= tmp_14_fu_405_p1(4 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            acc_V_address0 <= tmp_5_reg_499(4 - 1 downto 0);
        else 
            acc_V_address0 <= "XXXX";
        end if; 
    end process;


    acc_V_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            acc_V_ce0 <= ap_const_logic_1;
        else 
            acc_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    acc_V_d0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10, b6_V_load_cast_fu_342_p1, p_Val2_s_35_fu_415_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            acc_V_d0 <= p_Val2_s_35_fu_415_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            acc_V_d0 <= b6_V_load_cast_fu_342_p1;
        else 
            acc_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    acc_V_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            acc_V_we0 <= ap_const_logic_1;
        else 
            acc_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11, tmp_7_fu_422_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_7_fu_422_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, tmp_7_fu_422_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_7_fu_422_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b6_V_address0 <= tmp_5_fu_337_p1(4 - 1 downto 0);

    b6_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            b6_V_ce0 <= ap_const_logic_1;
        else 
            b6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        b6_V_load_cast_fu_342_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b6_V_q0),16));

    data_V_address0 <= tmp_s_fu_247_p1(7 - 1 downto 0);

    data_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iacc_1_fu_331_p2 <= std_logic_vector(unsigned(iacc_reg_191) + unsigned(ap_const_lv4_1));
    ii_1_fu_241_p2 <= std_logic_vector(unsigned(ii_reg_168) + unsigned(ap_const_lv7_1));
    ii_2_fu_353_p2 <= std_logic_vector(unsigned(ii2_reg_202) + unsigned(ap_const_lv7_1));
    index_1_fu_400_p2 <= std_logic_vector(unsigned(tmp2_cast_fu_396_p1) + unsigned(p_shl8_reg_517));
    index_fu_297_p2 <= std_logic_vector(unsigned(p_shl_reg_458) + unsigned(tmp1_cast_fu_293_p1));
    ires_1_fu_428_p2 <= std_logic_vector(unsigned(ires_reg_224) + unsigned(ap_const_lv4_1));
    jj3_cast5_fu_375_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj3_reg_213),8));
    jj_1_fu_282_p2 <= std_logic_vector(unsigned(jj_reg_180) + unsigned(ap_const_lv4_1));
    jj_2_fu_385_p2 <= std_logic_vector(unsigned(jj3_reg_213) + unsigned(ap_const_lv4_1));
    jj_cast8_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj_reg_180),8));

    mult_V_address0_assign_proc : process(tmp_9_reg_481, ap_CS_fsm_state9, ap_CS_fsm_state5, tmp_15_fu_410_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mult_V_address0 <= tmp_15_fu_410_p1(10 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mult_V_address0 <= tmp_9_reg_481(10 - 1 downto 0);
        else 
            mult_V_address0 <= "XXXXXXXXXX";
        end if; 
    end process;


    mult_V_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            mult_V_ce0 <= ap_const_logic_1;
        else 
            mult_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        mult_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_766_fu_311_p4),16));


    mult_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mult_V_we0 <= ap_const_logic_1;
        else 
            mult_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_s_35_fu_415_p2 <= std_logic_vector(unsigned(acc_V_q0) + unsigned(mult_V_q0));
    p_Val2_s_fu_439_p1 <= OP1_V_cast_cast_reg_468(11 - 1 downto 0);
    p_shl7_fu_260_p3 <= (ii_reg_168 & ap_const_lv1_0);
    p_shl8_fu_359_p3 <= (ii2_reg_202 & ap_const_lv3_0);
    p_shl9_fu_367_p3 <= (ii2_reg_202 & ap_const_lv1_0);
    p_shl_fu_252_p3 <= (ii_reg_168 & ap_const_lv3_0);
    res_V_address0 <= tmp_12_reg_553(4 - 1 downto 0);

    res_V_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            res_V_ce0 <= ap_const_logic_1;
        else 
            res_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_V_d0 <= acc_V_q0;

    res_V_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            res_V_we0 <= ap_const_logic_1;
        else 
            res_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp1_cast_fu_293_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp1_fu_288_p2),10));
    tmp1_fu_288_p2 <= std_logic_vector(unsigned(jj_cast8_fu_272_p1) + unsigned(p_shl7_reg_463));
    tmp2_cast_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(tmp2_fu_391_p2),10));
    tmp2_fu_391_p2 <= std_logic_vector(unsigned(p_shl9_reg_522) + unsigned(jj3_cast5_fu_375_p1));
    tmp_12_fu_434_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ires_reg_224),64));
    tmp_13_fu_379_p2 <= "1" when (jj3_reg_213 = ap_const_lv4_A) else "0";
    tmp_14_fu_405_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj3_reg_213),64));
    tmp_15_fu_410_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_1_fu_400_p2),64));
    tmp_2_fu_325_p2 <= "1" when (iacc_reg_191 = ap_const_lv4_A) else "0";
    tmp_4_fu_347_p2 <= "1" when (ii2_reg_202 = ap_const_lv7_64) else "0";
    tmp_5_fu_337_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iacc_reg_191),64));
    tmp_6_fu_276_p2 <= "1" when (jj_reg_180 = ap_const_lv4_A) else "0";
    tmp_766_fu_311_p4 <= p_Val2_s_fu_439_p2(24 downto 10);
    tmp_7_fu_422_p2 <= "1" when (ires_reg_224 = ap_const_lv4_A) else "0";
    tmp_9_fu_302_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_297_p2),64));
    tmp_fu_235_p2 <= "1" when (ii_reg_168 = ap_const_lv7_64) else "0";
    tmp_s_fu_247_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_reg_168),64));
    w6_V_address0 <= tmp_9_fu_302_p1(10 - 1 downto 0);

    w6_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            w6_V_ce0 <= ap_const_logic_1;
        else 
            w6_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
