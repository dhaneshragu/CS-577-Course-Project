-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config10_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_address0 : OUT STD_LOGIC_VECTOR (3 downto 0);
    data_V_ce0 : OUT STD_LOGIC;
    data_V_q0 : IN STD_LOGIC_VECTOR (10 downto 0);
    res_V_address0 : OUT STD_LOGIC_VECTOR (2 downto 0);
    res_V_ce0 : OUT STD_LOGIC;
    res_V_we0 : OUT STD_LOGIC;
    res_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config10_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv4_0 : STD_LOGIC_VECTOR (3 downto 0) := "0000";
    constant ap_const_lv3_0 : STD_LOGIC_VECTOR (2 downto 0) := "000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv4_A : STD_LOGIC_VECTOR (3 downto 0) := "1010";
    constant ap_const_lv4_1 : STD_LOGIC_VECTOR (3 downto 0) := "0001";
    constant ap_const_lv3_6 : STD_LOGIC_VECTOR (2 downto 0) := "110";
    constant ap_const_lv3_1 : STD_LOGIC_VECTOR (2 downto 0) := "001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal w10_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal w10_V_ce0 : STD_LOGIC;
    signal w10_V_q0 : STD_LOGIC_VECTOR (10 downto 0);
    signal b10_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal b10_V_ce0 : STD_LOGIC;
    signal b10_V_q0 : STD_LOGIC_VECTOR (6 downto 0);
    signal ii_5_fu_239_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ii_5_reg_464 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal tmp_fu_233_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal tmp_31_fu_274_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_31_reg_474 : STD_LOGIC_VECTOR (7 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal OP1_V_cast_cast_fu_280_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal OP1_V_cast_cast_reg_479 : STD_LOGIC_VECTOR (21 downto 0);
    signal jj_5_fu_294_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal jj_5_reg_487 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_37_fu_309_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_37_reg_492 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_34_fu_288_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iacc_3_fu_338_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal iacc_3_reg_505 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_33_fu_344_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_33_reg_510 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_30_fu_332_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ii_6_fu_360_p2 : STD_LOGIC_VECTOR (3 downto 0);
    signal ii_6_reg_523 : STD_LOGIC_VECTOR (3 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal tmp_36_fu_390_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_36_reg_528 : STD_LOGIC_VECTOR (7 downto 0);
    signal tmp_32_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal jj_6_fu_406_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal jj_6_reg_536 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal acc_V_addr_6_reg_541 : STD_LOGIC_VECTOR (2 downto 0);
    signal tmp_41_fu_400_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ires_3_fu_444_p2 : STD_LOGIC_VECTOR (2 downto 0);
    signal ires_3_reg_554 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_40_fu_450_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_40_reg_559 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_35_fu_438_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mult_V_address0 : STD_LOGIC_VECTOR (5 downto 0);
    signal mult_V_ce0 : STD_LOGIC;
    signal mult_V_we0 : STD_LOGIC;
    signal mult_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal mult_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_address0 : STD_LOGIC_VECTOR (2 downto 0);
    signal acc_V_ce0 : STD_LOGIC;
    signal acc_V_we0 : STD_LOGIC;
    signal acc_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_reg_166 : STD_LOGIC_VECTOR (3 downto 0);
    signal jj_reg_178 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal iacc_reg_189 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ii2_reg_200 : STD_LOGIC_VECTOR (3 downto 0);
    signal jj3_reg_211 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ires_reg_222 : STD_LOGIC_VECTOR (2 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_s_fu_245_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_42_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_43_fu_426_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b10_V_load_cast_fu_349_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_51_fu_431_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_shl_fu_250_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl7_fu_262_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl_cast_fu_258_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl7_cast_fu_270_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal jj_cast6_fu_284_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_fu_300_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_cast_fu_305_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_455_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_768_fu_318_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal p_shl8_fu_366_p3 : STD_LOGIC_VECTOR (6 downto 0);
    signal p_shl9_fu_378_p3 : STD_LOGIC_VECTOR (4 downto 0);
    signal p_shl8_cast_fu_374_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal p_shl9_cast_fu_386_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal jj3_cast3_fu_396_p1 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_3_fu_412_p2 : STD_LOGIC_VECTOR (7 downto 0);
    signal index_3_cast_fu_417_p1 : STD_LOGIC_VECTOR (31 downto 0);
    signal p_Val2_s_fu_455_p1 : STD_LOGIC_VECTOR (10 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component myproject_mul_mul_11s_11s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (10 downto 0);
        din1 : IN STD_LOGIC_VECTOR (10 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config10_s_w10_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (10 downto 0) );
    end component;


    component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config10_s_b10_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (6 downto 0) );
    end component;


    component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config10_s_mult_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (5 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;


    component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config10_s_acc_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (2 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    w10_V_U : component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config10_s_w10_V
    generic map (
        DataWidth => 11,
        AddressRange => 60,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w10_V_address0,
        ce0 => w10_V_ce0,
        q0 => w10_V_q0);

    b10_V_U : component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config10_s_b10_V
    generic map (
        DataWidth => 7,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b10_V_address0,
        ce0 => b10_V_ce0,
        q0 => b10_V_q0);

    mult_V_U : component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config10_s_mult_V
    generic map (
        DataWidth => 16,
        AddressRange => 60,
        AddressWidth => 6)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mult_V_address0,
        ce0 => mult_V_ce0,
        we0 => mult_V_we0,
        d0 => mult_V_d0,
        q0 => mult_V_q0);

    acc_V_U : component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config10_s_acc_V
    generic map (
        DataWidth => 16,
        AddressRange => 6,
        AddressWidth => 3)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_V_address0,
        ce0 => acc_V_ce0,
        we0 => acc_V_we0,
        d0 => acc_V_d0,
        q0 => acc_V_q0);

    myproject_mul_mul_11s_11s_22_1_1_U22 : component myproject_mul_mul_11s_11s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 11,
        din1_WIDTH => 11,
        dout_WIDTH => 22)
    port map (
        din0 => w10_V_q0,
        din1 => p_Val2_s_fu_455_p1,
        dout => p_Val2_s_fu_455_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    iacc_reg_189_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                iacc_reg_189 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                iacc_reg_189 <= iacc_3_reg_505;
            end if; 
        end if;
    end process;

    ii2_reg_200_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_30_fu_332_p2 = ap_const_lv1_1))) then 
                ii2_reg_200 <= ap_const_lv4_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_41_fu_400_p2 = ap_const_lv1_1))) then 
                ii2_reg_200 <= ii_6_reg_523;
            end if; 
        end if;
    end process;

    ii_reg_166_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ii_reg_166 <= ap_const_lv4_0;
            elsif (((tmp_34_fu_288_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                ii_reg_166 <= ii_5_reg_464;
            end if; 
        end if;
    end process;

    ires_reg_222_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_32_fu_354_p2 = ap_const_lv1_1))) then 
                ires_reg_222 <= ap_const_lv3_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                ires_reg_222 <= ires_3_reg_554;
            end if; 
        end if;
    end process;

    jj3_reg_211_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                jj3_reg_211 <= jj_6_reg_536;
            elsif (((tmp_32_fu_354_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                jj3_reg_211 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;

    jj_reg_178_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                jj_reg_178 <= jj_5_reg_487;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                jj_reg_178 <= ap_const_lv3_0;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                OP1_V_cast_cast_reg_479 <= OP1_V_cast_cast_fu_280_p1;
                    tmp_31_reg_474(7 downto 1) <= tmp_31_fu_274_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_41_fu_400_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                acc_V_addr_6_reg_541 <= tmp_42_fu_421_p1(3 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                iacc_3_reg_505 <= iacc_3_fu_338_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ii_5_reg_464 <= ii_5_fu_239_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                ii_6_reg_523 <= ii_6_fu_360_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                ires_3_reg_554 <= ires_3_fu_444_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                jj_5_reg_487 <= jj_5_fu_294_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                jj_6_reg_536 <= jj_6_fu_406_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_30_fu_332_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    tmp_33_reg_510(2 downto 0) <= tmp_33_fu_344_p1(2 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_32_fu_354_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then
                    tmp_36_reg_528(7 downto 1) <= tmp_36_fu_390_p2(7 downto 1);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_34_fu_288_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_37_reg_492(31 downto 0) <= tmp_37_fu_309_p1(31 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_35_fu_438_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    tmp_40_reg_559(2 downto 0) <= tmp_40_fu_450_p1(2 downto 0);
            end if;
        end if;
    end process;
    tmp_31_reg_474(0) <= '0';
    tmp_37_reg_492(63 downto 32) <= "00000000000000000000000000000000";
    tmp_33_reg_510(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";
    tmp_36_reg_528(0) <= '0';
    tmp_40_reg_559(63 downto 3) <= "0000000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_233_p2, ap_CS_fsm_state4, tmp_34_fu_288_p2, ap_CS_fsm_state6, tmp_30_fu_332_p2, ap_CS_fsm_state8, tmp_32_fu_354_p2, ap_CS_fsm_state9, tmp_41_fu_400_p2, ap_CS_fsm_state11, tmp_35_fu_438_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_233_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((tmp_34_fu_288_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_30_fu_332_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_32_fu_354_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_41_fu_400_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_35_fu_438_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
        OP1_V_cast_cast_fu_280_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_V_q0),22));


    acc_V_address0_assign_proc : process(tmp_33_reg_510, ap_CS_fsm_state9, acc_V_addr_6_reg_541, ap_CS_fsm_state11, tmp_40_fu_450_p1, ap_CS_fsm_state7, ap_CS_fsm_state10, tmp_42_fu_421_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            acc_V_address0 <= tmp_40_fu_450_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            acc_V_address0 <= acc_V_addr_6_reg_541;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            acc_V_address0 <= tmp_42_fu_421_p1(3 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            acc_V_address0 <= tmp_33_reg_510(3 - 1 downto 0);
        else 
            acc_V_address0 <= "XXX";
        end if; 
    end process;


    acc_V_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            acc_V_ce0 <= ap_const_logic_1;
        else 
            acc_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    acc_V_d0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10, b10_V_load_cast_fu_349_p1, p_Val2_s_51_fu_431_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            acc_V_d0 <= p_Val2_s_51_fu_431_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            acc_V_d0 <= b10_V_load_cast_fu_349_p1;
        else 
            acc_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    acc_V_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            acc_V_we0 <= ap_const_logic_1;
        else 
            acc_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11, tmp_35_fu_438_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_35_fu_438_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, tmp_35_fu_438_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_35_fu_438_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b10_V_address0 <= tmp_33_fu_344_p1(3 - 1 downto 0);

    b10_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            b10_V_ce0 <= ap_const_logic_1;
        else 
            b10_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        b10_V_load_cast_fu_349_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b10_V_q0),16));

    data_V_address0 <= tmp_s_fu_245_p1(4 - 1 downto 0);

    data_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iacc_3_fu_338_p2 <= std_logic_vector(unsigned(iacc_reg_189) + unsigned(ap_const_lv3_1));
    ii_5_fu_239_p2 <= std_logic_vector(unsigned(ii_reg_166) + unsigned(ap_const_lv4_1));
    ii_6_fu_360_p2 <= std_logic_vector(unsigned(ii2_reg_200) + unsigned(ap_const_lv4_1));
        index_3_cast_fu_417_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_3_fu_412_p2),32));

    index_3_fu_412_p2 <= std_logic_vector(unsigned(tmp_36_reg_528) + unsigned(jj3_cast3_fu_396_p1));
        index_cast_fu_305_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(index_fu_300_p2),32));

    index_fu_300_p2 <= std_logic_vector(unsigned(jj_cast6_fu_284_p1) + unsigned(tmp_31_reg_474));
    ires_3_fu_444_p2 <= std_logic_vector(unsigned(ires_reg_222) + unsigned(ap_const_lv3_1));
    jj3_cast3_fu_396_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj3_reg_211),8));
    jj_5_fu_294_p2 <= std_logic_vector(unsigned(jj_reg_178) + unsigned(ap_const_lv3_1));
    jj_6_fu_406_p2 <= std_logic_vector(unsigned(jj3_reg_211) + unsigned(ap_const_lv3_1));
    jj_cast6_fu_284_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj_reg_178),8));

    mult_V_address0_assign_proc : process(tmp_37_reg_492, ap_CS_fsm_state9, ap_CS_fsm_state5, tmp_43_fu_426_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mult_V_address0 <= tmp_43_fu_426_p1(6 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mult_V_address0 <= tmp_37_reg_492(6 - 1 downto 0);
        else 
            mult_V_address0 <= "XXXXXX";
        end if; 
    end process;


    mult_V_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            mult_V_ce0 <= ap_const_logic_1;
        else 
            mult_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        mult_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_768_fu_318_p4),16));


    mult_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mult_V_we0 <= ap_const_logic_1;
        else 
            mult_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    p_Val2_s_51_fu_431_p2 <= std_logic_vector(unsigned(acc_V_q0) + unsigned(mult_V_q0));
    p_Val2_s_fu_455_p1 <= OP1_V_cast_cast_reg_479(11 - 1 downto 0);
    p_shl7_cast_fu_270_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl7_fu_262_p3),8));
    p_shl7_fu_262_p3 <= (ii_reg_166 & ap_const_lv1_0);
    p_shl8_cast_fu_374_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl8_fu_366_p3),8));
    p_shl8_fu_366_p3 <= (ii2_reg_200 & ap_const_lv3_0);
    p_shl9_cast_fu_386_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl9_fu_378_p3),8));
    p_shl9_fu_378_p3 <= (ii2_reg_200 & ap_const_lv1_0);
    p_shl_cast_fu_258_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(p_shl_fu_250_p3),8));
    p_shl_fu_250_p3 <= (ii_reg_166 & ap_const_lv3_0);
    res_V_address0 <= tmp_40_reg_559(3 - 1 downto 0);

    res_V_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            res_V_ce0 <= ap_const_logic_1;
        else 
            res_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_V_d0 <= acc_V_q0;

    res_V_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            res_V_we0 <= ap_const_logic_1;
        else 
            res_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_30_fu_332_p2 <= "1" when (iacc_reg_189 = ap_const_lv3_6) else "0";
    tmp_31_fu_274_p2 <= std_logic_vector(unsigned(p_shl_cast_fu_258_p1) - unsigned(p_shl7_cast_fu_270_p1));
    tmp_32_fu_354_p2 <= "1" when (ii2_reg_200 = ap_const_lv4_A) else "0";
    tmp_33_fu_344_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iacc_reg_189),64));
    tmp_34_fu_288_p2 <= "1" when (jj_reg_178 = ap_const_lv3_6) else "0";
    tmp_35_fu_438_p2 <= "1" when (ires_reg_222 = ap_const_lv3_6) else "0";
    tmp_36_fu_390_p2 <= std_logic_vector(unsigned(p_shl8_cast_fu_374_p1) - unsigned(p_shl9_cast_fu_386_p1));
    tmp_37_fu_309_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_cast_fu_305_p1),64));
    tmp_40_fu_450_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ires_reg_222),64));
    tmp_41_fu_400_p2 <= "1" when (jj3_reg_211 = ap_const_lv3_6) else "0";
    tmp_42_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj3_reg_211),64));
    tmp_43_fu_426_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_3_cast_fu_417_p1),64));
    tmp_768_fu_318_p4 <= p_Val2_s_fu_455_p2(21 downto 10);
    tmp_fu_233_p2 <= "1" when (ii_reg_166 = ap_const_lv4_A) else "0";
    tmp_s_fu_245_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_reg_166),64));
    w10_V_address0 <= tmp_37_fu_309_p1(6 - 1 downto 0);

    w10_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            w10_V_ce0 <= ap_const_logic_1;
        else 
            w10_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
