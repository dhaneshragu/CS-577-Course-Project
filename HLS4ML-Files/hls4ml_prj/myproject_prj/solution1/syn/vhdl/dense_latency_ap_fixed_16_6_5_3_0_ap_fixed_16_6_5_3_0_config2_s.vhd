-- ==============================================================
-- RTL generated by Vivado(TM) HLS - High-Level Synthesis from C, C++ and SystemC
-- Version: 2018.2
-- Copyright (C) 1986-2018 Xilinx, Inc. All Rights Reserved.
-- 
-- ===========================================================

library IEEE;
use IEEE.std_logic_1164.all;
use IEEE.numeric_std.all;

entity dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s is
port (
    ap_clk : IN STD_LOGIC;
    ap_rst : IN STD_LOGIC;
    ap_start : IN STD_LOGIC;
    ap_done : OUT STD_LOGIC;
    ap_idle : OUT STD_LOGIC;
    ap_ready : OUT STD_LOGIC;
    data_V_address0 : OUT STD_LOGIC_VECTOR (11 downto 0);
    data_V_ce0 : OUT STD_LOGIC;
    data_V_q0 : IN STD_LOGIC_VECTOR (15 downto 0);
    res_V_address0 : OUT STD_LOGIC_VECTOR (6 downto 0);
    res_V_ce0 : OUT STD_LOGIC;
    res_V_we0 : OUT STD_LOGIC;
    res_V_d0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
end;


architecture behav of dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s is 
    constant ap_const_logic_1 : STD_LOGIC := '1';
    constant ap_const_logic_0 : STD_LOGIC := '0';
    constant ap_ST_fsm_state1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_ST_fsm_state2 : STD_LOGIC_VECTOR (11 downto 0) := "000000000010";
    constant ap_ST_fsm_state3 : STD_LOGIC_VECTOR (11 downto 0) := "000000000100";
    constant ap_ST_fsm_state4 : STD_LOGIC_VECTOR (11 downto 0) := "000000001000";
    constant ap_ST_fsm_state5 : STD_LOGIC_VECTOR (11 downto 0) := "000000010000";
    constant ap_ST_fsm_state6 : STD_LOGIC_VECTOR (11 downto 0) := "000000100000";
    constant ap_ST_fsm_state7 : STD_LOGIC_VECTOR (11 downto 0) := "000001000000";
    constant ap_ST_fsm_state8 : STD_LOGIC_VECTOR (11 downto 0) := "000010000000";
    constant ap_ST_fsm_state9 : STD_LOGIC_VECTOR (11 downto 0) := "000100000000";
    constant ap_ST_fsm_state10 : STD_LOGIC_VECTOR (11 downto 0) := "001000000000";
    constant ap_ST_fsm_state11 : STD_LOGIC_VECTOR (11 downto 0) := "010000000000";
    constant ap_ST_fsm_state12 : STD_LOGIC_VECTOR (11 downto 0) := "100000000000";
    constant ap_const_lv32_0 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000000";
    constant ap_const_lv32_1 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000001";
    constant ap_const_lv1_0 : STD_LOGIC_VECTOR (0 downto 0) := "0";
    constant ap_const_lv32_2 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000010";
    constant ap_const_lv32_3 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000011";
    constant ap_const_lv32_5 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000101";
    constant ap_const_lv32_7 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000111";
    constant ap_const_lv32_8 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001000";
    constant ap_const_lv32_A : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001010";
    constant ap_const_lv1_1 : STD_LOGIC_VECTOR (0 downto 0) := "1";
    constant ap_const_lv12_0 : STD_LOGIC_VECTOR (11 downto 0) := "000000000000";
    constant ap_const_lv19_0 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000000000000";
    constant ap_const_lv7_0 : STD_LOGIC_VECTOR (6 downto 0) := "0000000";
    constant ap_const_lv32_4 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000100";
    constant ap_const_lv32_6 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000000110";
    constant ap_const_lv32_9 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001001";
    constant ap_const_lv32_B : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000001011";
    constant ap_const_lv19_64 : STD_LOGIC_VECTOR (18 downto 0) := "0000000000001100100";
    constant ap_const_lv12_A3E : STD_LOGIC_VECTOR (11 downto 0) := "101000111110";
    constant ap_const_lv12_1 : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    constant ap_const_lv7_64 : STD_LOGIC_VECTOR (6 downto 0) := "1100100";
    constant ap_const_lv7_1 : STD_LOGIC_VECTOR (6 downto 0) := "0000001";
    constant ap_const_lv32_15 : STD_LOGIC_VECTOR (31 downto 0) := "00000000000000000000000000010101";
    constant ap_const_boolean_1 : BOOLEAN := true;

    signal ap_CS_fsm : STD_LOGIC_VECTOR (11 downto 0) := "000000000001";
    attribute fsm_encoding : string;
    attribute fsm_encoding of ap_CS_fsm : signal is "none";
    signal ap_CS_fsm_state1 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state1 : signal is "none";
    signal w2_V_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal w2_V_ce0 : STD_LOGIC;
    signal w2_V_q0 : STD_LOGIC_VECTOR (5 downto 0);
    signal b2_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal b2_V_ce0 : STD_LOGIC;
    signal b2_V_q0 : STD_LOGIC_VECTOR (11 downto 0);
    signal next_mul_fu_254_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal next_mul_reg_432 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state2 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state2 : signal is "none";
    signal ii_3_fu_266_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ii_3_reg_440 : STD_LOGIC_VECTOR (11 downto 0);
    signal tmp_fu_260_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal OP1_V_cast_cast_fu_277_p1 : STD_LOGIC_VECTOR (21 downto 0);
    signal OP1_V_cast_cast_reg_450 : STD_LOGIC_VECTOR (21 downto 0);
    signal ap_CS_fsm_state3 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state3 : signal is "none";
    signal jj_3_fu_291_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal jj_3_reg_458 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state4 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state4 : signal is "none";
    signal tmp_23_fu_303_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_23_reg_463 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_20_fu_285_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal iacc_2_fu_332_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal iacc_2_reg_476 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state6 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state6 : signal is "none";
    signal tmp_19_fu_338_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_19_reg_481 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_16_fu_326_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal next_mul2_fu_348_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal next_mul2_reg_491 : STD_LOGIC_VECTOR (18 downto 0);
    signal ap_CS_fsm_state8 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state8 : signal is "none";
    signal ii_4_fu_360_p2 : STD_LOGIC_VECTOR (11 downto 0);
    signal ii_4_reg_499 : STD_LOGIC_VECTOR (11 downto 0);
    signal jj_4_fu_376_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal jj_4_reg_507 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state9 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state9 : signal is "none";
    signal acc_V_addr_4_reg_512 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_27_fu_370_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ires_2_fu_415_p2 : STD_LOGIC_VECTOR (6 downto 0);
    signal ires_2_reg_525 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state11 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state11 : signal is "none";
    signal tmp_26_fu_421_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_26_reg_530 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_21_fu_409_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal mult_V_address0 : STD_LOGIC_VECTOR (18 downto 0);
    signal mult_V_ce0 : STD_LOGIC;
    signal mult_V_we0 : STD_LOGIC;
    signal mult_V_d0 : STD_LOGIC_VECTOR (12 downto 0);
    signal mult_V_q0 : STD_LOGIC_VECTOR (12 downto 0);
    signal acc_V_address0 : STD_LOGIC_VECTOR (6 downto 0);
    signal acc_V_ce0 : STD_LOGIC;
    signal acc_V_we0 : STD_LOGIC;
    signal acc_V_d0 : STD_LOGIC_VECTOR (15 downto 0);
    signal acc_V_q0 : STD_LOGIC_VECTOR (15 downto 0);
    signal ii_reg_164 : STD_LOGIC_VECTOR (11 downto 0);
    signal phi_mul_reg_175 : STD_LOGIC_VECTOR (18 downto 0);
    signal jj_reg_187 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state5 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state5 : signal is "none";
    signal iacc_reg_198 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state7 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state7 : signal is "none";
    signal ii2_reg_209 : STD_LOGIC_VECTOR (11 downto 0);
    signal phi_mul1_reg_220 : STD_LOGIC_VECTOR (18 downto 0);
    signal jj3_reg_232 : STD_LOGIC_VECTOR (6 downto 0);
    signal tmp_18_fu_354_p2 : STD_LOGIC_VECTOR (0 downto 0);
    signal ap_CS_fsm_state10 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state10 : signal is "none";
    signal ires_reg_243 : STD_LOGIC_VECTOR (6 downto 0);
    signal ap_CS_fsm_state12 : STD_LOGIC;
    attribute fsm_encoding of ap_CS_fsm_state12 : signal is "none";
    signal tmp_s_fu_272_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_28_fu_388_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal tmp_29_fu_393_p1 : STD_LOGIC_VECTOR (63 downto 0);
    signal b2_V_load_cast_fu_343_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_43_fu_402_p2 : STD_LOGIC_VECTOR (15 downto 0);
    signal jj_cast6_fu_281_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal index_fu_297_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_s_fu_426_p2 : STD_LOGIC_VECTOR (21 downto 0);
    signal tmp_767_fu_312_p4 : STD_LOGIC_VECTOR (11 downto 0);
    signal jj3_cast3_fu_366_p1 : STD_LOGIC_VECTOR (18 downto 0);
    signal index_2_fu_382_p2 : STD_LOGIC_VECTOR (18 downto 0);
    signal p_Val2_37_fu_398_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal p_Val2_s_fu_426_p1 : STD_LOGIC_VECTOR (15 downto 0);
    signal ap_NS_fsm : STD_LOGIC_VECTOR (11 downto 0);

    component myproject_mul_mul_6s_16s_22_1_1 IS
    generic (
        ID : INTEGER;
        NUM_STAGE : INTEGER;
        din0_WIDTH : INTEGER;
        din1_WIDTH : INTEGER;
        dout_WIDTH : INTEGER );
    port (
        din0 : IN STD_LOGIC_VECTOR (5 downto 0);
        din1 : IN STD_LOGIC_VECTOR (15 downto 0);
        dout : OUT STD_LOGIC_VECTOR (21 downto 0) );
    end component;


    component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_w2_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (5 downto 0) );
    end component;


    component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_b2_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        q0 : OUT STD_LOGIC_VECTOR (11 downto 0) );
    end component;


    component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_mult_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (18 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (12 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (12 downto 0) );
    end component;


    component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_acc_V IS
    generic (
        DataWidth : INTEGER;
        AddressRange : INTEGER;
        AddressWidth : INTEGER );
    port (
        clk : IN STD_LOGIC;
        reset : IN STD_LOGIC;
        address0 : IN STD_LOGIC_VECTOR (6 downto 0);
        ce0 : IN STD_LOGIC;
        we0 : IN STD_LOGIC;
        d0 : IN STD_LOGIC_VECTOR (15 downto 0);
        q0 : OUT STD_LOGIC_VECTOR (15 downto 0) );
    end component;



begin
    w2_V_U : component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_w2_V
    generic map (
        DataWidth => 6,
        AddressRange => 262200,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => w2_V_address0,
        ce0 => w2_V_ce0,
        q0 => w2_V_q0);

    b2_V_U : component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_b2_V
    generic map (
        DataWidth => 12,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => b2_V_address0,
        ce0 => b2_V_ce0,
        q0 => b2_V_q0);

    mult_V_U : component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_mult_V
    generic map (
        DataWidth => 13,
        AddressRange => 262200,
        AddressWidth => 19)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => mult_V_address0,
        ce0 => mult_V_ce0,
        we0 => mult_V_we0,
        d0 => mult_V_d0,
        q0 => mult_V_q0);

    acc_V_U : component dense_latency_ap_fixed_16_6_5_3_0_ap_fixed_16_6_5_3_0_config2_s_acc_V
    generic map (
        DataWidth => 16,
        AddressRange => 100,
        AddressWidth => 7)
    port map (
        clk => ap_clk,
        reset => ap_rst,
        address0 => acc_V_address0,
        ce0 => acc_V_ce0,
        we0 => acc_V_we0,
        d0 => acc_V_d0,
        q0 => acc_V_q0);

    myproject_mul_mul_6s_16s_22_1_1_U1 : component myproject_mul_mul_6s_16s_22_1_1
    generic map (
        ID => 1,
        NUM_STAGE => 1,
        din0_WIDTH => 6,
        din1_WIDTH => 16,
        dout_WIDTH => 22)
    port map (
        din0 => w2_V_q0,
        din1 => p_Val2_s_fu_426_p1,
        dout => p_Val2_s_fu_426_p2);





    ap_CS_fsm_assign_proc : process(ap_clk)
    begin
        if (ap_clk'event and ap_clk =  '1') then
            if (ap_rst = '1') then
                ap_CS_fsm <= ap_ST_fsm_state1;
            else
                ap_CS_fsm <= ap_NS_fsm;
            end if;
        end if;
    end process;


    iacc_reg_198_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_fu_260_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then 
                iacc_reg_198 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
                iacc_reg_198 <= iacc_2_reg_476;
            end if; 
        end if;
    end process;

    ii2_reg_209_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_16_fu_326_p2 = ap_const_lv1_1))) then 
                ii2_reg_209 <= ap_const_lv12_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_370_p2 = ap_const_lv1_1))) then 
                ii2_reg_209 <= ii_4_reg_499;
            end if; 
        end if;
    end process;

    ii_reg_164_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                ii_reg_164 <= ap_const_lv12_0;
            elsif (((tmp_20_fu_285_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                ii_reg_164 <= ii_3_reg_440;
            end if; 
        end if;
    end process;

    ires_reg_243_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_18_fu_354_p2 = ap_const_lv1_1))) then 
                ires_reg_243 <= ap_const_lv7_0;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
                ires_reg_243 <= ires_2_reg_525;
            end if; 
        end if;
    end process;

    jj3_reg_232_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
                jj3_reg_232 <= jj_4_reg_507;
            elsif (((tmp_18_fu_354_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state8))) then 
                jj3_reg_232 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    jj_reg_187_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
                jj_reg_187 <= jj_3_reg_458;
            elsif ((ap_const_logic_1 = ap_CS_fsm_state3)) then 
                jj_reg_187 <= ap_const_lv7_0;
            end if; 
        end if;
    end process;

    phi_mul1_reg_220_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_16_fu_326_p2 = ap_const_lv1_1))) then 
                phi_mul1_reg_220 <= ap_const_lv19_0;
            elsif (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_370_p2 = ap_const_lv1_1))) then 
                phi_mul1_reg_220 <= next_mul2_reg_491;
            end if; 
        end if;
    end process;

    phi_mul_reg_175_assign_proc : process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then 
                phi_mul_reg_175 <= ap_const_lv19_0;
            elsif (((tmp_20_fu_285_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then 
                phi_mul_reg_175 <= next_mul_reg_432;
            end if; 
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state3)) then
                OP1_V_cast_cast_reg_450 <= OP1_V_cast_cast_fu_277_p1;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_27_fu_370_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state9))) then
                acc_V_addr_4_reg_512 <= tmp_28_fu_388_p1(7 - 1 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state6)) then
                iacc_2_reg_476 <= iacc_2_fu_332_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state2)) then
                ii_3_reg_440 <= ii_3_fu_266_p2;
                next_mul_reg_432 <= next_mul_fu_254_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state8)) then
                ii_4_reg_499 <= ii_4_fu_360_p2;
                next_mul2_reg_491 <= next_mul2_fu_348_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state11)) then
                ires_2_reg_525 <= ires_2_fu_415_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state4)) then
                jj_3_reg_458 <= jj_3_fu_291_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if ((ap_const_logic_1 = ap_CS_fsm_state9)) then
                jj_4_reg_507 <= jj_4_fu_376_p2;
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_16_fu_326_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state6))) then
                    tmp_19_reg_481(6 downto 0) <= tmp_19_fu_338_p1(6 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_20_fu_285_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    tmp_23_reg_463(18 downto 0) <= tmp_23_fu_303_p1(18 downto 0);
            end if;
        end if;
    end process;
    process (ap_clk)
    begin
        if (ap_clk'event and ap_clk = '1') then
            if (((tmp_21_fu_409_p2 = ap_const_lv1_0) and (ap_const_logic_1 = ap_CS_fsm_state11))) then
                    tmp_26_reg_530(6 downto 0) <= tmp_26_fu_421_p1(6 downto 0);
            end if;
        end if;
    end process;
    tmp_23_reg_463(63 downto 19) <= "000000000000000000000000000000000000000000000";
    tmp_19_reg_481(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";
    tmp_26_reg_530(63 downto 7) <= "000000000000000000000000000000000000000000000000000000000";

    ap_NS_fsm_assign_proc : process (ap_start, ap_CS_fsm, ap_CS_fsm_state1, ap_CS_fsm_state2, tmp_fu_260_p2, ap_CS_fsm_state4, tmp_20_fu_285_p2, ap_CS_fsm_state6, tmp_16_fu_326_p2, ap_CS_fsm_state8, ap_CS_fsm_state9, tmp_27_fu_370_p2, ap_CS_fsm_state11, tmp_21_fu_409_p2, tmp_18_fu_354_p2)
    begin
        case ap_CS_fsm is
            when ap_ST_fsm_state1 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state1) and (ap_start = ap_const_logic_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state1;
                end if;
            when ap_ST_fsm_state2 => 
                if (((tmp_fu_260_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state2))) then
                    ap_NS_fsm <= ap_ST_fsm_state6;
                else
                    ap_NS_fsm <= ap_ST_fsm_state3;
                end if;
            when ap_ST_fsm_state3 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state4 => 
                if (((tmp_20_fu_285_p2 = ap_const_lv1_1) and (ap_const_logic_1 = ap_CS_fsm_state4))) then
                    ap_NS_fsm <= ap_ST_fsm_state2;
                else
                    ap_NS_fsm <= ap_ST_fsm_state5;
                end if;
            when ap_ST_fsm_state5 => 
                ap_NS_fsm <= ap_ST_fsm_state4;
            when ap_ST_fsm_state6 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state6) and (tmp_16_fu_326_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state7;
                end if;
            when ap_ST_fsm_state7 => 
                ap_NS_fsm <= ap_ST_fsm_state6;
            when ap_ST_fsm_state8 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state8) and (tmp_18_fu_354_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state11;
                else
                    ap_NS_fsm <= ap_ST_fsm_state9;
                end if;
            when ap_ST_fsm_state9 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state9) and (tmp_27_fu_370_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state8;
                else
                    ap_NS_fsm <= ap_ST_fsm_state10;
                end if;
            when ap_ST_fsm_state10 => 
                ap_NS_fsm <= ap_ST_fsm_state9;
            when ap_ST_fsm_state11 => 
                if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_21_fu_409_p2 = ap_const_lv1_1))) then
                    ap_NS_fsm <= ap_ST_fsm_state1;
                else
                    ap_NS_fsm <= ap_ST_fsm_state12;
                end if;
            when ap_ST_fsm_state12 => 
                ap_NS_fsm <= ap_ST_fsm_state11;
            when others =>  
                ap_NS_fsm <= "XXXXXXXXXXXX";
        end case;
    end process;
        OP1_V_cast_cast_fu_277_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(data_V_q0),22));


    acc_V_address0_assign_proc : process(tmp_19_reg_481, ap_CS_fsm_state9, acc_V_addr_4_reg_512, ap_CS_fsm_state11, tmp_26_fu_421_p1, ap_CS_fsm_state7, ap_CS_fsm_state10, tmp_28_fu_388_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state11)) then 
            acc_V_address0 <= tmp_26_fu_421_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            acc_V_address0 <= acc_V_addr_4_reg_512;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            acc_V_address0 <= tmp_28_fu_388_p1(7 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            acc_V_address0 <= tmp_19_reg_481(7 - 1 downto 0);
        else 
            acc_V_address0 <= "XXXXXXX";
        end if; 
    end process;


    acc_V_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state11, ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7) or (ap_const_logic_1 = ap_CS_fsm_state11) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            acc_V_ce0 <= ap_const_logic_1;
        else 
            acc_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;


    acc_V_d0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10, b2_V_load_cast_fu_343_p1, p_Val2_s_43_fu_402_p2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state10)) then 
            acc_V_d0 <= p_Val2_s_43_fu_402_p2;
        elsif ((ap_const_logic_1 = ap_CS_fsm_state7)) then 
            acc_V_d0 <= b2_V_load_cast_fu_343_p1;
        else 
            acc_V_d0 <= "XXXXXXXXXXXXXXXX";
        end if; 
    end process;


    acc_V_we0_assign_proc : process(ap_CS_fsm_state7, ap_CS_fsm_state10)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state10) or (ap_const_logic_1 = ap_CS_fsm_state7))) then 
            acc_V_we0 <= ap_const_logic_1;
        else 
            acc_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    ap_CS_fsm_state1 <= ap_CS_fsm(0);
    ap_CS_fsm_state10 <= ap_CS_fsm(9);
    ap_CS_fsm_state11 <= ap_CS_fsm(10);
    ap_CS_fsm_state12 <= ap_CS_fsm(11);
    ap_CS_fsm_state2 <= ap_CS_fsm(1);
    ap_CS_fsm_state3 <= ap_CS_fsm(2);
    ap_CS_fsm_state4 <= ap_CS_fsm(3);
    ap_CS_fsm_state5 <= ap_CS_fsm(4);
    ap_CS_fsm_state6 <= ap_CS_fsm(5);
    ap_CS_fsm_state7 <= ap_CS_fsm(6);
    ap_CS_fsm_state8 <= ap_CS_fsm(7);
    ap_CS_fsm_state9 <= ap_CS_fsm(8);

    ap_done_assign_proc : process(ap_start, ap_CS_fsm_state1, ap_CS_fsm_state11, tmp_21_fu_409_p2)
    begin
        if ((((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1)) or ((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_21_fu_409_p2 = ap_const_lv1_1)))) then 
            ap_done <= ap_const_logic_1;
        else 
            ap_done <= ap_const_logic_0;
        end if; 
    end process;


    ap_idle_assign_proc : process(ap_start, ap_CS_fsm_state1)
    begin
        if (((ap_start = ap_const_logic_0) and (ap_const_logic_1 = ap_CS_fsm_state1))) then 
            ap_idle <= ap_const_logic_1;
        else 
            ap_idle <= ap_const_logic_0;
        end if; 
    end process;


    ap_ready_assign_proc : process(ap_CS_fsm_state11, tmp_21_fu_409_p2)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state11) and (tmp_21_fu_409_p2 = ap_const_lv1_1))) then 
            ap_ready <= ap_const_logic_1;
        else 
            ap_ready <= ap_const_logic_0;
        end if; 
    end process;

    b2_V_address0 <= tmp_19_fu_338_p1(7 - 1 downto 0);

    b2_V_ce0_assign_proc : process(ap_CS_fsm_state6)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state6)) then 
            b2_V_ce0 <= ap_const_logic_1;
        else 
            b2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        b2_V_load_cast_fu_343_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(b2_V_q0),16));

    data_V_address0 <= tmp_s_fu_272_p1(12 - 1 downto 0);

    data_V_ce0_assign_proc : process(ap_CS_fsm_state2)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state2)) then 
            data_V_ce0 <= ap_const_logic_1;
        else 
            data_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    iacc_2_fu_332_p2 <= std_logic_vector(unsigned(iacc_reg_198) + unsigned(ap_const_lv7_1));
    ii_3_fu_266_p2 <= std_logic_vector(unsigned(ii_reg_164) + unsigned(ap_const_lv12_1));
    ii_4_fu_360_p2 <= std_logic_vector(unsigned(ii2_reg_209) + unsigned(ap_const_lv12_1));
    index_2_fu_382_p2 <= std_logic_vector(unsigned(phi_mul1_reg_220) + unsigned(jj3_cast3_fu_366_p1));
    index_fu_297_p2 <= std_logic_vector(unsigned(jj_cast6_fu_281_p1) + unsigned(phi_mul_reg_175));
    ires_2_fu_415_p2 <= std_logic_vector(unsigned(ires_reg_243) + unsigned(ap_const_lv7_1));
    jj3_cast3_fu_366_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj3_reg_232),19));
    jj_3_fu_291_p2 <= std_logic_vector(unsigned(jj_reg_187) + unsigned(ap_const_lv7_1));
    jj_4_fu_376_p2 <= std_logic_vector(unsigned(jj3_reg_232) + unsigned(ap_const_lv7_1));
    jj_cast6_fu_281_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj_reg_187),19));

    mult_V_address0_assign_proc : process(tmp_23_reg_463, ap_CS_fsm_state9, ap_CS_fsm_state5, tmp_29_fu_393_p1)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state9)) then 
            mult_V_address0 <= tmp_29_fu_393_p1(19 - 1 downto 0);
        elsif ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mult_V_address0 <= tmp_23_reg_463(19 - 1 downto 0);
        else 
            mult_V_address0 <= "XXXXXXXXXXXXXXXXXXX";
        end if; 
    end process;


    mult_V_ce0_assign_proc : process(ap_CS_fsm_state9, ap_CS_fsm_state5)
    begin
        if (((ap_const_logic_1 = ap_CS_fsm_state5) or (ap_const_logic_1 = ap_CS_fsm_state9))) then 
            mult_V_ce0 <= ap_const_logic_1;
        else 
            mult_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

        mult_V_d0 <= std_logic_vector(IEEE.numeric_std.resize(signed(tmp_767_fu_312_p4),13));


    mult_V_we0_assign_proc : process(ap_CS_fsm_state5)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state5)) then 
            mult_V_we0 <= ap_const_logic_1;
        else 
            mult_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    next_mul2_fu_348_p2 <= std_logic_vector(unsigned(phi_mul1_reg_220) + unsigned(ap_const_lv19_64));
    next_mul_fu_254_p2 <= std_logic_vector(unsigned(phi_mul_reg_175) + unsigned(ap_const_lv19_64));
        p_Val2_37_fu_398_p1 <= std_logic_vector(IEEE.numeric_std.resize(signed(mult_V_q0),16));

    p_Val2_s_43_fu_402_p2 <= std_logic_vector(unsigned(acc_V_q0) + unsigned(p_Val2_37_fu_398_p1));
    p_Val2_s_fu_426_p1 <= OP1_V_cast_cast_reg_450(16 - 1 downto 0);
    res_V_address0 <= tmp_26_reg_530(7 - 1 downto 0);

    res_V_ce0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            res_V_ce0 <= ap_const_logic_1;
        else 
            res_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

    res_V_d0 <= acc_V_q0;

    res_V_we0_assign_proc : process(ap_CS_fsm_state12)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state12)) then 
            res_V_we0 <= ap_const_logic_1;
        else 
            res_V_we0 <= ap_const_logic_0;
        end if; 
    end process;

    tmp_16_fu_326_p2 <= "1" when (iacc_reg_198 = ap_const_lv7_64) else "0";
    tmp_18_fu_354_p2 <= "1" when (ii2_reg_209 = ap_const_lv12_A3E) else "0";
    tmp_19_fu_338_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(iacc_reg_198),64));
    tmp_20_fu_285_p2 <= "1" when (jj_reg_187 = ap_const_lv7_64) else "0";
    tmp_21_fu_409_p2 <= "1" when (ires_reg_243 = ap_const_lv7_64) else "0";
    tmp_23_fu_303_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_fu_297_p2),64));
    tmp_26_fu_421_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ires_reg_243),64));
    tmp_27_fu_370_p2 <= "1" when (jj3_reg_232 = ap_const_lv7_64) else "0";
    tmp_28_fu_388_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(jj3_reg_232),64));
    tmp_29_fu_393_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(index_2_fu_382_p2),64));
    tmp_767_fu_312_p4 <= p_Val2_s_fu_426_p2(21 downto 10);
    tmp_fu_260_p2 <= "1" when (ii_reg_164 = ap_const_lv12_A3E) else "0";
    tmp_s_fu_272_p1 <= std_logic_vector(IEEE.numeric_std.resize(unsigned(ii_reg_164),64));
    w2_V_address0 <= tmp_23_fu_303_p1(19 - 1 downto 0);

    w2_V_ce0_assign_proc : process(ap_CS_fsm_state4)
    begin
        if ((ap_const_logic_1 = ap_CS_fsm_state4)) then 
            w2_V_ce0 <= ap_const_logic_1;
        else 
            w2_V_ce0 <= ap_const_logic_0;
        end if; 
    end process;

end behav;
